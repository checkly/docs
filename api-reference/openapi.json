{
    "openapi": "3.0.0",
    "info": {
        "title": "Checkly Public API",
        "version": "v1",
        "description": "These are the docs for the newly released Checkly Public API.<br />If you have any questions, please do not hesitate to get in touch with us.",
        "x-logo": {
            "url": "/logo.png",
            "backgroundColor": "#FFFFFF",
            "altText": "Checkly Logo",
            "href": "https://checklyhq.com"
        }
    },
    "security": [
        {
            "Bearer": []
        }
    ],
    "tags": [],
    "paths": {
        "/accounts/{accountId}/metrics": {
            "post": {
                "operationId": "postAccountsAccountidMetrics",
                "parameters": [
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Model1"
                            }
                        }
                    }
                },
                "tags": [
                    "opentelemetry",
                    "metrics"
                ],
                "responses": {
                    "default": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/accounts": {
            "get": {
                "summary": "[beta] Fetch user accounts",
                "operationId": "getV1Accounts",
                "description": "**[beta]** List account details based on supplied API key. (This endpoint is in beta and may change without notice.)",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Accounts"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountList"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/accounts/me": {
            "get": {
                "summary": "[beta] Fetch current account details",
                "operationId": "getV1AccountsMe",
                "description": "**[beta]** Get details from the current account (This endpoint is in beta and may change without notice.)",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Accounts"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/accounts/{accountId}": {
            "get": {
                "summary": "[beta] Fetch a given account details",
                "operationId": "getV1AccountsAccountid",
                "description": "**[beta]** Get details from a specific account. (This endpoint is in beta and may change without notice.)",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Accounts"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/alert-channels": {
            "get": {
                "summary": "List all alert channels",
                "operationId": "getV1Alertchannels",
                "description": "Lists all configured alert channels and their subscribed checks.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Page number",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 1
                        }
                    }
                ],
                "tags": [
                    "Alert channels"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertChannelList"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create an alert channel",
                "operationId": "postV1Alertchannels",
                "description": "Creates a new alert channel",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/AlertChannelCreate"
                },
                "tags": [
                    "Alert channels"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertChannel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRequiredError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/alert-channels/{id}": {
            "delete": {
                "summary": "Delete an alert channel",
                "operationId": "deleteV1AlertchannelsId",
                "description": "Permanently removes an alert channel",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "Alert channels"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Retrieve an alert channel",
                "operationId": "getV1AlertchannelsId",
                "description": "Show details of a specific alert channel.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "Alert channels"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertChannel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update an alert channel",
                "operationId": "putV1AlertchannelsId",
                "description": "Update an alert channel",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/AlertChannelCreate"
                },
                "tags": [
                    "Alert channels"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertChannel"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRequiredError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/alert-channels/{id}/subscriptions": {
            "put": {
                "summary": "Update the subscriptions of an alert channel",
                "operationId": "putV1AlertchannelsIdSubscriptions",
                "description": "Update the subscriptions of an alert channel. Use this to add a check to an alert channel so failure and recovery alerts are send out for that check. Note: when passing the subscription object, you can only specify a \"checkId\" or a \"groupId, not both.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AlertChannelSubscriptionCreate"
                            }
                        }
                    }
                },
                "tags": [
                    "Alert channels"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertChanelSubscription"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/alert-notifications": {
            "get": {
                "summary": "Lists all alert notifications",
                "operationId": "getV1Alertnotifications",
                "description": "Lists the alert notifications that have been sent for your account. You can filter by alert channel ID or limit to only failing notifications.

Use the `to` and `from` parameters to specify a date range (UNIX timestamp in seconds). This endpoint will return data within a 24-hour timeframe. If the `from` and `to` params are set, they must be at most 24 hours apart. If none are set, we will consider the `to` param to be now and the `from` param to be 24 hours earlier. If only the `to` param is set we will set `from` to be 24 hours earlier. If only the `from` param is set we will consider the `to` param to be 24 hours later.

<b>Rate-limiting is applied to this endpoint, you can send 5 requests / 10 seconds at most.<b>",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Page number",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 1
                        }
                    },
                    {
                        "description": "Select records up from this UNIX timestamp (>= date). Defaults to now - 6 hours.",
                        "name": "from",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Optional. Select records up to this UNIX timestamp (< date). Defaults to 6 hours after \"from\".",
                        "name": "to",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Limit results to an alert channel",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "alertChannelId",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Sending the alert notification was unsuccessful",
                        "name": "hasFailures",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "tags": [
                    "Alert notifications"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertNotificationList"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRequiredError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/analytics/api-checks/{id}": {
            "get": {
                "summary": "API checks",
                "operationId": "getV1AnalyticsApichecksId",
                "description": "Fetch detailed availability metrics and aggregated or non-aggregated API Check metrics across custom time ranges. For example, you can get the p99 and p95 of all the DNS phases of your API check together with the availability percentage for any time range.

<b>Rate-limiting is applied to this endpoint, you can send 30 requests / 60 seconds at most.<b>",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Custom start time of reporting window in unix timestamp format. Setting a custom \"from\" timestamp overrides the use of any \"quickRange\".",
                        "name": "from",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Custom end time of reporting window in unix timestamp format. Setting a custom \"to\" timestamp overrides the use of any \"quickRange\".",
                        "name": "to",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Preset reporting windows are used for quickly generating report on commonly used windows. Can be overridden by using a custom \"to\" and \"from\" timestamp.",
                        "name": "quickRange",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "last24Hours",
                                "last7Days",
                                "last30Days",
                                "thisWeek",
                                "thisMonth",
                                "lastWeek",
                                "lastMonth"
                            ],
                            "default": "last24Hours"
                        }
                    },
                    {
                        "description": "The time interval to use for aggregating metrics in minutes. For example, five minutes is 5, 24 hours is 1440.",
                        "name": "aggregationInterval",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "minimum": 1,
                            "maximum": 43200
                        }
                    },
                    {
                        "description": "Filter based on whether a check result was either failing or passing",
                        "x-constraint": {
                            "single": true
                        },
                        "name": "filterByStatus",
                        "in": "query",
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "success",
                                    "failure"
                                ]
                            }
                        }
                    },
                    {
                        "description": "Determines how the series data is grouped. Note that grouped queries are a bit more expensive and might take longer.",
                        "name": "groupBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "runLocation",
                                "statusCode"
                            ]
                        }
                    },
                    {
                        "description": "Available metrics for API Checks. You can pass multiple metrics as a comma separated string.",
                        "x-constraint": {
                            "single": true
                        },
                        "name": "metrics",
                        "in": "query",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "responseTime",
                                    "wait",
                                    "dns",
                                    "tcp",
                                    "firstByte",
                                    "download",
                                    "availability",
                                    "retries",
                                    "responseTime_avg",
                                    "responseTime_max",
                                    "responseTime_median",
                                    "responseTime_min",
                                    "responseTime_p50",
                                    "responseTime_p90",
                                    "responseTime_p95",
                                    "responseTime_p99",
                                    "responseTime_stddev",
                                    "responseTime_sum",
                                    "wait_avg",
                                    "wait_max",
                                    "wait_median",
                                    "wait_min",
                                    "wait_p50",
                                    "wait_p90",
                                    "wait_p95",
                                    "wait_p99",
                                    "wait_stddev",
                                    "wait_sum",
                                    "dns_avg",
                                    "dns_max",
                                    "dns_median",
                                    "dns_min",
                                    "dns_p50",
                                    "dns_p90",
                                    "dns_p95",
                                    "dns_p99",
                                    "dns_stddev",
                                    "dns_sum",
                                    "tcp_avg",
                                    "tcp_max",
                                    "tcp_median",
                                    "tcp_min",
                                    "tcp_p50",
                                    "tcp_p90",
                                    "tcp_p95",
                                    "tcp_p99",
                                    "tcp_stddev",
                                    "tcp_sum",
                                    "firstByte_avg",
                                    "firstByte_max",
                                    "firstByte_median",
                                    "firstByte_min",
                                    "firstByte_p50",
                                    "firstByte_p90",
                                    "firstByte_p95",
                                    "firstByte_p99",
                                    "firstByte_stddev",
                                    "firstByte_sum",
                                    "download_avg",
                                    "download_max",
                                    "download_median",
                                    "download_min",
                                    "download_p50",
                                    "download_p90",
                                    "download_p95",
                                    "download_p99",
                                    "download_stddev",
                                    "download_sum"
                                ]
                            }
                        }
                    },
                    {
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Page number",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 1
                        }
                    }
                ],
                "tags": [
                    "Analytics"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model8"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/analytics/browser-checks/{id}": {
            "get": {
                "summary": "Browser checks",
                "operationId": "getV1AnalyticsBrowserchecksId",
                "description": "Fetch detailed availability metrics and aggregated or non-aggregated Browser Check metrics across custom time ranges.  For example, you can get the average amount of console errors, the p99 of your FCP and the standard deviation of your TTFB for the second page in your Browser check with one API call.

<b>Rate-limiting is applied to this endpoint, you can send 30 requests / 60 seconds at most.<b>",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Custom start time of reporting window in unix timestamp format. Setting a custom \"from\" timestamp overrides the use of any \"quickRange\".",
                        "name": "from",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Custom end time of reporting window in unix timestamp format. Setting a custom \"to\" timestamp overrides the use of any \"quickRange\".",
                        "name": "to",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Preset reporting windows are used for quickly generating report on commonly used windows. Can be overridden by using a custom \"to\" and \"from\" timestamp.",
                        "name": "quickRange",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "last24Hours",
                                "last7Days",
                                "last30Days",
                                "thisWeek",
                                "thisMonth",
                                "lastWeek",
                                "lastMonth"
                            ],
                            "default": "last24Hours"
                        }
                    },
                    {
                        "description": "The time interval to use for aggregating metrics in minutes. For example, five minutes is 5, 24 hours is 1440.",
                        "name": "aggregationInterval",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "minimum": 1,
                            "maximum": 43200
                        }
                    },
                    {
                        "description": "Filter based on whether a check result was either failing or passing",
                        "x-constraint": {
                            "single": true
                        },
                        "name": "filterByStatus",
                        "in": "query",
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "success",
                                    "failure"
                                ]
                            }
                        }
                    },
                    {
                        "description": "Determines how the series data is grouped. Note that grouped queries are a bit more expensive and might take longer.",
                        "name": "groupBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "runLocation",
                                "pageIndex"
                            ]
                        }
                    },
                    {
                        "description": "Available metrics for Browser Checks. You can pass multiple metrics as a comma separated string.",
                        "x-constraint": {
                            "single": true
                        },
                        "name": "metrics",
                        "in": "query",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "responseTime",
                                    "TTFB",
                                    "FCP",
                                    "LCP",
                                    "CLS",
                                    "TBT",
                                    "consoleErrors",
                                    "networkErrors",
                                    "userScriptErrors",
                                    "documentErrors",
                                    "availability",
                                    "retries",
                                    "responseTime_avg",
                                    "responseTime_max",
                                    "responseTime_median",
                                    "responseTime_min",
                                    "responseTime_p50",
                                    "responseTime_p90",
                                    "responseTime_p95",
                                    "responseTime_p99",
                                    "responseTime_stddev",
                                    "responseTime_sum",
                                    "TTFB_avg",
                                    "TTFB_max",
                                    "TTFB_median",
                                    "TTFB_min",
                                    "TTFB_p50",
                                    "TTFB_p90",
                                    "TTFB_p95",
                                    "TTFB_p99",
                                    "TTFB_stddev",
                                    "TTFB_sum",
                                    "FCP_avg",
                                    "FCP_max",
                                    "FCP_median",
                                    "FCP_min",
                                    "FCP_p50",
                                    "FCP_p90",
                                    "FCP_p95",
                                    "FCP_p99",
                                    "FCP_stddev",
                                    "FCP_sum",
                                    "LCP_avg",
                                    "LCP_max",
                                    "LCP_median",
                                    "LCP_min",
                                    "LCP_p50",
                                    "LCP_p90",
                                    "LCP_p95",
                                    "LCP_p99",
                                    "LCP_stddev",
                                    "LCP_sum",
                                    "CLS_avg",
                                    "CLS_max",
                                    "CLS_median",
                                    "CLS_min",
                                    "CLS_p50",
                                    "CLS_p90",
                                    "CLS_p95",
                                    "CLS_p99",
                                    "CLS_stddev",
                                    "CLS_sum",
                                    "TBT_avg",
                                    "TBT_max",
                                    "TBT_median",
                                    "TBT_min",
                                    "TBT_p50",
                                    "TBT_p90",
                                    "TBT_p95",
                                    "TBT_p99",
                                    "TBT_stddev",
                                    "TBT_sum",
                                    "consoleErrors_avg",
                                    "consoleErrors_max",
                                    "consoleErrors_median",
                                    "consoleErrors_min",
                                    "consoleErrors_p50",
                                    "consoleErrors_p90",
                                    "consoleErrors_p95",
                                    "consoleErrors_p99",
                                    "consoleErrors_stddev",
                                    "consoleErrors_sum",
                                    "networkErrors_avg",
                                    "networkErrors_max",
                                    "networkErrors_median",
                                    "networkErrors_min",
                                    "networkErrors_p50",
                                    "networkErrors_p90",
                                    "networkErrors_p95",
                                    "networkErrors_p99",
                                    "networkErrors_stddev",
                                    "networkErrors_sum",
                                    "userScriptErrors_avg",
                                    "userScriptErrors_max",
                                    "userScriptErrors_median",
                                    "userScriptErrors_min",
                                    "userScriptErrors_p50",
                                    "userScriptErrors_p90",
                                    "userScriptErrors_p95",
                                    "userScriptErrors_p99",
                                    "userScriptErrors_stddev",
                                    "userScriptErrors_sum",
                                    "documentErrors_avg",
                                    "documentErrors_max",
                                    "documentErrors_median",
                                    "documentErrors_min",
                                    "documentErrors_p50",
                                    "documentErrors_p90",
                                    "documentErrors_p95",
                                    "documentErrors_p99",
                                    "documentErrors_stddev",
                                    "documentErrors_sum"
                                ]
                            }
                        }
                    },
                    {
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Page number",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 1
                        }
                    }
                ],
                "tags": [
                    "Analytics"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model11"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/analytics/heartbeat-checks/{id}": {
            "get": {
                "summary": "Heartbeat checks",
                "operationId": "getV1AnalyticsHeartbeatchecksId",
                "description": "Fetch detailed availability metrics and aggregated or non-aggregated Heartbeat Check metrics across custom time ranges. <b>Rate-limiting is applied to this endpoint, you can send 600 requests / 60 seconds at most.<b>",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Custom start time of reporting window in unix timestamp format. Setting a custom \"from\" timestamp overrides the use of any \"quickRange\".",
                        "name": "from",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Custom end time of reporting window in unix timestamp format. Setting a custom \"to\" timestamp overrides the use of any \"quickRange\".",
                        "name": "to",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Preset reporting windows are used for quickly generating report on commonly used windows. Can be overridden by using a custom \"to\" and \"from\" timestamp.",
                        "name": "quickRange",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "last24Hours",
                                "last7Days",
                                "last30Days",
                                "thisWeek",
                                "thisMonth",
                                "lastWeek",
                                "lastMonth"
                            ],
                            "default": "last24Hours"
                        }
                    },
                    {
                        "description": "The time interval to use for aggregating metrics in minutes. For example, five minutes is 5, 24 hours is 1440.",
                        "name": "aggregationInterval",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "minimum": 1,
                            "maximum": 43200
                        }
                    },
                    {
                        "description": "Filter based on whether a heartbeat request was late, early, etc.",
                        "x-constraint": {
                            "single": true
                        },
                        "name": "filterByStatus",
                        "in": "query",
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "FAILING",
                                    "EARLY",
                                    "RECEIVED",
                                    "GRACE",
                                    "LATE"
                                ]
                            }
                        }
                    },
                    {
                        "description": "Available metrics for Heartbeat Checks. You can pass multiple metrics as a comma separated string.",
                        "x-constraint": {
                            "single": true
                        },
                        "name": "metrics",
                        "in": "query",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "availability",
                                    "retries"
                                ]
                            },
                            "default": [
                                "availability"
                            ]
                        }
                    },
                    {
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Page number",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 1
                        }
                    }
                ],
                "tags": [
                    "Analytics"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model14"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/analytics/metrics": {
            "get": {
                "summary": "List all available reporting metrics.",
                "operationId": "getV1AnalyticsMetrics",
                "description": "List all available reporting metrics.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "checkType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "API",
                                "BROWSER",
                                "HEARTBEAT",
                                "MULTI_STEP",
                                "TCP",
                                "PLAYWRIGHT",
                                "URL",
                                "DNS"
                            ]
                        }
                    }
                ],
                "tags": [
                    "Analytics"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model15"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/analytics/multistep-checks/{id}": {
            "get": {
                "summary": "Multistep checks",
                "operationId": "getV1AnalyticsMultistepchecksId",
                "description": "Fetch detailed availability metrics and aggregated or non-aggregated Multistep Check metrics across custom time ranges. <b>Rate-limiting is applied to this endpoint, you can send 30 requests / 60 seconds at most.<b>",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Custom start time of reporting window in unix timestamp format. Setting a custom \"from\" timestamp overrides the use of any \"quickRange\".",
                        "name": "from",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Custom end time of reporting window in unix timestamp format. Setting a custom \"to\" timestamp overrides the use of any \"quickRange\".",
                        "name": "to",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Preset reporting windows are used for quickly generating report on commonly used windows. Can be overridden by using a custom \"to\" and \"from\" timestamp.",
                        "name": "quickRange",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "last24Hours",
                                "last7Days",
                                "last30Days",
                                "thisWeek",
                                "thisMonth",
                                "lastWeek",
                                "lastMonth"
                            ],
                            "default": "last24Hours"
                        }
                    },
                    {
                        "description": "The time interval to use for aggregating metrics in minutes. For example, five minutes is 5, 24 hours is 1440.",
                        "name": "aggregationInterval",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "minimum": 1,
                            "maximum": 43200
                        }
                    },
                    {
                        "description": "Filter based on whether a check result was either failing or passing",
                        "x-constraint": {
                            "single": true
                        },
                        "name": "filterByStatus",
                        "in": "query",
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "success",
                                    "failure"
                                ]
                            }
                        }
                    },
                    {
                        "description": "Determines how the series data is grouped. Note that grouped queries are a bit more expensive and might take longer.",
                        "name": "groupBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "runLocation"
                            ]
                        }
                    },
                    {
                        "description": "Available metrics for Multistep Checks. You can pass multiple metrics as a comma separated string.",
                        "x-constraint": {
                            "single": true
                        },
                        "name": "metrics",
                        "in": "query",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "responseTime",
                                    "availability",
                                    "retries",
                                    "responseTime_avg",
                                    "responseTime_max",
                                    "responseTime_median",
                                    "responseTime_min",
                                    "responseTime_p50",
                                    "responseTime_p90",
                                    "responseTime_p95",
                                    "responseTime_p99",
                                    "responseTime_stddev",
                                    "responseTime_sum"
                                ]
                            }
                        }
                    },
                    {
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Page number",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 1
                        }
                    }
                ],
                "tags": [
                    "Analytics"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model18"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/analytics/playwright-checks/{id}": {
            "get": {
                "summary": "Playwright checks",
                "operationId": "getV1AnalyticsPlaywrightchecksId",
                "description": "Fetch detailed availability metrics and aggregated or non-aggregated Playwright Check metrics across custom time ranges. <b>Rate-limiting is applied to this endpoint, you can send 30 requests / 60 seconds at most.<b>",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Custom start time of reporting window in unix timestamp format. Setting a custom \"from\" timestamp overrides the use of any \"quickRange\".",
                        "name": "from",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Custom end time of reporting window in unix timestamp format. Setting a custom \"to\" timestamp overrides the use of any \"quickRange\".",
                        "name": "to",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Preset reporting windows are used for quickly generating report on commonly used windows. Can be overridden by using a custom \"to\" and \"from\" timestamp.",
                        "name": "quickRange",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "last24Hours",
                                "last7Days",
                                "last30Days",
                                "thisWeek",
                                "thisMonth",
                                "lastWeek",
                                "lastMonth"
                            ],
                            "default": "last24Hours"
                        }
                    },
                    {
                        "description": "The time interval to use for aggregating metrics in minutes. For example, five minutes is 5, 24 hours is 1440.",
                        "name": "aggregationInterval",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "minimum": 1,
                            "maximum": 43200
                        }
                    },
                    {
                        "description": "Filter based on whether a check result was either failing or passing",
                        "x-constraint": {
                            "single": true
                        },
                        "name": "filterByStatus",
                        "in": "query",
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "success",
                                    "failure"
                                ]
                            }
                        }
                    },
                    {
                        "description": "Determines how the series data is grouped. Note that grouped queries are a bit more expensive and might take longer.",
                        "name": "groupBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "runLocation"
                            ]
                        }
                    },
                    {
                        "description": "Available metrics for Playwright Checks. You can pass multiple metrics as a comma separated string.",
                        "x-constraint": {
                            "single": true
                        },
                        "name": "metrics",
                        "in": "query",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "responseTime",
                                    "availability",
                                    "retries",
                                    "responseTime_avg",
                                    "responseTime_max",
                                    "responseTime_median",
                                    "responseTime_min",
                                    "responseTime_p50",
                                    "responseTime_p90",
                                    "responseTime_p95",
                                    "responseTime_p99",
                                    "responseTime_stddev",
                                    "responseTime_sum"
                                ]
                            }
                        }
                    },
                    {
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Page number",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 1
                        }
                    }
                ],
                "tags": [
                    "Analytics"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model21"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/analytics/tcp-checks/{id}": {
            "get": {
                "summary": "TCP checks",
                "operationId": "getV1AnalyticsTcpchecksId",
                "description": "Fetch detailed availability metrics and aggregated or non-aggregated TCP Check metrics across custom time ranges. For example, you can get the p99 and p95 of all the check phases of your TCP check together with the availability percentage for any time range.

<b>Rate-limiting is applied to this endpoint, you can send 30 requests / 60 seconds at most.<b>",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Custom start time of reporting window in unix timestamp format. Setting a custom \"from\" timestamp overrides the use of any \"quickRange\".",
                        "name": "from",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Custom end time of reporting window in unix timestamp format. Setting a custom \"to\" timestamp overrides the use of any \"quickRange\".",
                        "name": "to",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Preset reporting windows are used for quickly generating report on commonly used windows. Can be overridden by using a custom \"to\" and \"from\" timestamp.",
                        "name": "quickRange",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "last24Hours",
                                "last7Days",
                                "last30Days",
                                "thisWeek",
                                "thisMonth",
                                "lastWeek",
                                "lastMonth"
                            ],
                            "default": "last24Hours"
                        }
                    },
                    {
                        "description": "The time interval to use for aggregating metrics in minutes. For example, five minutes is 5, 24 hours is 1440.",
                        "name": "aggregationInterval",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "minimum": 1,
                            "maximum": 43200
                        }
                    },
                    {
                        "description": "Filter based on whether a check result was either failing or passing",
                        "x-constraint": {
                            "single": true
                        },
                        "name": "filterByStatus",
                        "in": "query",
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "success",
                                    "failure"
                                ]
                            }
                        }
                    },
                    {
                        "description": "Determines how the series data is grouped. Note that grouped queries are a bit more expensive and might take longer.",
                        "name": "groupBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "runLocation"
                            ]
                        }
                    },
                    {
                        "description": "Available metrics for TCP Checks. You can pass multiple metrics as a comma separated string.",
                        "x-constraint": {
                            "single": true
                        },
                        "name": "metrics",
                        "in": "query",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "total",
                                    "dns",
                                    "connection",
                                    "data",
                                    "availability",
                                    "retries",
                                    "total_avg",
                                    "total_max",
                                    "total_median",
                                    "total_min",
                                    "total_p50",
                                    "total_p90",
                                    "total_p95",
                                    "total_p99",
                                    "total_stddev",
                                    "total_sum",
                                    "dns_avg",
                                    "dns_max",
                                    "dns_median",
                                    "dns_min",
                                    "dns_p50",
                                    "dns_p90",
                                    "dns_p95",
                                    "dns_p99",
                                    "dns_stddev",
                                    "dns_sum",
                                    "connection_avg",
                                    "connection_max",
                                    "connection_median",
                                    "connection_min",
                                    "connection_p50",
                                    "connection_p90",
                                    "connection_p95",
                                    "connection_p99",
                                    "connection_stddev",
                                    "connection_sum",
                                    "data_avg",
                                    "data_max",
                                    "data_median",
                                    "data_min",
                                    "data_p50",
                                    "data_p90",
                                    "data_p95",
                                    "data_p99",
                                    "data_stddev",
                                    "data_sum"
                                ]
                            }
                        }
                    },
                    {
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Page number",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 1
                        }
                    }
                ],
                "tags": [
                    "Analytics"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model24"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/analytics/url-monitors/{id}": {
            "get": {
                "summary": "URL Monitors",
                "operationId": "getV1AnalyticsUrlmonitorsId",
                "description": "Fetch detailed availability metrics and aggregated or non-aggregated API Check metrics across custom time ranges. For example, you can get the p99 and p95 of all the DNS phases of your API check together with the availability percentage for any time range.

<b>Rate-limiting is applied to this endpoint, you can send 30 requests / 60 seconds at most.<b>",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Custom start time of reporting window in unix timestamp format. Setting a custom \"from\" timestamp overrides the use of any \"quickRange\".",
                        "name": "from",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Custom end time of reporting window in unix timestamp format. Setting a custom \"to\" timestamp overrides the use of any \"quickRange\".",
                        "name": "to",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Preset reporting windows are used for quickly generating report on commonly used windows. Can be overridden by using a custom \"to\" and \"from\" timestamp.",
                        "name": "quickRange",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "last24Hours",
                                "last7Days",
                                "last30Days",
                                "thisWeek",
                                "thisMonth",
                                "lastWeek",
                                "lastMonth"
                            ],
                            "default": "last24Hours"
                        }
                    },
                    {
                        "description": "The time interval to use for aggregating metrics in minutes. For example, five minutes is 5, 24 hours is 1440.",
                        "name": "aggregationInterval",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "minimum": 1,
                            "maximum": 43200
                        }
                    },
                    {
                        "description": "Filter based on whether a check result was either failing or passing",
                        "x-constraint": {
                            "single": true
                        },
                        "name": "filterByStatus",
                        "in": "query",
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "success",
                                    "failure"
                                ]
                            }
                        }
                    },
                    {
                        "description": "Determines how the series data is grouped. Note that grouped queries are a bit more expensive and might take longer.",
                        "name": "groupBy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "runLocation",
                                "statusCode"
                            ]
                        }
                    },
                    {
                        "description": "Available metrics for API Checks. You can pass multiple metrics as a comma separated string.",
                        "x-constraint": {
                            "single": true
                        },
                        "name": "metrics",
                        "in": "query",
                        "required": true,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "responseTime",
                                    "wait",
                                    "dns",
                                    "tcp",
                                    "firstByte",
                                    "download",
                                    "availability",
                                    "retries",
                                    "responseTime_avg",
                                    "responseTime_max",
                                    "responseTime_median",
                                    "responseTime_min",
                                    "responseTime_p50",
                                    "responseTime_p90",
                                    "responseTime_p95",
                                    "responseTime_p99",
                                    "responseTime_stddev",
                                    "responseTime_sum",
                                    "wait_avg",
                                    "wait_max",
                                    "wait_median",
                                    "wait_min",
                                    "wait_p50",
                                    "wait_p90",
                                    "wait_p95",
                                    "wait_p99",
                                    "wait_stddev",
                                    "wait_sum",
                                    "dns_avg",
                                    "dns_max",
                                    "dns_median",
                                    "dns_min",
                                    "dns_p50",
                                    "dns_p90",
                                    "dns_p95",
                                    "dns_p99",
                                    "dns_stddev",
                                    "dns_sum",
                                    "tcp_avg",
                                    "tcp_max",
                                    "tcp_median",
                                    "tcp_min",
                                    "tcp_p50",
                                    "tcp_p90",
                                    "tcp_p95",
                                    "tcp_p99",
                                    "tcp_stddev",
                                    "tcp_sum",
                                    "firstByte_avg",
                                    "firstByte_max",
                                    "firstByte_median",
                                    "firstByte_min",
                                    "firstByte_p50",
                                    "firstByte_p90",
                                    "firstByte_p95",
                                    "firstByte_p99",
                                    "firstByte_stddev",
                                    "firstByte_sum",
                                    "download_avg",
                                    "download_max",
                                    "download_median",
                                    "download_min",
                                    "download_p50",
                                    "download_p90",
                                    "download_p95",
                                    "download_p99",
                                    "download_stddev",
                                    "download_sum"
                                ]
                            }
                        }
                    },
                    {
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Page number",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 1
                        }
                    }
                ],
                "tags": [
                    "Analytics"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model26"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/badges/checks/{checkId}": {
            "get": {
                "operationId": "getV1BadgesChecksCheckid",
                "description": "Get check status badge. You can enable the badges feature in [account settings](https://app.checklyhq.com/settings/account/general)",
                "parameters": [
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "checkId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "style",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "flat",
                                "plastic",
                                "flat-square",
                                "for-the-badge",
                                "social"
                            ],
                            "default": "flat"
                        }
                    },
                    {
                        "name": "theme",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "light",
                                "dark",
                                "default"
                            ],
                            "default": "default"
                        }
                    },
                    {
                        "name": "responseTime",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "tags": [
                    "Badges"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "pattern": "(<svg)([^<]*|[^>]*)"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/badges/groups/{groupId}": {
            "get": {
                "operationId": "getV1BadgesGroupsGroupid",
                "description": "Get group status badge. You can enable the badges feature in [account settings](https://app.checklyhq.com/settings/account/general)",
                "parameters": [
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "style",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "flat",
                                "plastic",
                                "flat-square",
                                "for-the-badge",
                                "social"
                            ],
                            "default": "flat"
                        }
                    },
                    {
                        "name": "theme",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "light",
                                "dark",
                                "default"
                            ],
                            "default": "default"
                        }
                    },
                    {
                        "name": "responseTime",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "tags": [
                    "Badges"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "pattern": "(<svg)([^<]*|[^>]*)"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/check-alerts": {
            "get": {
                "summary": "List all alerts for your account",
                "operationId": "getV1Checkalerts",
                "description": "Lists all alerts that have been sent for your account.

Use the `to` and `from` parameters to specify a date range (UNIX timestamp in seconds). This endpoint will return data within a 6-hour timeframe. If the `from` and `to` params are set, they must be at most 6 hours apart. If none are set, we will consider the `to` param to be now and the `from` param to be 6 hours earlier. If only the `to` param is set we will set `from` to be 6 hours earlier. If only the `from` param is set we will consider the `to` param to be 6 hours later.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Page number",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 1
                        }
                    },
                    {
                        "description": "Select records up from this UNIX timestamp (>= date). Defaults to now - 6 hours.",
                        "name": "from",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Optional. Select records up to this UNIX timestamp (< date). Defaults to 6 hours after \"from\".",
                        "name": "to",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    }
                ],
                "tags": [
                    "Check alerts"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckAlertList"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/check-alerts/{checkId}": {
            "get": {
                "summary": "List alerts for a specific check",
                "operationId": "getV1CheckalertsCheckid",
                "description": "Lists all the alerts for a specific check.

Use the `to` and `from` parameters to specify a date range (UNIX timestamp in seconds). This endpoint will return data within a 6-hour timeframe. If the `from` and `to` params are set, they must be at most 6 hours apart. If none are set, we will consider the `to` param to be now and the `from` param to be 6 hours earlier. If only the `to` param is set we will set `from` to be 6 hours earlier. If only the `from` param is set we will consider the `to` param to be 6 hours later.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "checkId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Page number",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 1
                        }
                    },
                    {
                        "description": "Select records up from this UNIX timestamp (>= date). Defaults to now - 6 hours.",
                        "name": "from",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Optional. Select records up to this UNIX timestamp (< date). Defaults to 6 hours after \"from\".",
                        "name": "to",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    }
                ],
                "tags": [
                    "Check alerts"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckAlertList"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/check-groups": {
            "get": {
                "summary": "List all check groups",
                "operationId": "getV1Checkgroups",
                "description": "Lists all current check groups in your account. The \"checks\" property is an array of check UUID's for convenient referencing. It is read only and you cannot use it to add checks to a group.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Page number",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 1
                        }
                    },
                    {
                        "description": "Filters check groups by tags. Returns check groups that have at least one of the specified tags.",
                        "x-constraint": {
                            "single": true
                        },
                        "name": "tag",
                        "in": "query",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "Filters check groups by exact name match. Accepts one or more names and returns groups that match any of the specified names.",
                        "x-constraint": {
                            "single": true
                        },
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "tags": [
                    "Check groups"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckGroupList"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a check group",
                "operationId": "postV1Checkgroups",
                "description": "Creates a new check group. You can add checks to the group by setting the \"groupId\" property of individual checks.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
                        "name": "autoAssignAlerts",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckGroupCreate"
                            }
                        }
                    }
                },
                "tags": [
                    "Check groups"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckGroup"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRequiredError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/v1/check-groups/{groupId}/checks/{checkId}": {
            "get": {
                "summary": "Retrieve one check in a specific group with group settings applied",
                "operationId": "getV1CheckgroupsGroupidChecksCheckid",
                "description": "Show details of one check in a specific check group with the group settings applied.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "checkId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Check groups"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckGroupCheck"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/check-groups/{id}": {
            "delete": {
                "summary": "Delete a check group.",
                "operationId": "deleteV1CheckgroupsId",
                "description": "Permanently removes a check group. You cannot delete a check group if it still contains checks.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "Check groups"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConflictError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Retrieve a check group",
                "operationId": "getV1CheckgroupsId",
                "description": "Show details of a specific check group",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "Check groups"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckGroup"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update a check group",
                "operationId": "putV1CheckgroupsId",
                "description": "Updates a check group.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
                        "name": "autoAssignAlerts",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckGroupUpdate"
                            }
                        }
                    }
                },
                "tags": [
                    "Check groups"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckGroup"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/v1/check-groups/{id}/checks": {
            "get": {
                "summary": "Retrieve all checks in a specific group with group settings applied",
                "operationId": "getV1CheckgroupsIdChecks",
                "description": "Lists all checks in a specific check group with the group settings applied.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Page number",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 1
                        }
                    }
                ],
                "tags": [
                    "Check groups"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model44"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/check-results/{checkId}": {
            "get": {
                "summary": "Lists all check results",
                "operationId": "getV1CheckresultsCheckid",
                "description": "<b>[DEPRECATED] This endpoint will be removed soon. Please use the `GET /v2/check-results/{checkId}` endpoint instead.</b>
Lists the full, raw check results for a specific check. We keep raw results for 30 days. After 30 days they are erased. However, we keep the rolled up results for an indefinite period.

You can filter by check type and result type to narrow down the list. Use the `to` and `from` parameters to specify a date range (UNIX timestamp in seconds). Depending on the check type, some fields might be null.

This endpoint will return data within a 6-hour timeframe. If the `from` and `to` params are set, they must be at most six hours apart. If none are set, we will consider the `to` param to be now and the `from` param to be six hours earlier. If only the `to` param is set we will set `from` to be six hours earlier. On the contrary, if only the `from` param is set we will consider the `to` param to be six hours later.

<b>Rate-limiting is applied to this endpoint, you can send 5 requests / 10 seconds at most.<b>",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "checkId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Page number",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 1
                        }
                    },
                    {
                        "description": "Select records up from this UNIX timestamp (>= date). Defaults to now - 6 hours.",
                        "name": "from",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Optional. Select records up to this UNIX timestamp (< date). Defaults to 6 hours after \"from\".",
                        "name": "to",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Provide a data center location, e.g. \"eu-west-1\" to filter by location",
                        "name": "location",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "us-east-1",
                                "us-east-2",
                                "us-west-1",
                                "us-west-2",
                                "ca-central-1",
                                "sa-east-1",
                                "eu-west-1",
                                "eu-central-1",
                                "eu-west-2",
                                "eu-west-3",
                                "eu-north-1",
                                "eu-south-1",
                                "me-south-1",
                                "ap-southeast-1",
                                "ap-northeast-1",
                                "ap-east-1",
                                "ap-southeast-2",
                                "ap-southeast-3",
                                "ap-northeast-2",
                                "ap-northeast-3",
                                "ap-south-1",
                                "af-south-1"
                            ]
                        }
                    },
                    {
                        "description": "The type of the check",
                        "name": "checkType",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "API",
                                "BROWSER",
                                "HEARTBEAT",
                                "MULTI_STEP",
                                "TCP",
                                "PLAYWRIGHT",
                                "URL",
                                "DNS"
                            ]
                        }
                    },
                    {
                        "description": "Check result has one or more failures",
                        "name": "hasFailures",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The check result type (FINAL,ATTEMPT,ALL)",
                        "name": "resultType",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINAL",
                                "ATTEMPT",
                                "ALL"
                            ],
                            "default": "FINAL"
                        }
                    }
                ],
                "tags": [
                    "Check results"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckResultList"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRequiredError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/v1/check-results/{checkId}/{checkResultId}": {
            "get": {
                "summary": "Retrieve a check result",
                "operationId": "getV1CheckresultsCheckidCheckresultid",
                "description": "Show details of a specific check result.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "checkId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "checkResultId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Check results"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckResult"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/check-sessions/trigger": {
            "post": {
                "summary": "Trigger a new check session",
                "operationId": "postV1ChecksessionsTrigger",
                "description": "Starts a check session for each check that matches the provided target filters. If no filters are given, matches all eligible checks.\n\nThis endpoint does not wait for the check session to complete. Use the `GET /v1/check-sessions/{checkSessionId}/completion` or `GET /v1/check-sessions/{checkSessionId}` endpoints to track progress if needed.\n\nStandard alerting rules apply to finished check runs.\n\nEquivalent to the _Schedule Now_ button in the UI.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TriggerCheckSessionRequestPayload"
                            }
                        }
                    }
                },
                "tags": [
                    "Check sessions",
                    "Triggers"
                ],
                "responses": {
                    "201": {
                        "description": "Returns a check session for each check matching target conditions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TriggerCheckSessionResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRequiredError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returned when there are no matching checks.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoMatchingChecksFoundErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/check-sessions/{checkSessionId}": {
            "get": {
                "summary": "Retrieve a check session",
                "operationId": "getV1ChecksessionsChecksessionid",
                "description": "Retrieves a check session. Results may be incomplete if the check session is still in progress.\n\nOnce a check session has finished, results will include at least one check result for each run location: one result with `resultType` equal to `\"FINAL\"`, and zero or more results with `resultType` equal to `\"ATTEMPT\"` (one for each failed attempt, if any).\n\nEach result contains just enough information to quickly determine whether the check run was successful or not. To dive even deeper into individual results, use the `GET /v1/check-results/{checkId}/{checkResultId}` endpoint to retrieve detailed data about a specific result.",
                "parameters": [
                    {
                        "description": "The unique identifier of the check session.",
                        "x-format": {
                            "guid": true
                        },
                        "name": "checkSessionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Check sessions"
                ],
                "responses": {
                    "200": {
                        "description": "The current state of the check session.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FindOneCheckSessionResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No such check session exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckSessionNotFoundErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/check-sessions/{checkSessionId}/completion": {
            "get": {
                "summary": "Await the completion of a check session",
                "operationId": "getV1ChecksessionsChecksessionidCompletion",
                "description": "Call this endpoint to await the completion of a check session. A successful response will be returned once the check session reaches its final state (i.e. when it passes or fails).\n\nIf the check session takes a long time to complete, the endpoint will return a timeout error code. You should keep calling the endpoint until you receive a successful response, or a non-timeout related error code. If using *curl*, its `--retry` option is suitable.\n\nThe successful response of this endpoint is equivalent to the `GET /v1/check-sessions/{checkSessionId}` endpoint's response for a completed check session.",
                "parameters": [
                    {
                        "description": "The unique identifier of the check session.",
                        "x-format": {
                            "guid": true
                        },
                        "name": "checkSessionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The maximum time to wait for completion, in seconds.",
                        "name": "maxWaitSeconds",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "minimum": 1,
                            "maximum": 30
                        }
                    }
                ],
                "tags": [
                    "Check sessions"
                ],
                "responses": {
                    "200": {
                        "description": "Returned when the check session has finished running.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AwaitCheckSessionCompletionResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No such check session exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckSessionNotFoundErrorResponse"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "The check session is still pending, but the server requests a quick break. You should call the endpoint again. Optionally, try to respect the `Retry-After` header.\n\nThis error code is one of the transient error codes supported by *curl*'s `--retry` option.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AwaitCheckSessionCompletionTryAgainResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/check-statuses": {
            "get": {
                "summary": "List all check statuses",
                "operationId": "getV1Checkstatuses",
                "description": "Shows the current status information for all checks in your account. The check status records are continuously updated as new check results come in.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Check status"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckStatusList"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/check-statuses/{checkId}": {
            "get": {
                "summary": "Retrieve check status details",
                "operationId": "getV1CheckstatusesCheckid",
                "description": "Show the current status information for a specific check.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "checkId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Check status"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckStatus"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/checks": {
            "get": {
                "summary": "List all checks",
                "operationId": "getV1Checks",
                "description": "Lists all current checks in your account.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Page number",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 1
                        }
                    },
                    {
                        "description": "Filters the results by a string contained in the URL of an API check, for instance a domain like \"www.myapp.com\". Only returns API checks.",
                        "name": "apiCheckUrlFilterPattern",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "minLength": 1
                        }
                    },
                    {
                        "description": "Filters checks by tags. Returns checks that have at least one of the specified tags.",
                        "x-constraint": {
                            "single": true
                        },
                        "name": "tag",
                        "in": "query",
                        "required": false,
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "Checks that belong to a group are returned with group settings applied.",
                        "name": "applyGroupSettings",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "tags": [
                    "Checks"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckList"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a check",
                "operationId": "postV1Checks",
                "description": "<b>[DEPRECATED] This endpoint will be removed soon. Instead use `POST /checks/api` or  `POST /checks/browser`.</b> Creates a new API or browser check. Will return a `402` when you are over the limit of your plan.\n    When using the `globalAlertSettings`, the `alertSettings` can be `null`",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
                        "name": "autoAssignAlerts",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckCreate"
                            }
                        }
                    }
                },
                "tags": [
                    "Checks"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Check"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRequiredError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/v1/checks/api": {
            "post": {
                "summary": "Create an API check",
                "operationId": "postV1ChecksApi",
                "description": "Creates a new API check. Will return a `402` when you are over the limit of your plan.\n    When using the `globalAlertSetting`, the `alertSetting` can be `null`",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
                        "name": "autoAssignAlerts",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckAPICreate"
                            }
                        }
                    }
                },
                "tags": [
                    "Checks"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckAPI"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRequiredError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/checks/api/{id}": {
            "put": {
                "summary": "Update an API check",
                "operationId": "putV1ChecksApiId",
                "description": "Updates an API check.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
                        "name": "autoAssignAlerts",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckAPIUpdate"
                            }
                        }
                    }
                },
                "tags": [
                    "Checks"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckAPI"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/checks/browser": {
            "post": {
                "summary": "Create a browser check",
                "operationId": "postV1ChecksBrowser",
                "description": "Creates a new browser check. Will return a `402` when you are over the limit of your plan.\n    When using the `globalAlertSetting`, the `alertSetting` can be `null`",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
                        "name": "autoAssignAlerts",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckBrowserCreate"
                            }
                        }
                    }
                },
                "tags": [
                    "Checks"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckBrowser"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRequiredError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/checks/browser/{id}": {
            "put": {
                "summary": "Update a browser check",
                "operationId": "putV1ChecksBrowserId",
                "description": "Updates a browser check.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
                        "name": "autoAssignAlerts",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckBrowserUpdate"
                            }
                        }
                    }
                },
                "tags": [
                    "Checks"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckBrowser"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/checks/heartbeat": {
            "post": {
                "summary": "Create a heartbeat check",
                "operationId": "postV1ChecksHeartbeat",
                "description": "Creates a new Heartbeat check. Will return a `402` when you are over the limit of your plan.\n    When using the `globalAlertSetting`, the `alertSetting` can be `null`",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
                        "name": "autoAssignAlerts",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckHeartbeatCreate"
                            }
                        }
                    }
                },
                "tags": [
                    "Heartbeats"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckHeartbeat"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRequiredError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/checks/heartbeat/{id}": {
            "put": {
                "summary": "Update a heartbeat check",
                "operationId": "putV1ChecksHeartbeatId",
                "description": "Updates a Heartbeat check.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
                        "name": "autoAssignAlerts",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckHeartbeatUpdate"
                            }
                        }
                    }
                },
                "tags": [
                    "Heartbeats"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckHeartbeat"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/checks/heartbeats/{checkId}/availability": {
            "get": {
                "summary": "Get heartbeat availability",
                "operationId": "getV1ChecksHeartbeatsCheckidAvailability",
                "description": "Get heartbeat availability.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "checkId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "startTime",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "default": "2025-10-13T10:55:35.647Z"
                        }
                    },
                    {
                        "name": "endTime",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "default": "2025-10-14T10:55:35.647Z"
                        }
                    }
                ],
                "tags": [
                    "Heartbeats"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model122"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/checks/heartbeats/{checkId}/events": {
            "get": {
                "summary": "Get a list of events for a heartbeat",
                "operationId": "getV1ChecksHeartbeatsCheckidEvents",
                "description": "Get all events from a heartbeat.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "checkId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "startTime",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "default": "2025-10-13T10:55:35.650Z"
                        }
                    },
                    {
                        "name": "endTime",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "default": "2025-10-14T10:55:35.650Z"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "maximum": 10,
                            "default": 10
                        }
                    }
                ],
                "tags": [
                    "Heartbeats"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model125"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/checks/heartbeats/{checkId}/events/{id}": {
            "get": {
                "summary": "Get a specific Heartbeat event",
                "operationId": "getV1ChecksHeartbeatsCheckidEventsId",
                "description": "Get a specific event by its id.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "checkId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Heartbeats"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model126"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/checks/multistep": {
            "post": {
                "summary": "Create a multi-step check",
                "operationId": "postV1ChecksMultistep",
                "description": "Creates a new Multi-Step check. Will return a `402` when you are over the limit of your plan.\n    When using the `globalAlertSetting`, the `alertSetting` can be `null`",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
                        "name": "autoAssignAlerts",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckMultiStepCreate"
                            }
                        }
                    }
                },
                "tags": [
                    "Checks"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckMultiStep"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRequiredError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/checks/multistep/{id}": {
            "put": {
                "summary": "Update a multi-step check",
                "operationId": "putV1ChecksMultistepId",
                "description": "Updates a Multi-Step check.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
                        "name": "autoAssignAlerts",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckMultiStepUpdate"
                            }
                        }
                    }
                },
                "tags": [
                    "Checks"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckMultiStep"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/checks/tcp": {
            "post": {
                "summary": "Create a TCP check",
                "operationId": "postV1ChecksTcp",
                "description": "Creates a new TCP check. Will return a `402` when you are over the limit of your plan.\n    When using the `globalAlertSetting`, the `alertSetting` can be `null`",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
                        "name": "autoAssignAlerts",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckTCPCreate"
                            }
                        }
                    }
                },
                "tags": [
                    "Checks"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckTCP"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRequiredError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/checks/tcp/{id}": {
            "put": {
                "summary": "Update an TCP check",
                "operationId": "putV1ChecksTcpId",
                "description": "Updates an TCP check.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
                        "name": "autoAssignAlerts",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckTCPUpdate"
                            }
                        }
                    }
                },
                "tags": [
                    "Checks"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckTCP"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/checks/url": {
            "post": {
                "summary": "Create a URL monitor",
                "operationId": "postV1ChecksUrl",
                "description": "Creates a new URL monitor. Will return a `402` when you are over the limit of your plan.\n    When using the `globalAlertSetting`, the `alertSetting` can be `null`",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
                        "name": "autoAssignAlerts",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckURLCreate"
                            }
                        }
                    }
                },
                "tags": [
                    "Monitors"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckURL"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRequiredError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/checks/url/{id}": {
            "put": {
                "summary": "Update an URL Monitor",
                "operationId": "putV1ChecksUrlId",
                "description": "Updates an URL monitor.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
                        "name": "autoAssignAlerts",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckURLUpdate"
                            }
                        }
                    }
                },
                "tags": [
                    "Monitors"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckURL"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/checks/{id}": {
            "delete": {
                "summary": "Delete a check",
                "operationId": "deleteV1ChecksId",
                "description": "Permanently removes a API or browser check and all its related status and results data.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Checks"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Retrieve a check",
                "operationId": "getV1ChecksId",
                "description": "Show details of a specific API or browser check",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Include check dependencies in the response",
                        "name": "includeDependencies",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Checks that belong to a group are returned with group settings applied.",
                        "name": "applyGroupSettings",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "tags": [
                    "Checks"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Check"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update a check",
                "operationId": "putV1ChecksId",
                "description": "<b>[DEPRECATED] This endpoint will be removed soon. Instead use `PUT /checks/api/{id}` or  `PUT /checks/browser/{id}`.</b> Updates a new API or browser check.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
                        "name": "autoAssignAlerts",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckUpdate"
                            }
                        }
                    }
                },
                "tags": [
                    "Checks"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Check"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/v1/client-certificates": {
            "get": {
                "summary": "Lists all client certificates.",
                "operationId": "getV1Clientcertificates",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Client certificates"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClientCertificateList"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new client certificate.",
                "operationId": "postV1Clientcertificates",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClientCertificateCreate"
                            }
                        }
                    }
                },
                "tags": [
                    "Client certificates"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClientCertificateRetrieve"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/client-certificates/{id}": {
            "delete": {
                "summary": "Deletes a client certificate.",
                "operationId": "deleteV1ClientcertificatesId",
                "description": "Permanently removes a client certificate.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Client certificates"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Shows one client certificate.",
                "operationId": "getV1ClientcertificatesId",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Client certificates"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClientCertificateRetrieve"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/dashboards": {
            "get": {
                "summary": "List all dashboards",
                "operationId": "getV1Dashboards",
                "description": "Lists all current dashboards in your account.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Page number",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 1
                        }
                    }
                ],
                "tags": [
                    "Dashboards"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DashboardsList"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a dashboard",
                "operationId": "postV1Dashboards",
                "description": "Creates a new dashboard. Will return a 409 when attempting to create a dashboard with a custom URL or custom domain that is already taken.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DashboardCreate"
                            }
                        }
                    }
                },
                "tags": [
                    "Dashboards"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dashboard"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConflictError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/dashboards/{dashboardId}": {
            "delete": {
                "summary": "Delete a dashboard",
                "operationId": "deleteV1DashboardsDashboardid",
                "description": "Permanently removes a dashboard.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Dashboards"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Retrieve a dashboard",
                "operationId": "getV1DashboardsDashboardid",
                "description": "Show details of a specific dashboard.

<b>Rate-limiting is applied to this endpoint, you can send 10 requests / 20 seconds at most.<b>",
                "parameters": [
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "customUrl",
                                "customDomain"
                            ]
                        }
                    }
                ],
                "tags": [
                    "Dashboards"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dashboard"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update a dashboard",
                "operationId": "putV1DashboardsDashboardid",
                "description": "Updates a dashboard. Will return a 409 when attempting to create a dashboard with a custom URL or custom domain that is already taken.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Model207"
                            }
                        }
                    }
                },
                "tags": [
                    "Dashboards"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dashboard"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConflictError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/error-groups/checks/{checkId}": {
            "get": {
                "summary": "List all error groups for a specific check.",
                "operationId": "getV1ErrorgroupsChecksCheckid",
                "description": "List all error groups for a specific check.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Error Groups"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorGroupsList"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/error-groups/{id}": {
            "get": {
                "summary": "Retrieve one error group.",
                "operationId": "getV1ErrorgroupsId",
                "description": "Retrieve one error group.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Error Groups"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorGroup"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Update an error group. Mainly used for archiving error groups.",
                "operationId": "patchV1ErrorgroupsId",
                "description": "Update an error group. Mainly used for archiving error groups.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ErrorGroupPatch"
                            }
                        }
                    }
                },
                "tags": [
                    "Error Groups"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorGroup"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/incidents": {
            "post": {
                "summary": "Create an incident",
                "operationId": "postV1Incidents",
                "description": "Creates a new incident.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Model211"
                            }
                        }
                    }
                },
                "tags": [
                    "Incidents"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model215"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/incidents/{id}": {
            "delete": {
                "summary": "Delete an incident",
                "operationId": "deleteV1IncidentsId",
                "description": "Permanently removes an incident and all its updates.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Incidents"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Retrieve an incident",
                "operationId": "getV1IncidentsId",
                "description": "Shows details of a specific incident. Uses the \"includeAllIncidentUpdates\" query parameter to obtain all updates.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "You use it to include all the incident updates.",
                        "name": "includeAllIncidentUpdates",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "tags": [
                    "Incidents"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model215"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update an incident",
                "operationId": "putV1IncidentsId",
                "description": "Updates an incident.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "probe",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Model216"
                            }
                        }
                    }
                },
                "tags": [
                    "Incidents"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model217"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/incidents/{incidentId}/updates": {
            "post": {
                "summary": "Create an incident update",
                "operationId": "postV1IncidentsIncidentidUpdates",
                "description": "Creates a new update for an incident.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "incidentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Model210"
                            }
                        }
                    }
                },
                "tags": [
                    "Incident Updates"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IncidentResults"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/incidents/{incidentId}/updates/{id}": {
            "delete": {
                "summary": "Delete an incident update",
                "operationId": "deleteV1IncidentsIncidentidUpdatesId",
                "description": "Permanently removes an incident update.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "incidentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Incident Updates"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update an incident update",
                "operationId": "putV1IncidentsIncidentidUpdatesId",
                "description": "Modifies an incident update.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "incidentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Model218"
                            }
                        }
                    }
                },
                "tags": [
                    "Incident Updates"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model213"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/locations": {
            "get": {
                "summary": "Lists all supported locations",
                "operationId": "getV1Locations",
                "description": "Lists all supported locationss.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Location"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LocationList"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/maintenance-windows": {
            "get": {
                "summary": "List all maintenance windows",
                "operationId": "getV1Maintenancewindows",
                "description": "Lists all maintenance windows in your account.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Page number",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 1
                        }
                    },
                    {
                        "x-alternatives": [
                            {
                                "type": "object",
                                "required": [
                                    "gt"
                                ],
                                "x-properties": {
                                    "gt": {
                                        "type": "string",
                                        "format": "date"
                                    }
                                }
                            },
                            {
                                "type": "object",
                                "required": [
                                    "gte"
                                ],
                                "x-properties": {
                                    "gte": {
                                        "type": "string",
                                        "format": "date"
                                    }
                                }
                            },
                            {
                                "type": "object",
                                "required": [
                                    "lt"
                                ],
                                "x-properties": {
                                    "lt": {
                                        "type": "string",
                                        "format": "date"
                                    }
                                }
                            },
                            {
                                "type": "object",
                                "required": [
                                    "lte"
                                ],
                                "x-properties": {
                                    "lte": {
                                        "type": "string",
                                        "format": "date"
                                    }
                                }
                            }
                        ],
                        "name": "startsAt",
                        "in": "query",
                        "required": false,
                        "x-type": "object",
                        "x-properties": {
                            "gt": {
                                "type": "string",
                                "format": "date"
                            }
                        },
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-alternatives": [
                            {
                                "type": "object",
                                "required": [
                                    "gt"
                                ],
                                "x-properties": {
                                    "gt": {
                                        "type": "string",
                                        "format": "date"
                                    }
                                }
                            },
                            {
                                "type": "object",
                                "required": [
                                    "gte"
                                ],
                                "x-properties": {
                                    "gte": {
                                        "type": "string",
                                        "format": "date"
                                    }
                                }
                            },
                            {
                                "type": "object",
                                "required": [
                                    "lt"
                                ],
                                "x-properties": {
                                    "lt": {
                                        "type": "string",
                                        "format": "date"
                                    }
                                }
                            },
                            {
                                "type": "object",
                                "required": [
                                    "lte"
                                ],
                                "x-properties": {
                                    "lte": {
                                        "type": "string",
                                        "format": "date"
                                    }
                                }
                            }
                        ],
                        "name": "endsAt",
                        "in": "query",
                        "required": false,
                        "x-type": "object",
                        "x-properties": {
                            "gt": {
                                "type": "string",
                                "format": "date"
                            }
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Maintenance windows"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MaintenanceWindowList"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a maintenance window",
                "operationId": "postV1Maintenancewindows",
                "description": "Creates a new maintenance window.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/MaintenanceWindowCreate"
                },
                "tags": [
                    "Maintenance windows"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MaintenanceWindow"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/maintenance-windows/{id}": {
            "delete": {
                "summary": "Delete a maintenance window",
                "operationId": "deleteV1MaintenancewindowsId",
                "description": "Permanently removes a maintenance window.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "Maintenance windows"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Retrieve a maintenance window",
                "operationId": "getV1MaintenancewindowsId",
                "description": "Show details of a specific maintenance window.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "Maintenance windows"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MaintenanceWindow"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update a maintenance window",
                "operationId": "putV1MaintenancewindowsId",
                "description": "Updates a maintenance window.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/MaintenanceWindowCreate"
                },
                "tags": [
                    "Maintenance windows"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MaintenanceWindow"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/private-locations": {
            "get": {
                "summary": "List all private locations",
                "operationId": "getV1Privatelocations",
                "description": "Lists all private locations in your account.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Private locations"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/privateLocationsListSchema"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a private location",
                "operationId": "postV1Privatelocations",
                "description": "Creates a new private location.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/privateLocationCreate"
                            }
                        }
                    }
                },
                "tags": [
                    "Private locations"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/commonPrivateLocationSchemaResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRequiredError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/private-locations/{id}": {
            "delete": {
                "summary": "Remove a private location",
                "operationId": "deleteV1PrivatelocationsId",
                "description": "Permanently removes a private location.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Private locations"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Retrieve a private location",
                "operationId": "getV1PrivatelocationsId",
                "description": "Show details of a specific private location.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Private locations"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/privateLocationsSchema"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update a private location",
                "operationId": "putV1PrivatelocationsId",
                "description": "Updates a private location.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/privateLocationUpdate"
                            }
                        }
                    }
                },
                "tags": [
                    "Private locations"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/commonPrivateLocationSchemaResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/private-locations/{id}/keys": {
            "post": {
                "summary": "Generate a new API Key for a private location",
                "operationId": "postV1PrivatelocationsIdKeys",
                "description": "Creates an api key on the private location.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Private locations"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/privateLocationKeys"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRequiredError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/private-locations/{id}/keys/{keyId}": {
            "delete": {
                "summary": "Remove an existing API key for a private location",
                "operationId": "deleteV1PrivatelocationsIdKeysKeyid",
                "description": "Permanently removes an api key from a private location.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "keyId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Private locations"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/private-locations/{id}/metrics": {
            "get": {
                "summary": "Get private location health metrics from a window of time.",
                "operationId": "getV1PrivatelocationsIdMetrics",
                "description": "Get private location health metrics from a window of time.

<b>Rate-limiting is applied to this endpoint, you can send 300 requests per day at most.<b>",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Select metrics beginning with this UNIX timestamp. Must be less than 15 days ago.",
                        "name": "from",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Select metrics up to this UNIX timestamp.",
                        "name": "to",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    }
                ],
                "tags": [
                    "Private locations"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/privateLocationsMetricsHistoryResponseSchema"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/reporting": {
            "get": {
                "summary": "Generates a report with aggregate statistics for checks and check groups.",
                "operationId": "getV1Reporting",
                "description": "Generates a report with aggregated statistics for all checks or a filtered set of checks over a specified time window.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Custom start time of reporting window in unix timestamp format. Setting a custom \"from\" timestamp overrides the use of any \"quickRange\".",
                        "name": "from",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Custom end time of reporting window in unix timestamp format. Setting a custom \"to\" timestamp overrides the use of any \"quickRange\".",
                        "name": "to",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Preset reporting windows are used for quickly generating report on commonly used windows. Can be overridden by using a custom \"to\" and \"from\" timestamp.",
                        "name": "quickRange",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "last24Hrs",
                                "last7Days",
                                "last30Days",
                                "thisWeek",
                                "thisMonth",
                                "lastWeek",
                                "lastMonth"
                            ],
                            "default": "last24Hrs"
                        }
                    },
                    {
                        "description": "Use tags to filter the checks you want to see in your report.",
                        "x-constraint": {
                            "single": true
                        },
                        "name": "filterByTags",
                        "in": "query",
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "Filter checks by activated status. When set to true, only deactivated checks are returned. When set to false, only activated checks are returned. When omitted, all checks are returned.",
                        "name": "deactivated",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": null
                        }
                    }
                ],
                "tags": [
                    "Reporting"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReportingList"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/runtimes": {
            "get": {
                "summary": "Lists all supported runtimes",
                "operationId": "getV1Runtimes",
                "description": "Lists all supported runtimes and the included NPM packages for Browser checks and setup & teardown scripts for API checks.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Runtimes"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RuntimeList"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/runtimes/{id}": {
            "get": {
                "summary": "Shows details for one specific runtime",
                "operationId": "getV1RuntimesId",
                "description": "Shows the details of all included NPM packages and their version for one specific runtime",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Runtimes"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Runtime"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/snippets": {
            "get": {
                "summary": "List all snippets",
                "operationId": "getV1Snippets",
                "description": "Lists all current snippets in your account.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Page number",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 1
                        }
                    }
                ],
                "tags": [
                    "Snippets"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SnippetList"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a snippet",
                "operationId": "postV1Snippets",
                "description": "Creates a new snippet.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/SnippetCreate"
                },
                "tags": [
                    "Snippets"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Snippet"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/snippets/{id}": {
            "delete": {
                "summary": "Delete a snippet",
                "operationId": "deleteV1SnippetsId",
                "description": "Permanently removes a snippet.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "Snippets"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Retrieve a snippet",
                "operationId": "getV1SnippetsId",
                "description": "Show details of a specific snippet.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "Snippets"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Snippet"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update a snippet",
                "operationId": "putV1SnippetsId",
                "description": "Updates a snippet.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/SnippetCreate"
                },
                "tags": [
                    "Snippets"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Snippet"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/static-ips": {
            "get": {
                "summary": "Lists all source IPs for check runs",
                "operationId": "getV1Staticips",
                "description": "Lists all source IPs for check runs as a single JSON array.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Static IPs"
                ],
                "responses": {
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/static-ips-by-region": {
            "get": {
                "summary": "Lists all source IPs for check runs",
                "operationId": "getV1Staticipsbyregion",
                "description": "Lists all source IPs for check runs as object with regions as keys and an array of IPs as value.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Static IPs"
                ],
                "responses": {
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/static-ips.txt": {
            "get": {
                "summary": "Lists all source IPs for check runs as txt file",
                "operationId": "getV1Staticipstxt",
                "description": "Lists all IPs for check runs as a TXT file. Each line has one IP.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Static IPs"
                ],
                "responses": {
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/static-ipv6s": {
            "get": {
                "summary": "Lists all source IPv6s for check runs",
                "operationId": "getV1Staticipv6s",
                "description": "Lists all source IPv6s for check runs as a single JSON array.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Static IPs"
                ],
                "responses": {
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/static-ipv6s-by-region": {
            "get": {
                "summary": "Lists all source IPv6s for check runs",
                "operationId": "getV1Staticipv6sbyregion",
                "description": "Lists all source IPs for check runs as an object with regions as keys and an Ipv6 as value.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Static IPs"
                ],
                "responses": {
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/static-ipv6s.txt": {
            "get": {
                "summary": "Lists all source IPv6s for check runs as a txt file",
                "operationId": "getV1Staticipv6stxt",
                "description": "Lists all IPv6s for check runs as a TXT file. Each line has one IP.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Static IPs"
                ],
                "responses": {
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/status-pages": {
            "get": {
                "summary": "Retrieve all status pages.",
                "operationId": "getV1Statuspages",
                "description": "Get all status pages for an account.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 20
                        }
                    },
                    {
                        "name": "nextId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Status Pages"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model230"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new status page.",
                "operationId": "postV1Statuspages",
                "description": "Create a new status page with its related services and cards.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Model235"
                },
                "tags": [
                    "Status Pages"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model236"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/status-pages/incidents": {
            "get": {
                "summary": "Retrieve the latest incidents with pagination.",
                "operationId": "getV1StatuspagesIncidents",
                "description": "Get the latest 100 incidents for all services.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 20
                        }
                    },
                    {
                        "name": "nextId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Status Page Incidents"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model241"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new incident.",
                "operationId": "postV1StatuspagesIncidents",
                "description": "Creates a new incident.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Model248"
                            }
                        }
                    }
                },
                "tags": [
                    "Status Page Incidents"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model239"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/status-pages/incidents/{incidentId}": {
            "delete": {
                "summary": "Delete an incident.",
                "operationId": "deleteV1StatuspagesIncidentsIncidentid",
                "description": "Permanently removes an incident and all its updates.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "incidentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Status Page Incidents"
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Retrieve an incident by id.",
                "operationId": "getV1StatuspagesIncidentsIncidentid",
                "description": "Get incident details including incident history and affected services.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "incidentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Status Page Incidents"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model239"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update an existing incident.",
                "operationId": "putV1StatuspagesIncidentsIncidentid",
                "description": "Updates an incident.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "incidentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Model251"
                            }
                        }
                    }
                },
                "tags": [
                    "Status Page Incidents"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model239"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/status-pages/incidents/{incidentId}/incident-updates": {
            "get": {
                "summary": "Retrieve the 100 latest incident updates of a specific incident.",
                "operationId": "getV1StatuspagesIncidentsIncidentidIncidentupdates",
                "description": "Lists all updates for a specific incident.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "incidentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Status Page Incidents"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model252"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Add a new incident update to a specific incident.",
                "operationId": "postV1StatuspagesIncidentsIncidentidIncidentupdates",
                "description": "Creates a new update for an incident.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "incidentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Model246"
                },
                "tags": [
                    "Status Page Incidents"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model246"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/status-pages/incidents/{incidentId}/incident-updates/{incidentUpdateId}": {
            "delete": {
                "summary": "Delete an incident update.",
                "operationId": "deleteV1StatuspagesIncidentsIncidentidIncidentupdatesIncidentupdateid",
                "description": "Permanently removes an incident update.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "incidentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "incidentUpdateId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Status Page Incidents"
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Retrieve an incident update by id.",
                "operationId": "getV1StatuspagesIncidentsIncidentidIncidentupdatesIncidentupdateid",
                "description": "Shows details of a specific incident update.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "incidentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "incidentUpdateId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Status Page Incidents"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model246"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update an existing incident update.",
                "operationId": "putV1StatuspagesIncidentsIncidentidIncidentupdatesIncidentupdateid",
                "description": "Modifies an incident update.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "incidentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "incidentUpdateId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Model246"
                },
                "tags": [
                    "Status Page Incidents"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model246"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/status-pages/services": {
            "get": {
                "summary": "Get all services",
                "operationId": "getV1StatuspagesServices",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 20
                        }
                    },
                    {
                        "name": "nextId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "paginated",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "tags": [
                    "Status Page Services"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model254"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a service",
                "operationId": "postV1StatuspagesServices",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Model255"
                },
                "tags": [
                    "Status Page Services"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model222"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/status-pages/services/{serviceId}": {
            "delete": {
                "summary": "Delete a service",
                "operationId": "deleteV1StatuspagesServicesServiceid",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "serviceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Status Page Services"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Get a single service",
                "operationId": "getV1StatuspagesServicesServiceid",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "serviceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Status Page Services"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model222"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update a service",
                "operationId": "putV1StatuspagesServicesServiceid",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "serviceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Model255"
                },
                "tags": [
                    "Status Page Services"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model222"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/status-pages/{statusPageId}": {
            "delete": {
                "summary": "Delete a status page.",
                "operationId": "deleteV1StatuspagesStatuspageid",
                "description": "Delete a status page.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "statusPageId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Status Pages"
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Retrieve a single status page by id.",
                "operationId": "getV1StatuspagesStatuspageid",
                "description": "Get status page data, including cards and services.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "statusPageId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Status Pages"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model236"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update an existing status page.",
                "operationId": "putV1StatuspagesStatuspageid",
                "description": "Update a status page with its related services and cards.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "statusPageId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Model235"
                },
                "tags": [
                    "Status Pages"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model236"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/status-pages/{statusPageId}/subscriptions": {
            "get": {
                "summary": "Get all subscriptions for a specific status page",
                "operationId": "getV1StatuspagesStatuspageidSubscriptions",
                "description": "Get all subscriptions for a specific status page",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "statusPageId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Status Pages",
                    "Subscriptions"
                ],
                "responses": {
                    "200": {
                        "description": "The list of subscriptions for the status page.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubscriptionsList"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/status-pages/{statusPageId}/subscriptions/{subscriptionId}": {
            "delete": {
                "summary": "Delete a subscription belonging to a specific status page",
                "operationId": "deleteV1StatuspagesStatuspageidSubscriptionsSubscriptionid",
                "description": "Delete a subscription belonging to a specific status page using the subscription id",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "statusPageId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "subscriptionId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Status Pages",
                    "Subscriptions"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/triggers/check-groups/{groupId}": {
            "delete": {
                "summary": "Delete the check group trigger",
                "operationId": "deleteV1TriggersCheckgroupsGroupid",
                "description": "**[DEPRECATED]** This endpoint will be removed soon. Please use the [Checkly CLI](https://www.checklyhq.com/docs/cli) to test and trigger checks. Deletes the check groups trigger",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "Triggers"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "get": {
                "summary": "Get the check group trigger",
                "operationId": "getV1TriggersCheckgroupsGroupid",
                "description": "**[DEPRECATED]** This endpoint will be removed soon. Please use the [Checkly CLI](https://www.checklyhq.com/docs/cli) to test and trigger checks. Finds the check group trigger",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "Triggers"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckGroupTrigger"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "post": {
                "summary": "Create the check group trigger",
                "operationId": "postV1TriggersCheckgroupsGroupid",
                "description": "**[DEPRECATED]** This endpoint will be removed soon. Please use the [Checkly CLI](https://www.checklyhq.com/docs/cli) to test and trigger checks. Creates the check group trigger",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "groupId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "Triggers"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckGroupTrigger"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/v1/triggers/checks/{checkId}": {
            "delete": {
                "summary": "Delete the check trigger",
                "operationId": "deleteV1TriggersChecksCheckid",
                "description": "**[DEPRECATED]** This endpoint will be removed soon. Please use the [Checkly CLI](https://www.checklyhq.com/docs/cli) to test and trigger checks. Deletes the check trigger",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "checkId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Triggers"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "get": {
                "summary": "Get the check trigger",
                "operationId": "getV1TriggersChecksCheckid",
                "description": "**[DEPRECATED]** This endpoint will be removed soon. Please use the [Checkly CLI](https://www.checklyhq.com/docs/cli) to test and trigger checks. Finds the check trigger.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "checkId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Triggers"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckTrigger"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "post": {
                "summary": "Create the check trigger",
                "operationId": "postV1TriggersChecksCheckid",
                "description": "**[DEPRECATED]** This endpoint will be removed soon. Please use the [Checkly CLI](https://www.checklyhq.com/docs/cli) to test and trigger checks. Creates the check trigger",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "checkId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Triggers"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckTrigger"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/v1/variables": {
            "get": {
                "summary": "List all environment variables",
                "operationId": "getV1Variables",
                "description": "Lists all current environment variables in your account.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Page number",
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "default": 1
                        }
                    }
                ],
                "tags": [
                    "Environment variables"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model258"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create an environment variable",
                "operationId": "postV1Variables",
                "description": "Creates a new environment variable.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentVariable"
                            }
                        }
                    }
                },
                "tags": [
                    "Environment variables"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentVariable"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/variables/{key}": {
            "delete": {
                "summary": "Delete an environment variable",
                "operationId": "deleteV1VariablesKey",
                "description": "Permanently removes an environment variable. Uses the \"key\" field as the ID for deletion.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Environment variables"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Retrieve an environment variable",
                "operationId": "getV1VariablesKey",
                "description": "Show details of a specific environment variable. Uses the \"key\" field for selection.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "Environment variables"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentVariableGet"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update an environment variable",
                "operationId": "putV1VariablesKey",
                "description": "Updates an environment variable. Uses the \"key\" field as the ID for updating. Only updates value, locked, and secret properties. Once a value is set to secret, it cannot be unset.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentVariableUpdate"
                            }
                        }
                    }
                },
                "tags": [
                    "Environment variables"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentVariable"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/check-groups": {
            "post": {
                "summary": "Create a check group (V2)",
                "operationId": "postV2Checkgroups",
                "description": "Creates a new check group. You can add checks to the group by setting the \"groupId\" property of individual checks.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
                        "name": "autoAssignAlerts",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/CheckGroupCreateOrUpdateV2"
                },
                "tags": [
                    "Check groups"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckGroup"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRequiredError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/check-groups/{id}": {
            "put": {
                "summary": "Update a check group (V2)",
                "operationId": "putV2CheckgroupsId",
                "description": "Updates a check group.",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-constraint": {
                            "sign": "positive"
                        },
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
                        "name": "autoAssignAlerts",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/CheckGroupCreateOrUpdateV2"
                },
                "tags": [
                    "Check groups"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckGroup"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/check-results/{checkId}": {
            "get": {
                "summary": "Lists all check results",
                "operationId": "getV2CheckresultsCheckid",
                "description": "Lists the full, raw check results for a specific check. We keep raw results for 30 days. After 30 days they are erased. However, we keep the rolled up results for an indefinite period.

You can filter by check type and result type to narrow down the list. Use the `to` and `from` parameters to specify a date range (UNIX timestamp in seconds). Depending on the check type, some fields might be null.

<b>Rate-limiting is applied to this endpoint, you can send 5 requests / 10 seconds at most.<b>",
                "parameters": [
                    {
                        "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
                        "x-format": {
                            "guid": true
                        },
                        "name": "x-checkly-account",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-format": {
                            "guid": true
                        },
                        "name": "checkId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Limit the number of results to fetch (default 10)",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "description": "Cursor parameter to fetch the next page of results. The \"nextId\" parameter is returned in the response of the previous request. If a response includes a \"nextId\" parameter set to \"null\", there are no more results to fetch.",
                        "name": "nextId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Select records up from this UNIX timestamp (>= date).",
                        "name": "from",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Optional. Select records up to this UNIX timestamp (< date).",
                        "name": "to",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Provide a data center location, e.g. \"eu-west-1\" to filter by location",
                        "name": "location",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "us-east-1",
                                "us-east-2",
                                "us-west-1",
                                "us-west-2",
                                "ca-central-1",
                                "sa-east-1",
                                "eu-west-1",
                                "eu-central-1",
                                "eu-west-2",
                                "eu-west-3",
                                "eu-north-1",
                                "eu-south-1",
                                "me-south-1",
                                "ap-southeast-1",
                                "ap-northeast-1",
                                "ap-east-1",
                                "ap-southeast-2",
                                "ap-southeast-3",
                                "ap-northeast-2",
                                "ap-northeast-3",
                                "ap-south-1",
                                "af-south-1"
                            ]
                        }
                    },
                    {
                        "description": "The type of the check",
                        "name": "checkType",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "API",
                                "BROWSER",
                                "HEARTBEAT",
                                "MULTI_STEP",
                                "TCP",
                                "PLAYWRIGHT",
                                "URL",
                                "DNS"
                            ]
                        }
                    },
                    {
                        "description": "Check result has one or more failures",
                        "name": "hasFailures",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The check result type (FINAL,ATTEMPT,ALL)",
                        "name": "resultType",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINAL",
                                "ATTEMPT",
                                "ALL"
                            ],
                            "default": "FINAL"
                        }
                    }
                ],
                "tags": [
                    "Check results"
                ],
                "responses": {
                    "200": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckResultListV2"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedError"
                                }
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRequiredError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "x-alt-definitions": {
        "type": {
            "type": "string",
            "description": "Determines which type of retry strategy to use.",
            "enum": [
                "FIXED",
                "LINEAR",
                "EXPONENTIAL",
                "SINGLE_RETRY"
            ]
        },
        "Model1": {
            "type": "string",
            "description": "The HTTP request could not be completed due to a network error: no response status code was received",
            "enum": [
                "NETWORK_ERROR"
            ]
        },
        "onlyOn": {
            "type": "array",
            "x-constraint": {
                "length": 1,
                "unique": true,
                "single": true
            },
            "items": {
                "$ref": "#/x-alt-definitions/Model1"
            }
        },
        "RetryStrategy": {
            "type": "object",
            "description": "The strategy to determine how failed checks are retried.",
            "properties": {
                "type": {
                    "$ref": "#/x-alt-definitions/type"
                },
                "baseBackoffSeconds": {
                    "type": "number",
                    "description": "The number of seconds to wait before the first retry attempt.",
                    "default": 60
                },
                "sameRegion": {
                    "type": "boolean",
                    "description": "Whether retries should be run in the same region as the initial check run.",
                    "default": true
                },
                "maxRetries": {
                    "type": "number",
                    "description": "The maximum number of attempts to retry the check. Not supported for SINGLE_RETRY",
                    "minimum": 1,
                    "maximum": 10
                },
                "maxDurationSeconds": {
                    "type": "number",
                    "description": "The total amount of time to continue retrying the check. Not supported for SINGLE_RETRY",
                    "minimum": 0,
                    "maximum": 600
                },
                "onlyOn": {
                    "$ref": "#/x-alt-definitions/onlyOn"
                }
            },
            "required": [
                "type"
            ]
        },
        "retryStrategy": {
            "type": "string",
            "enum": [
                "FALLBACK"
            ]
        }
    },
    "servers": [
        {
            "url": "https://api.checklyhq.com"
        }
    ],
    "components": {
        "requestBodies": {
            "SnippetCreate": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/SnippetCreate"
                        }
                    }
                }
            },
            "AlertChannelCreate": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/AlertChannelCreate"
                        }
                    }
                }
            },
            "CheckGroupCreateOrUpdateV2": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/CheckGroupCreateOrUpdateV2"
                        }
                    }
                }
            },
            "MaintenanceWindowCreate": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/MaintenanceWindowCreate"
                        }
                    }
                }
            },
            "Model235": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Model235"
                        }
                    }
                }
            },
            "Model246": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Model246"
                        }
                    }
                }
            },
            "Model255": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Model255"
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "Bearer": {
                "type": "apiKey",
                "name": "Authorization",
                "in": "header",
                "description": "The Checkly Public API uses API keys to authenticate requests. You can get the API Key [here](https://app.checklyhq.com/settings/user/api-keys).
Your API key is like a password: 
keep it secure!

Authentication to the API is performed using the Bearer auth method in the Authorization header and using the account ID.

For example, set **Authorization** header while using cURL: `curl -H \"Authorization: Bearer [apiKey]\" \"X-Checkly-Account: [accountId]\"`
"
            }
        },
        "schemas": {
            "Model1": {
                "type": "object",
                "properties": {
                    "startTime": {
                        "type": "string",
                        "format": "date",
                        "x-alternatives": [
                            {
                                "type": "string",
                                "format": "date"
                            },
                            {
                                "type": "integer"
                            }
                        ]
                    },
                    "endTime": {
                        "type": "string",
                        "format": "date",
                        "x-alternatives": [
                            {
                                "type": "string",
                                "format": "date"
                            },
                            {
                                "type": "integer"
                            }
                        ]
                    },
                    "query": {
                        "type": "string",
                        "description": "Prometheus query string"
                    },
                    "step": {
                        "type": "number",
                        "description": "Query resolution step width in seconds",
                        "default": 60
                    }
                },
                "required": [
                    "query"
                ]
            },
            "settings": {
                "type": "object",
                "description": "The settings of the account."
            },
            "alertSettings": {
                "type": "object",
                "description": "The alert settings of the account."
            },
            "Account": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Checkly account ID.",
                        "example": "d43967ee-81db-4e0b-a18c-06be5c995288",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the account.",
                        "example": "Checkly"
                    },
                    "runtimeId": {
                        "type": "string",
                        "description": "The account default runtime ID.",
                        "example": "2022.10"
                    },
                    "settings": {
                        "$ref": "#/components/schemas/settings"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/alertSettings"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "AccountList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Account"
                }
            },
            "error": {
                "type": "string",
                "enum": [
                    "Unauthorized"
                ]
            },
            "attributes": {
                "type": "object"
            },
            "UnauthorizedError": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "enum": [
                            401
                        ]
                    },
                    "error": {
                        "$ref": "#/components/schemas/error"
                    },
                    "message": {
                        "type": "string",
                        "example": "Bad Token"
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/attributes"
                    }
                },
                "required": [
                    "statusCode",
                    "error"
                ]
            },
            "Model2": {
                "type": "string",
                "enum": [
                    "Forbidden"
                ]
            },
            "ForbiddenError": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "enum": [
                            403
                        ]
                    },
                    "error": {
                        "$ref": "#/components/schemas/Model2"
                    },
                    "message": {
                        "type": "string",
                        "example": "Forbidden"
                    }
                },
                "required": [
                    "statusCode",
                    "error"
                ]
            },
            "Model3": {
                "type": "string",
                "enum": [
                    "Too Many Requests"
                ]
            },
            "TooManyRequestsError": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "enum": [
                            429
                        ]
                    },
                    "error": {
                        "$ref": "#/components/schemas/Model3"
                    },
                    "message": {
                        "type": "string",
                        "example": "Too Many Requests"
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/attributes"
                    }
                },
                "required": [
                    "statusCode",
                    "error"
                ]
            },
            "Model4": {
                "type": "string",
                "enum": [
                    "Not Found"
                ]
            },
            "NotFoundError": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "enum": [
                            404
                        ]
                    },
                    "error": {
                        "$ref": "#/components/schemas/Model4"
                    },
                    "message": {
                        "type": "string",
                        "example": "Not Found"
                    }
                },
                "required": [
                    "statusCode",
                    "error"
                ]
            },
            "type": {
                "type": "string",
                "example": "SMS",
                "enum": [
                    "EMAIL",
                    "SLACK",
                    "WEBHOOK",
                    "SMS",
                    "PAGERDUTY",
                    "OPSGENIE",
                    "CALL"
                ]
            },
            "AlertChannelConfig": {
                "type": "object",
                "description": "The configuration details for this alert channel. These can be very different based on the type of the channel."
            },
            "AlertChanelSubscription": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1
                    },
                    "checkId": {
                        "type": "string",
                        "example": "47ccf418-6224-429c-a096-637364249882",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "groupId": {
                        "type": "number",
                        "example": "null",
                        "x-constraint": {
                            "sign": "positive"
                        }
                    },
                    "activated": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "activated"
                ]
            },
            "AlertChanelSubscriptionList": {
                "type": "array",
                "description": "All checks subscribed to this channel.",
                "example": [],
                "items": {
                    "$ref": "#/components/schemas/AlertChanelSubscription"
                }
            },
            "AlertChannel": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1,
                        "x-constraint": {
                            "sign": "positive"
                        }
                    },
                    "type": {
                        "$ref": "#/components/schemas/type"
                    },
                    "config": {
                        "$ref": "#/components/schemas/AlertChannelConfig"
                    },
                    "subscriptions": {
                        "$ref": "#/components/schemas/AlertChanelSubscriptionList"
                    },
                    "sendRecovery": {
                        "type": "boolean"
                    },
                    "sendFailure": {
                        "type": "boolean"
                    },
                    "sendDegraded": {
                        "type": "boolean"
                    },
                    "sslExpiry": {
                        "type": "boolean",
                        "description": "Determines if an alert should be sent for expiring SSL certificates.",
                        "default": false
                    },
                    "sslExpiryThreshold": {
                        "type": "integer",
                        "description": "At what moment in time to start alerting on SSL certificates.",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 30
                    },
                    "autoSubscribe": {
                        "type": "boolean",
                        "description": "Automatically subscribe newly created checks to this alert channel.",
                        "default": false
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "type",
                    "config"
                ]
            },
            "AlertChannelList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/AlertChannel"
                }
            },
            "AlertChannelCreateConfig": {
                "type": "object"
            },
            "AlertChannelCreate": {
                "type": "object",
                "properties": {
                    "subscriptions": {
                        "$ref": "#/components/schemas/AlertChanelSubscriptionList"
                    },
                    "type": {
                        "$ref": "#/components/schemas/type"
                    },
                    "config": {
                        "$ref": "#/components/schemas/AlertChannelCreateConfig"
                    },
                    "sendRecovery": {
                        "type": "boolean"
                    },
                    "sendFailure": {
                        "type": "boolean"
                    },
                    "sendDegraded": {
                        "type": "boolean"
                    },
                    "sslExpiry": {
                        "type": "boolean",
                        "description": "Determines if an alert should be sent for expiring SSL certificates.",
                        "default": false
                    },
                    "sslExpiryThreshold": {
                        "type": "integer",
                        "description": "At what moment in time to start alerting on SSL certificates.",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 30
                    },
                    "autoSubscribe": {
                        "type": "boolean",
                        "description": "Automatically subscribe newly created checks to this alert channel.",
                        "default": false
                    }
                },
                "required": [
                    "type",
                    "config"
                ]
            },
            "Model5": {
                "type": "string",
                "enum": [
                    "Payment Required"
                ]
            },
            "PaymentRequiredError": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "enum": [
                            402
                        ]
                    },
                    "error": {
                        "$ref": "#/components/schemas/Model5"
                    },
                    "message": {
                        "type": "string",
                        "example": "Payment Required"
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/attributes"
                    }
                },
                "required": [
                    "statusCode",
                    "error"
                ]
            },
            "AlertChannelSubscriptionCreate": {
                "type": "object",
                "properties": {
                    "checkId": {
                        "type": "string",
                        "description": "You can either pass a checkId or a groupId, but not both.",
                        "example": "0bbfc00c-44df-46a7-a4d9-ba38deca8bfd",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "groupId": {
                        "type": "number",
                        "description": "You can either pass a checkId or a groupId, but not both.",
                        "example": "null",
                        "x-constraint": {
                            "sign": "positive"
                        }
                    },
                    "activated": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "activated"
                ]
            },
            "Model6": {
                "type": "string",
                "description": "The type of alert channel (SMS, Slack, Webhook, etc).",
                "enum": [
                    "EMAIL",
                    "SLACK",
                    "WEBHOOK",
                    "SMS",
                    "PAGERDUTY",
                    "OPSGENIE",
                    "CALL"
                ]
            },
            "status": {
                "type": "string",
                "description": "The status of the alert.",
                "enum": [
                    "IN_PROGRESS",
                    "SUCCESS",
                    "FAILURE",
                    "RATE_LIMITED"
                ]
            },
            "alertConfig": {
                "type": "object",
                "description": "The configuration which was used to send the alert."
            },
            "checkType": {
                "type": "string",
                "description": "The type of the check.",
                "enum": [
                    "API",
                    "BROWSER",
                    "HEARTBEAT",
                    "MULTI_STEP",
                    "TCP",
                    "PLAYWRIGHT",
                    "URL",
                    "DNS"
                ]
            },
            "AlertNotification": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique ID of this alert notification."
                    },
                    "type": {
                        "$ref": "#/components/schemas/Model6"
                    },
                    "status": {
                        "$ref": "#/components/schemas/status"
                    },
                    "alertConfig": {
                        "$ref": "#/components/schemas/alertConfig"
                    },
                    "notificationResult": {
                        "type": "string",
                        "description": "The result of sending the alert notification.For example, this could be the response body of the Webhook."
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time that the alert was sent."
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/checkType"
                    },
                    "checkId": {
                        "type": "string",
                        "description": "The ID of the check."
                    },
                    "checkAlertId": {
                        "type": "string",
                        "description": "The ID of the check alert."
                    },
                    "alertChannelId": {
                        "type": "number",
                        "description": "The ID of the alert channel which this alert was sent to."
                    },
                    "checkResultId": {
                        "type": "string",
                        "description": "The ID of the corresponding check result."
                    }
                }
            },
            "AlertNotificationList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/AlertNotification"
                }
            },
            "Model7": {
                "type": "string",
                "enum": [
                    "API",
                    "BROWSER",
                    "HEARTBEAT",
                    "MULTI_STEP",
                    "TCP",
                    "PLAYWRIGHT",
                    "URL",
                    "DNS"
                ]
            },
            "tags": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "series": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "pagination": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "number"
                    },
                    "limit": {
                        "type": "number"
                    }
                }
            },
            "unit": {
                "type": "string",
                "enum": [
                    "milliseconds",
                    "score",
                    "count",
                    "percentage"
                ]
            },
            "aggregation": {
                "type": "string",
                "enum": [
                    "avg",
                    "max",
                    "median",
                    "min",
                    "p50",
                    "p90",
                    "p95",
                    "p99",
                    "stddev",
                    "sum"
                ]
            },
            "responseTime": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "wait": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "dns": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "tcp": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "firstByte": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "download": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "availability": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "retries": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "responseTime_avg": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "responseTime_max": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "responseTime_median": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "responseTime_min": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "responseTime_p50": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "responseTime_p90": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "responseTime_p95": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "responseTime_p99": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "responseTime_stddev": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "responseTime_sum": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "wait_avg": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "wait_max": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "wait_median": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "wait_min": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "wait_p50": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "wait_p90": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "wait_p95": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "wait_p99": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "wait_stddev": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "wait_sum": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "dns_avg": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "dns_max": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "dns_median": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "dns_min": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "dns_p50": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "dns_p90": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "dns_p95": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "dns_p99": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "dns_stddev": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "dns_sum": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "tcp_avg": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "tcp_max": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "tcp_median": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "tcp_min": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "tcp_p50": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "tcp_p90": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "tcp_p95": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "tcp_p99": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "tcp_stddev": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "tcp_sum": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "firstByte_avg": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "firstByte_max": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "firstByte_median": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "firstByte_min": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "firstByte_p50": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "firstByte_p90": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "firstByte_p95": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "firstByte_p99": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "firstByte_stddev": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "firstByte_sum": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "download_avg": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "download_max": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "download_median": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "download_min": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "download_p50": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "download_p90": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "download_p95": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "download_p99": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "download_stddev": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "download_sum": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "metadata": {
                "type": "object",
                "properties": {
                    "responseTime": {
                        "$ref": "#/components/schemas/responseTime"
                    },
                    "wait": {
                        "$ref": "#/components/schemas/wait"
                    },
                    "dns": {
                        "$ref": "#/components/schemas/dns"
                    },
                    "tcp": {
                        "$ref": "#/components/schemas/tcp"
                    },
                    "firstByte": {
                        "$ref": "#/components/schemas/firstByte"
                    },
                    "download": {
                        "$ref": "#/components/schemas/download"
                    },
                    "availability": {
                        "$ref": "#/components/schemas/availability"
                    },
                    "retries": {
                        "$ref": "#/components/schemas/retries"
                    },
                    "responseTime_avg": {
                        "$ref": "#/components/schemas/responseTime_avg"
                    },
                    "responseTime_max": {
                        "$ref": "#/components/schemas/responseTime_max"
                    },
                    "responseTime_median": {
                        "$ref": "#/components/schemas/responseTime_median"
                    },
                    "responseTime_min": {
                        "$ref": "#/components/schemas/responseTime_min"
                    },
                    "responseTime_p50": {
                        "$ref": "#/components/schemas/responseTime_p50"
                    },
                    "responseTime_p90": {
                        "$ref": "#/components/schemas/responseTime_p90"
                    },
                    "responseTime_p95": {
                        "$ref": "#/components/schemas/responseTime_p95"
                    },
                    "responseTime_p99": {
                        "$ref": "#/components/schemas/responseTime_p99"
                    },
                    "responseTime_stddev": {
                        "$ref": "#/components/schemas/responseTime_stddev"
                    },
                    "responseTime_sum": {
                        "$ref": "#/components/schemas/responseTime_sum"
                    },
                    "wait_avg": {
                        "$ref": "#/components/schemas/wait_avg"
                    },
                    "wait_max": {
                        "$ref": "#/components/schemas/wait_max"
                    },
                    "wait_median": {
                        "$ref": "#/components/schemas/wait_median"
                    },
                    "wait_min": {
                        "$ref": "#/components/schemas/wait_min"
                    },
                    "wait_p50": {
                        "$ref": "#/components/schemas/wait_p50"
                    },
                    "wait_p90": {
                        "$ref": "#/components/schemas/wait_p90"
                    },
                    "wait_p95": {
                        "$ref": "#/components/schemas/wait_p95"
                    },
                    "wait_p99": {
                        "$ref": "#/components/schemas/wait_p99"
                    },
                    "wait_stddev": {
                        "$ref": "#/components/schemas/wait_stddev"
                    },
                    "wait_sum": {
                        "$ref": "#/components/schemas/wait_sum"
                    },
                    "dns_avg": {
                        "$ref": "#/components/schemas/dns_avg"
                    },
                    "dns_max": {
                        "$ref": "#/components/schemas/dns_max"
                    },
                    "dns_median": {
                        "$ref": "#/components/schemas/dns_median"
                    },
                    "dns_min": {
                        "$ref": "#/components/schemas/dns_min"
                    },
                    "dns_p50": {
                        "$ref": "#/components/schemas/dns_p50"
                    },
                    "dns_p90": {
                        "$ref": "#/components/schemas/dns_p90"
                    },
                    "dns_p95": {
                        "$ref": "#/components/schemas/dns_p95"
                    },
                    "dns_p99": {
                        "$ref": "#/components/schemas/dns_p99"
                    },
                    "dns_stddev": {
                        "$ref": "#/components/schemas/dns_stddev"
                    },
                    "dns_sum": {
                        "$ref": "#/components/schemas/dns_sum"
                    },
                    "tcp_avg": {
                        "$ref": "#/components/schemas/tcp_avg"
                    },
                    "tcp_max": {
                        "$ref": "#/components/schemas/tcp_max"
                    },
                    "tcp_median": {
                        "$ref": "#/components/schemas/tcp_median"
                    },
                    "tcp_min": {
                        "$ref": "#/components/schemas/tcp_min"
                    },
                    "tcp_p50": {
                        "$ref": "#/components/schemas/tcp_p50"
                    },
                    "tcp_p90": {
                        "$ref": "#/components/schemas/tcp_p90"
                    },
                    "tcp_p95": {
                        "$ref": "#/components/schemas/tcp_p95"
                    },
                    "tcp_p99": {
                        "$ref": "#/components/schemas/tcp_p99"
                    },
                    "tcp_stddev": {
                        "$ref": "#/components/schemas/tcp_stddev"
                    },
                    "tcp_sum": {
                        "$ref": "#/components/schemas/tcp_sum"
                    },
                    "firstByte_avg": {
                        "$ref": "#/components/schemas/firstByte_avg"
                    },
                    "firstByte_max": {
                        "$ref": "#/components/schemas/firstByte_max"
                    },
                    "firstByte_median": {
                        "$ref": "#/components/schemas/firstByte_median"
                    },
                    "firstByte_min": {
                        "$ref": "#/components/schemas/firstByte_min"
                    },
                    "firstByte_p50": {
                        "$ref": "#/components/schemas/firstByte_p50"
                    },
                    "firstByte_p90": {
                        "$ref": "#/components/schemas/firstByte_p90"
                    },
                    "firstByte_p95": {
                        "$ref": "#/components/schemas/firstByte_p95"
                    },
                    "firstByte_p99": {
                        "$ref": "#/components/schemas/firstByte_p99"
                    },
                    "firstByte_stddev": {
                        "$ref": "#/components/schemas/firstByte_stddev"
                    },
                    "firstByte_sum": {
                        "$ref": "#/components/schemas/firstByte_sum"
                    },
                    "download_avg": {
                        "$ref": "#/components/schemas/download_avg"
                    },
                    "download_max": {
                        "$ref": "#/components/schemas/download_max"
                    },
                    "download_median": {
                        "$ref": "#/components/schemas/download_median"
                    },
                    "download_min": {
                        "$ref": "#/components/schemas/download_min"
                    },
                    "download_p50": {
                        "$ref": "#/components/schemas/download_p50"
                    },
                    "download_p90": {
                        "$ref": "#/components/schemas/download_p90"
                    },
                    "download_p95": {
                        "$ref": "#/components/schemas/download_p95"
                    },
                    "download_p99": {
                        "$ref": "#/components/schemas/download_p99"
                    },
                    "download_stddev": {
                        "$ref": "#/components/schemas/download_stddev"
                    },
                    "download_sum": {
                        "$ref": "#/components/schemas/download_sum"
                    }
                }
            },
            "Model8": {
                "type": "object",
                "properties": {
                    "checkId": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model7"
                    },
                    "activated": {
                        "type": "boolean"
                    },
                    "muted": {
                        "type": "boolean"
                    },
                    "frequency": {
                        "type": "number"
                    },
                    "from": {
                        "type": "string",
                        "format": "date"
                    },
                    "to": {
                        "type": "string",
                        "format": "date"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/tags"
                    },
                    "series": {
                        "$ref": "#/components/schemas/series"
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/pagination"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/metadata"
                    }
                }
            },
            "Model9": {
                "type": "string",
                "enum": [
                    "API",
                    "BROWSER",
                    "HEARTBEAT",
                    "MULTI_STEP",
                    "TCP",
                    "PLAYWRIGHT",
                    "URL",
                    "DNS"
                ]
            },
            "TTFB": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "FCP": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "LCP": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "CLS": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TBT": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "consoleErrors": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "networkErrors": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "userScriptErrors": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "documentErrors": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TTFB_avg": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TTFB_max": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TTFB_median": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TTFB_min": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TTFB_p50": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TTFB_p90": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TTFB_p95": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TTFB_p99": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TTFB_stddev": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TTFB_sum": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "FCP_avg": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "FCP_max": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "FCP_median": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "FCP_min": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "FCP_p50": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "FCP_p90": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "FCP_p95": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "FCP_p99": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "FCP_stddev": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "FCP_sum": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "LCP_avg": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "LCP_max": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "LCP_median": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "LCP_min": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "LCP_p50": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "LCP_p90": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "LCP_p95": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "LCP_p99": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "LCP_stddev": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "LCP_sum": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "CLS_avg": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "CLS_max": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "CLS_median": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "CLS_min": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "CLS_p50": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "CLS_p90": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "CLS_p95": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "CLS_p99": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "CLS_stddev": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "CLS_sum": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TBT_avg": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TBT_max": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TBT_median": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TBT_min": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TBT_p50": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TBT_p90": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TBT_p95": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TBT_p99": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TBT_stddev": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "TBT_sum": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "consoleErrors_avg": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "consoleErrors_max": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "consoleErrors_median": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "consoleErrors_min": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "consoleErrors_p50": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "consoleErrors_p90": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "consoleErrors_p95": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "consoleErrors_p99": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "consoleErrors_stddev": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "consoleErrors_sum": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "networkErrors_avg": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "networkErrors_max": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "networkErrors_median": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "networkErrors_min": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "networkErrors_p50": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "networkErrors_p90": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "networkErrors_p95": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "networkErrors_p99": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "networkErrors_stddev": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "networkErrors_sum": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "userScriptErrors_avg": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "userScriptErrors_max": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "userScriptErrors_median": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "userScriptErrors_min": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "userScriptErrors_p50": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "userScriptErrors_p90": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "userScriptErrors_p95": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "userScriptErrors_p99": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "userScriptErrors_stddev": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "userScriptErrors_sum": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "documentErrors_avg": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "documentErrors_max": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "documentErrors_median": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "documentErrors_min": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "documentErrors_p50": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "documentErrors_p90": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "documentErrors_p95": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "documentErrors_p99": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "documentErrors_stddev": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "documentErrors_sum": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "Model10": {
                "type": "object",
                "properties": {
                    "responseTime": {
                        "$ref": "#/components/schemas/responseTime"
                    },
                    "TTFB": {
                        "$ref": "#/components/schemas/TTFB"
                    },
                    "FCP": {
                        "$ref": "#/components/schemas/FCP"
                    },
                    "LCP": {
                        "$ref": "#/components/schemas/LCP"
                    },
                    "CLS": {
                        "$ref": "#/components/schemas/CLS"
                    },
                    "TBT": {
                        "$ref": "#/components/schemas/TBT"
                    },
                    "consoleErrors": {
                        "$ref": "#/components/schemas/consoleErrors"
                    },
                    "networkErrors": {
                        "$ref": "#/components/schemas/networkErrors"
                    },
                    "userScriptErrors": {
                        "$ref": "#/components/schemas/userScriptErrors"
                    },
                    "documentErrors": {
                        "$ref": "#/components/schemas/documentErrors"
                    },
                    "availability": {
                        "$ref": "#/components/schemas/availability"
                    },
                    "retries": {
                        "$ref": "#/components/schemas/retries"
                    },
                    "responseTime_avg": {
                        "$ref": "#/components/schemas/responseTime_avg"
                    },
                    "responseTime_max": {
                        "$ref": "#/components/schemas/responseTime_max"
                    },
                    "responseTime_median": {
                        "$ref": "#/components/schemas/responseTime_median"
                    },
                    "responseTime_min": {
                        "$ref": "#/components/schemas/responseTime_min"
                    },
                    "responseTime_p50": {
                        "$ref": "#/components/schemas/responseTime_p50"
                    },
                    "responseTime_p90": {
                        "$ref": "#/components/schemas/responseTime_p90"
                    },
                    "responseTime_p95": {
                        "$ref": "#/components/schemas/responseTime_p95"
                    },
                    "responseTime_p99": {
                        "$ref": "#/components/schemas/responseTime_p99"
                    },
                    "responseTime_stddev": {
                        "$ref": "#/components/schemas/responseTime_stddev"
                    },
                    "responseTime_sum": {
                        "$ref": "#/components/schemas/responseTime_sum"
                    },
                    "TTFB_avg": {
                        "$ref": "#/components/schemas/TTFB_avg"
                    },
                    "TTFB_max": {
                        "$ref": "#/components/schemas/TTFB_max"
                    },
                    "TTFB_median": {
                        "$ref": "#/components/schemas/TTFB_median"
                    },
                    "TTFB_min": {
                        "$ref": "#/components/schemas/TTFB_min"
                    },
                    "TTFB_p50": {
                        "$ref": "#/components/schemas/TTFB_p50"
                    },
                    "TTFB_p90": {
                        "$ref": "#/components/schemas/TTFB_p90"
                    },
                    "TTFB_p95": {
                        "$ref": "#/components/schemas/TTFB_p95"
                    },
                    "TTFB_p99": {
                        "$ref": "#/components/schemas/TTFB_p99"
                    },
                    "TTFB_stddev": {
                        "$ref": "#/components/schemas/TTFB_stddev"
                    },
                    "TTFB_sum": {
                        "$ref": "#/components/schemas/TTFB_sum"
                    },
                    "FCP_avg": {
                        "$ref": "#/components/schemas/FCP_avg"
                    },
                    "FCP_max": {
                        "$ref": "#/components/schemas/FCP_max"
                    },
                    "FCP_median": {
                        "$ref": "#/components/schemas/FCP_median"
                    },
                    "FCP_min": {
                        "$ref": "#/components/schemas/FCP_min"
                    },
                    "FCP_p50": {
                        "$ref": "#/components/schemas/FCP_p50"
                    },
                    "FCP_p90": {
                        "$ref": "#/components/schemas/FCP_p90"
                    },
                    "FCP_p95": {
                        "$ref": "#/components/schemas/FCP_p95"
                    },
                    "FCP_p99": {
                        "$ref": "#/components/schemas/FCP_p99"
                    },
                    "FCP_stddev": {
                        "$ref": "#/components/schemas/FCP_stddev"
                    },
                    "FCP_sum": {
                        "$ref": "#/components/schemas/FCP_sum"
                    },
                    "LCP_avg": {
                        "$ref": "#/components/schemas/LCP_avg"
                    },
                    "LCP_max": {
                        "$ref": "#/components/schemas/LCP_max"
                    },
                    "LCP_median": {
                        "$ref": "#/components/schemas/LCP_median"
                    },
                    "LCP_min": {
                        "$ref": "#/components/schemas/LCP_min"
                    },
                    "LCP_p50": {
                        "$ref": "#/components/schemas/LCP_p50"
                    },
                    "LCP_p90": {
                        "$ref": "#/components/schemas/LCP_p90"
                    },
                    "LCP_p95": {
                        "$ref": "#/components/schemas/LCP_p95"
                    },
                    "LCP_p99": {
                        "$ref": "#/components/schemas/LCP_p99"
                    },
                    "LCP_stddev": {
                        "$ref": "#/components/schemas/LCP_stddev"
                    },
                    "LCP_sum": {
                        "$ref": "#/components/schemas/LCP_sum"
                    },
                    "CLS_avg": {
                        "$ref": "#/components/schemas/CLS_avg"
                    },
                    "CLS_max": {
                        "$ref": "#/components/schemas/CLS_max"
                    },
                    "CLS_median": {
                        "$ref": "#/components/schemas/CLS_median"
                    },
                    "CLS_min": {
                        "$ref": "#/components/schemas/CLS_min"
                    },
                    "CLS_p50": {
                        "$ref": "#/components/schemas/CLS_p50"
                    },
                    "CLS_p90": {
                        "$ref": "#/components/schemas/CLS_p90"
                    },
                    "CLS_p95": {
                        "$ref": "#/components/schemas/CLS_p95"
                    },
                    "CLS_p99": {
                        "$ref": "#/components/schemas/CLS_p99"
                    },
                    "CLS_stddev": {
                        "$ref": "#/components/schemas/CLS_stddev"
                    },
                    "CLS_sum": {
                        "$ref": "#/components/schemas/CLS_sum"
                    },
                    "TBT_avg": {
                        "$ref": "#/components/schemas/TBT_avg"
                    },
                    "TBT_max": {
                        "$ref": "#/components/schemas/TBT_max"
                    },
                    "TBT_median": {
                        "$ref": "#/components/schemas/TBT_median"
                    },
                    "TBT_min": {
                        "$ref": "#/components/schemas/TBT_min"
                    },
                    "TBT_p50": {
                        "$ref": "#/components/schemas/TBT_p50"
                    },
                    "TBT_p90": {
                        "$ref": "#/components/schemas/TBT_p90"
                    },
                    "TBT_p95": {
                        "$ref": "#/components/schemas/TBT_p95"
                    },
                    "TBT_p99": {
                        "$ref": "#/components/schemas/TBT_p99"
                    },
                    "TBT_stddev": {
                        "$ref": "#/components/schemas/TBT_stddev"
                    },
                    "TBT_sum": {
                        "$ref": "#/components/schemas/TBT_sum"
                    },
                    "consoleErrors_avg": {
                        "$ref": "#/components/schemas/consoleErrors_avg"
                    },
                    "consoleErrors_max": {
                        "$ref": "#/components/schemas/consoleErrors_max"
                    },
                    "consoleErrors_median": {
                        "$ref": "#/components/schemas/consoleErrors_median"
                    },
                    "consoleErrors_min": {
                        "$ref": "#/components/schemas/consoleErrors_min"
                    },
                    "consoleErrors_p50": {
                        "$ref": "#/components/schemas/consoleErrors_p50"
                    },
                    "consoleErrors_p90": {
                        "$ref": "#/components/schemas/consoleErrors_p90"
                    },
                    "consoleErrors_p95": {
                        "$ref": "#/components/schemas/consoleErrors_p95"
                    },
                    "consoleErrors_p99": {
                        "$ref": "#/components/schemas/consoleErrors_p99"
                    },
                    "consoleErrors_stddev": {
                        "$ref": "#/components/schemas/consoleErrors_stddev"
                    },
                    "consoleErrors_sum": {
                        "$ref": "#/components/schemas/consoleErrors_sum"
                    },
                    "networkErrors_avg": {
                        "$ref": "#/components/schemas/networkErrors_avg"
                    },
                    "networkErrors_max": {
                        "$ref": "#/components/schemas/networkErrors_max"
                    },
                    "networkErrors_median": {
                        "$ref": "#/components/schemas/networkErrors_median"
                    },
                    "networkErrors_min": {
                        "$ref": "#/components/schemas/networkErrors_min"
                    },
                    "networkErrors_p50": {
                        "$ref": "#/components/schemas/networkErrors_p50"
                    },
                    "networkErrors_p90": {
                        "$ref": "#/components/schemas/networkErrors_p90"
                    },
                    "networkErrors_p95": {
                        "$ref": "#/components/schemas/networkErrors_p95"
                    },
                    "networkErrors_p99": {
                        "$ref": "#/components/schemas/networkErrors_p99"
                    },
                    "networkErrors_stddev": {
                        "$ref": "#/components/schemas/networkErrors_stddev"
                    },
                    "networkErrors_sum": {
                        "$ref": "#/components/schemas/networkErrors_sum"
                    },
                    "userScriptErrors_avg": {
                        "$ref": "#/components/schemas/userScriptErrors_avg"
                    },
                    "userScriptErrors_max": {
                        "$ref": "#/components/schemas/userScriptErrors_max"
                    },
                    "userScriptErrors_median": {
                        "$ref": "#/components/schemas/userScriptErrors_median"
                    },
                    "userScriptErrors_min": {
                        "$ref": "#/components/schemas/userScriptErrors_min"
                    },
                    "userScriptErrors_p50": {
                        "$ref": "#/components/schemas/userScriptErrors_p50"
                    },
                    "userScriptErrors_p90": {
                        "$ref": "#/components/schemas/userScriptErrors_p90"
                    },
                    "userScriptErrors_p95": {
                        "$ref": "#/components/schemas/userScriptErrors_p95"
                    },
                    "userScriptErrors_p99": {
                        "$ref": "#/components/schemas/userScriptErrors_p99"
                    },
                    "userScriptErrors_stddev": {
                        "$ref": "#/components/schemas/userScriptErrors_stddev"
                    },
                    "userScriptErrors_sum": {
                        "$ref": "#/components/schemas/userScriptErrors_sum"
                    },
                    "documentErrors_avg": {
                        "$ref": "#/components/schemas/documentErrors_avg"
                    },
                    "documentErrors_max": {
                        "$ref": "#/components/schemas/documentErrors_max"
                    },
                    "documentErrors_median": {
                        "$ref": "#/components/schemas/documentErrors_median"
                    },
                    "documentErrors_min": {
                        "$ref": "#/components/schemas/documentErrors_min"
                    },
                    "documentErrors_p50": {
                        "$ref": "#/components/schemas/documentErrors_p50"
                    },
                    "documentErrors_p90": {
                        "$ref": "#/components/schemas/documentErrors_p90"
                    },
                    "documentErrors_p95": {
                        "$ref": "#/components/schemas/documentErrors_p95"
                    },
                    "documentErrors_p99": {
                        "$ref": "#/components/schemas/documentErrors_p99"
                    },
                    "documentErrors_stddev": {
                        "$ref": "#/components/schemas/documentErrors_stddev"
                    },
                    "documentErrors_sum": {
                        "$ref": "#/components/schemas/documentErrors_sum"
                    }
                }
            },
            "Model11": {
                "type": "object",
                "properties": {
                    "checkId": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model9"
                    },
                    "activated": {
                        "type": "boolean"
                    },
                    "muted": {
                        "type": "boolean"
                    },
                    "frequency": {
                        "type": "number"
                    },
                    "from": {
                        "type": "string",
                        "format": "date"
                    },
                    "to": {
                        "type": "string",
                        "format": "date"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/tags"
                    },
                    "series": {
                        "$ref": "#/components/schemas/series"
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/pagination"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Model10"
                    }
                }
            },
            "Model12": {
                "type": "string",
                "enum": [
                    "API",
                    "BROWSER",
                    "HEARTBEAT",
                    "MULTI_STEP",
                    "TCP",
                    "PLAYWRIGHT",
                    "URL",
                    "DNS"
                ]
            },
            "Model13": {
                "type": "object",
                "properties": {
                    "availability": {
                        "$ref": "#/components/schemas/availability"
                    },
                    "retries": {
                        "$ref": "#/components/schemas/retries"
                    }
                }
            },
            "Model14": {
                "type": "object",
                "properties": {
                    "checkId": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model12"
                    },
                    "activated": {
                        "type": "boolean"
                    },
                    "muted": {
                        "type": "boolean"
                    },
                    "frequency": {
                        "type": "number"
                    },
                    "from": {
                        "type": "string",
                        "format": "date"
                    },
                    "to": {
                        "type": "string",
                        "format": "date"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/tags"
                    },
                    "series": {
                        "$ref": "#/components/schemas/series"
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/pagination"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Model13"
                    }
                }
            },
            "Model15": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "Model16": {
                "type": "string",
                "enum": [
                    "API",
                    "BROWSER",
                    "HEARTBEAT",
                    "MULTI_STEP",
                    "TCP",
                    "PLAYWRIGHT",
                    "URL",
                    "DNS"
                ]
            },
            "Model17": {
                "type": "object",
                "properties": {
                    "responseTime": {
                        "$ref": "#/components/schemas/responseTime"
                    },
                    "availability": {
                        "$ref": "#/components/schemas/availability"
                    },
                    "retries": {
                        "$ref": "#/components/schemas/retries"
                    },
                    "responseTime_avg": {
                        "$ref": "#/components/schemas/responseTime_avg"
                    },
                    "responseTime_max": {
                        "$ref": "#/components/schemas/responseTime_max"
                    },
                    "responseTime_median": {
                        "$ref": "#/components/schemas/responseTime_median"
                    },
                    "responseTime_min": {
                        "$ref": "#/components/schemas/responseTime_min"
                    },
                    "responseTime_p50": {
                        "$ref": "#/components/schemas/responseTime_p50"
                    },
                    "responseTime_p90": {
                        "$ref": "#/components/schemas/responseTime_p90"
                    },
                    "responseTime_p95": {
                        "$ref": "#/components/schemas/responseTime_p95"
                    },
                    "responseTime_p99": {
                        "$ref": "#/components/schemas/responseTime_p99"
                    },
                    "responseTime_stddev": {
                        "$ref": "#/components/schemas/responseTime_stddev"
                    },
                    "responseTime_sum": {
                        "$ref": "#/components/schemas/responseTime_sum"
                    }
                }
            },
            "Model18": {
                "type": "object",
                "properties": {
                    "checkId": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model16"
                    },
                    "activated": {
                        "type": "boolean"
                    },
                    "muted": {
                        "type": "boolean"
                    },
                    "frequency": {
                        "type": "number"
                    },
                    "from": {
                        "type": "string",
                        "format": "date"
                    },
                    "to": {
                        "type": "string",
                        "format": "date"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/tags"
                    },
                    "series": {
                        "$ref": "#/components/schemas/series"
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/pagination"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Model17"
                    }
                }
            },
            "Model19": {
                "type": "string",
                "enum": [
                    "API",
                    "BROWSER",
                    "HEARTBEAT",
                    "MULTI_STEP",
                    "TCP",
                    "PLAYWRIGHT",
                    "URL",
                    "DNS"
                ]
            },
            "Model20": {
                "type": "object",
                "properties": {
                    "responseTime": {
                        "$ref": "#/components/schemas/responseTime"
                    },
                    "availability": {
                        "$ref": "#/components/schemas/availability"
                    },
                    "retries": {
                        "$ref": "#/components/schemas/retries"
                    },
                    "responseTime_avg": {
                        "$ref": "#/components/schemas/responseTime_avg"
                    },
                    "responseTime_max": {
                        "$ref": "#/components/schemas/responseTime_max"
                    },
                    "responseTime_median": {
                        "$ref": "#/components/schemas/responseTime_median"
                    },
                    "responseTime_min": {
                        "$ref": "#/components/schemas/responseTime_min"
                    },
                    "responseTime_p50": {
                        "$ref": "#/components/schemas/responseTime_p50"
                    },
                    "responseTime_p90": {
                        "$ref": "#/components/schemas/responseTime_p90"
                    },
                    "responseTime_p95": {
                        "$ref": "#/components/schemas/responseTime_p95"
                    },
                    "responseTime_p99": {
                        "$ref": "#/components/schemas/responseTime_p99"
                    },
                    "responseTime_stddev": {
                        "$ref": "#/components/schemas/responseTime_stddev"
                    },
                    "responseTime_sum": {
                        "$ref": "#/components/schemas/responseTime_sum"
                    }
                }
            },
            "Model21": {
                "type": "object",
                "properties": {
                    "checkId": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model19"
                    },
                    "activated": {
                        "type": "boolean"
                    },
                    "muted": {
                        "type": "boolean"
                    },
                    "frequency": {
                        "type": "number"
                    },
                    "from": {
                        "type": "string",
                        "format": "date"
                    },
                    "to": {
                        "type": "string",
                        "format": "date"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/tags"
                    },
                    "series": {
                        "$ref": "#/components/schemas/series"
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/pagination"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Model20"
                    }
                }
            },
            "Model22": {
                "type": "string",
                "enum": [
                    "API",
                    "BROWSER",
                    "HEARTBEAT",
                    "MULTI_STEP",
                    "TCP",
                    "PLAYWRIGHT",
                    "URL",
                    "DNS"
                ]
            },
            "total": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "connection": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "data": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "total_avg": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "total_max": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "total_median": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "total_min": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "total_p50": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "total_p90": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "total_p95": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "total_p99": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "total_stddev": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "total_sum": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "connection_avg": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "connection_max": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "connection_median": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "connection_min": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "connection_p50": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "connection_p90": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "connection_p95": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "connection_p99": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "connection_stddev": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "connection_sum": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "data_avg": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "data_max": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "data_median": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "data_min": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "data_p50": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "data_p90": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "data_p95": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "data_p99": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "data_stddev": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "data_sum": {
                "type": "object",
                "properties": {
                    "unit": {
                        "$ref": "#/components/schemas/unit"
                    },
                    "label": {
                        "type": "string"
                    },
                    "aggregation": {
                        "$ref": "#/components/schemas/aggregation"
                    }
                }
            },
            "Model23": {
                "type": "object",
                "properties": {
                    "total": {
                        "$ref": "#/components/schemas/total"
                    },
                    "dns": {
                        "$ref": "#/components/schemas/dns"
                    },
                    "connection": {
                        "$ref": "#/components/schemas/connection"
                    },
                    "data": {
                        "$ref": "#/components/schemas/data"
                    },
                    "availability": {
                        "$ref": "#/components/schemas/availability"
                    },
                    "retries": {
                        "$ref": "#/components/schemas/retries"
                    },
                    "total_avg": {
                        "$ref": "#/components/schemas/total_avg"
                    },
                    "total_max": {
                        "$ref": "#/components/schemas/total_max"
                    },
                    "total_median": {
                        "$ref": "#/components/schemas/total_median"
                    },
                    "total_min": {
                        "$ref": "#/components/schemas/total_min"
                    },
                    "total_p50": {
                        "$ref": "#/components/schemas/total_p50"
                    },
                    "total_p90": {
                        "$ref": "#/components/schemas/total_p90"
                    },
                    "total_p95": {
                        "$ref": "#/components/schemas/total_p95"
                    },
                    "total_p99": {
                        "$ref": "#/components/schemas/total_p99"
                    },
                    "total_stddev": {
                        "$ref": "#/components/schemas/total_stddev"
                    },
                    "total_sum": {
                        "$ref": "#/components/schemas/total_sum"
                    },
                    "dns_avg": {
                        "$ref": "#/components/schemas/dns_avg"
                    },
                    "dns_max": {
                        "$ref": "#/components/schemas/dns_max"
                    },
                    "dns_median": {
                        "$ref": "#/components/schemas/dns_median"
                    },
                    "dns_min": {
                        "$ref": "#/components/schemas/dns_min"
                    },
                    "dns_p50": {
                        "$ref": "#/components/schemas/dns_p50"
                    },
                    "dns_p90": {
                        "$ref": "#/components/schemas/dns_p90"
                    },
                    "dns_p95": {
                        "$ref": "#/components/schemas/dns_p95"
                    },
                    "dns_p99": {
                        "$ref": "#/components/schemas/dns_p99"
                    },
                    "dns_stddev": {
                        "$ref": "#/components/schemas/dns_stddev"
                    },
                    "dns_sum": {
                        "$ref": "#/components/schemas/dns_sum"
                    },
                    "connection_avg": {
                        "$ref": "#/components/schemas/connection_avg"
                    },
                    "connection_max": {
                        "$ref": "#/components/schemas/connection_max"
                    },
                    "connection_median": {
                        "$ref": "#/components/schemas/connection_median"
                    },
                    "connection_min": {
                        "$ref": "#/components/schemas/connection_min"
                    },
                    "connection_p50": {
                        "$ref": "#/components/schemas/connection_p50"
                    },
                    "connection_p90": {
                        "$ref": "#/components/schemas/connection_p90"
                    },
                    "connection_p95": {
                        "$ref": "#/components/schemas/connection_p95"
                    },
                    "connection_p99": {
                        "$ref": "#/components/schemas/connection_p99"
                    },
                    "connection_stddev": {
                        "$ref": "#/components/schemas/connection_stddev"
                    },
                    "connection_sum": {
                        "$ref": "#/components/schemas/connection_sum"
                    },
                    "data_avg": {
                        "$ref": "#/components/schemas/data_avg"
                    },
                    "data_max": {
                        "$ref": "#/components/schemas/data_max"
                    },
                    "data_median": {
                        "$ref": "#/components/schemas/data_median"
                    },
                    "data_min": {
                        "$ref": "#/components/schemas/data_min"
                    },
                    "data_p50": {
                        "$ref": "#/components/schemas/data_p50"
                    },
                    "data_p90": {
                        "$ref": "#/components/schemas/data_p90"
                    },
                    "data_p95": {
                        "$ref": "#/components/schemas/data_p95"
                    },
                    "data_p99": {
                        "$ref": "#/components/schemas/data_p99"
                    },
                    "data_stddev": {
                        "$ref": "#/components/schemas/data_stddev"
                    },
                    "data_sum": {
                        "$ref": "#/components/schemas/data_sum"
                    }
                }
            },
            "Model24": {
                "type": "object",
                "properties": {
                    "checkId": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model22"
                    },
                    "activated": {
                        "type": "boolean"
                    },
                    "muted": {
                        "type": "boolean"
                    },
                    "frequency": {
                        "type": "number"
                    },
                    "from": {
                        "type": "string",
                        "format": "date"
                    },
                    "to": {
                        "type": "string",
                        "format": "date"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/tags"
                    },
                    "series": {
                        "$ref": "#/components/schemas/series"
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/pagination"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Model23"
                    }
                }
            },
            "Model25": {
                "type": "string",
                "enum": [
                    "API",
                    "BROWSER",
                    "HEARTBEAT",
                    "MULTI_STEP",
                    "TCP",
                    "PLAYWRIGHT",
                    "URL",
                    "DNS"
                ]
            },
            "Model26": {
                "type": "object",
                "properties": {
                    "checkId": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model25"
                    },
                    "activated": {
                        "type": "boolean"
                    },
                    "muted": {
                        "type": "boolean"
                    },
                    "frequency": {
                        "type": "number"
                    },
                    "from": {
                        "type": "string",
                        "format": "date"
                    },
                    "to": {
                        "type": "string",
                        "format": "date"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/tags"
                    },
                    "series": {
                        "$ref": "#/components/schemas/series"
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/pagination"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/metadata"
                    }
                }
            },
            "alertType": {
                "type": "string",
                "description": "The type of alert.",
                "example": "ALERT_FAILURE",
                "enum": [
                    "NO_ALERT",
                    "ALERT_FAILURE",
                    "ALERT_FAILURE_REMAIN",
                    "ALERT_FAILURE_DEGRADED",
                    "ALERT_RECOVERY",
                    "ALERT_DEGRADED",
                    "ALERT_DEGRADED_REMAIN",
                    "ALERT_DEGRADED_FAILURE",
                    "ALERT_DEGRADED_RECOVERY",
                    "ALERT_SSL"
                ]
            },
            "Model27": {
                "type": "string",
                "description": "The type of the check.",
                "example": "API",
                "enum": [
                    "API",
                    "BROWSER",
                    "HEARTBEAT",
                    "MULTI_STEP",
                    "TCP",
                    "PLAYWRIGHT",
                    "URL",
                    "DNS"
                ]
            },
            "CheckAlert": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique ID of this alert.",
                        "example": "1"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "API Check"
                    },
                    "checkId": {
                        "type": "string",
                        "description": "The ID of check this alert belongs to.",
                        "example": "db147a95-6ed6-44c9-a584-c5dca2db3aaa"
                    },
                    "alertType": {
                        "$ref": "#/components/schemas/alertType"
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model27"
                    },
                    "runLocation": {
                        "type": "string",
                        "description": "What data center location this check alert was triggered from.",
                        "example": "us-east-1"
                    },
                    "responseTime": {
                        "type": "number",
                        "description": "Describes the time it took to execute relevant parts of this check. Any setup timeor system time needed to start executing this check in the Checkly backend is not part of this.",
                        "example": 10
                    },
                    "error": {
                        "type": "string",
                        "description": "Any specific error messages that were part of the failing check triggering the alert.",
                        "example": "OK"
                    },
                    "statusCode": {
                        "type": "string",
                        "description": "The status code of the response. Only applies to API checks.",
                        "example": "200"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date",
                        "description": "The date and time this check alert was created."
                    },
                    "startedAt": {
                        "type": "string",
                        "format": "date",
                        "description": "The date and time this check alert was started."
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CheckAlertList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CheckAlert"
                }
            },
            "CheckGroupTagList": {
                "type": "array",
                "description": "Tags for organizing and filtering checks.",
                "example": [
                    "production"
                ],
                "items": {
                    "type": "string"
                }
            },
            "Model28": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "CheckGroupLocationList": {
                "type": "array",
                "description": "An array of one or more data center locations where to run the checks.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model28"
                }
            },
            "KeyValue": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string",
                        "default": ""
                    },
                    "locked": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "required": [
                    "key",
                    "value"
                ]
            },
            "HeaderList": {
                "type": "array",
                "example": [
                    {
                        "key": "Cache-Control",
                        "value": "no-store"
                    }
                ],
                "items": {
                    "$ref": "#/components/schemas/KeyValue"
                }
            },
            "QueryParameterList": {
                "type": "array",
                "example": [
                    {
                        "key": "Page",
                        "value": "1"
                    }
                ],
                "items": {
                    "$ref": "#/components/schemas/KeyValue"
                }
            },
            "AssertionSource": {
                "type": "string",
                "enum": [
                    "STATUS_CODE",
                    "JSON_BODY",
                    "HEADERS",
                    "TEXT_BODY",
                    "RESPONSE_TIME"
                ]
            },
            "AssertionComparison": {
                "type": "string",
                "enum": [
                    "EQUALS",
                    "NOT_EQUALS",
                    "HAS_KEY",
                    "NOT_HAS_KEY",
                    "HAS_VALUE",
                    "NOT_HAS_VALUE",
                    "IS_EMPTY",
                    "NOT_EMPTY",
                    "GREATER_THAN",
                    "LESS_THAN",
                    "CONTAINS",
                    "NOT_CONTAINS",
                    "IS_NULL",
                    "NOT_NULL"
                ]
            },
            "Assertion": {
                "type": "object",
                "properties": {
                    "source": {
                        "$ref": "#/components/schemas/AssertionSource"
                    },
                    "comparison": {
                        "$ref": "#/components/schemas/AssertionComparison"
                    },
                    "property": {
                        "type": "string",
                        "default": ""
                    },
                    "target": {
                        "type": "string",
                        "default": ""
                    },
                    "regex": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "AssertionList": {
                "type": "array",
                "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                "example": [
                    {
                        "source": "STATUS_CODE",
                        "comparison": "NOT_EMPTY",
                        "target": "200"
                    }
                ],
                "items": {
                    "$ref": "#/components/schemas/Assertion"
                }
            },
            "BasicAuth": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "example": "admin",
                        "default": ""
                    },
                    "password": {
                        "type": "string",
                        "example": "abc12345",
                        "default": ""
                    }
                },
                "required": [
                    "username",
                    "password"
                ]
            },
            "CheckGroupAPICheckDefaults": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "description": "The base url for this group which you can reference with the {{GROUP_BASE_URL}} variable in all group checks.",
                        "example": "https://api.example.com/v1",
                        "default": ""
                    },
                    "headers": {
                        "$ref": "#/components/schemas/HeaderList"
                    },
                    "queryParameters": {
                        "$ref": "#/components/schemas/QueryParameterList"
                    },
                    "assertions": {
                        "$ref": "#/components/schemas/AssertionList"
                    },
                    "basicAuth": {
                        "$ref": "#/components/schemas/BasicAuth"
                    }
                }
            },
            "EnvironmentVariableGet": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The key of the environment variable (this value cannot be changed).",
                        "example": "API_KEY"
                    },
                    "value": {
                        "type": "string"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Used only in the UI to hide the value like a password.",
                        "default": false
                    },
                    "secret": {
                        "type": "boolean",
                        "description": "Set an environment variable as secret. Once set, its value cannot be unlocked.",
                        "default": false
                    }
                },
                "required": [
                    "key",
                    "value"
                ]
            },
            "EnvironmentVariableList": {
                "type": "array",
                "maxItems": 50,
                "items": {
                    "$ref": "#/components/schemas/EnvironmentVariableGet"
                }
            },
            "escalationType": {
                "type": "string",
                "description": "Determines what type of escalation to use.",
                "default": "RUN_BASED",
                "enum": [
                    "RUN_BASED",
                    "TIME_BASED"
                ]
            },
            "AlertSettingsReminders": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "number",
                        "description": "How many reminders to send out after the initial alert notification.",
                        "default": 0,
                        "enum": [
                            0,
                            1,
                            2,
                            3,
                            4,
                            5,
                            100000
                        ]
                    },
                    "interval": {
                        "type": "number",
                        "description": "At what interval the reminders should be send.",
                        "default": 5,
                        "enum": [
                            5,
                            10,
                            15,
                            30
                        ]
                    }
                }
            },
            "AlertSettingsSSLCertificates": {
                "type": "object",
                "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Determines if alert notifications should be send for expiring SSL certificates."
                    },
                    "alertThreshold": {
                        "type": "integer",
                        "description": "At what moment in time to start alerting on SSL certificates."
                    }
                }
            },
            "AlertSettingsRunBasedEscalation": {
                "type": "object",
                "properties": {
                    "failedRunThreshold": {
                        "type": "number",
                        "description": "After how many failed consecutive check runs an alert notification should be send.",
                        "enum": [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    }
                }
            },
            "AlertSettingsTimeBasedEscalation": {
                "type": "object",
                "properties": {
                    "minutesFailingThreshold": {
                        "type": "number",
                        "description": "After how many minutes after a check starts failing an alert should be send.",
                        "enum": [
                            5,
                            10,
                            15,
                            30
                        ]
                    }
                }
            },
            "parallelRunFailureThreshold": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Determines if parallel run threshold is enabled",
                        "default": false
                    },
                    "percentage": {
                        "type": "number",
                        "description": "The percentage of parallel runs that should fail before an alert is triggered",
                        "default": 10,
                        "enum": [
                            10,
                            20,
                            30,
                            40,
                            50,
                            60,
                            70,
                            80,
                            90,
                            100
                        ]
                    }
                }
            },
            "CheckGroupAlertSettings": {
                "type": "object",
                "description": "Alert settings.",
                "default": {
                    "escalationType": "RUN_BASED",
                    "runBasedEscalation": {
                        "failedRunThreshold": 1
                    },
                    "reminders": {
                        "amount": 0,
                        "interval": 5
                    },
                    "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                    }
                },
                "enum": [
                    {
                        "value": {}
                    }
                ],
                "properties": {
                    "escalationType": {
                        "$ref": "#/components/schemas/escalationType"
                    },
                    "reminders": {
                        "$ref": "#/components/schemas/AlertSettingsReminders"
                    },
                    "sslCertificates": {
                        "$ref": "#/components/schemas/AlertSettingsSSLCertificates"
                    },
                    "runBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsRunBasedEscalation"
                    },
                    "timeBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsTimeBasedEscalation"
                    },
                    "parallelRunFailureThreshold": {
                        "$ref": "#/components/schemas/parallelRunFailureThreshold"
                    }
                }
            },
            "Model29": {
                "type": "object",
                "description": "Alert channel subscription.",
                "properties": {
                    "alertChannelId": {
                        "type": "number"
                    },
                    "activated": {
                        "type": "boolean",
                        "default": true
                    }
                },
                "required": [
                    "alertChannelId",
                    "activated"
                ]
            },
            "AlertChannelSubscriptionCreateList": {
                "type": "array",
                "description": "List of alert channel subscriptions.",
                "items": {
                    "$ref": "#/components/schemas/Model29"
                }
            },
            "runtimeId": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute checks in this group.",
                "example": "null",
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "privateLocations": {
                "type": "array",
                "description": "An array of one or more private locations where to run the check.",
                "example": [
                    "data-center-eu"
                ],
                "items": {
                    "type": "string"
                }
            },
            "Model30": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                    "FIXED",
                    "LINEAR",
                    "EXPONENTIAL",
                    "SINGLE_RETRY"
                ]
            },
            "Model31": {
                "type": "string",
                "description": "The HTTP request could not be completed due to a network error: no response status code was received",
                "enum": [
                    "NETWORK_ERROR"
                ]
            },
            "onlyOn": {
                "type": "array",
                "x-constraint": {
                    "length": 1,
                    "unique": true,
                    "single": true
                },
                "items": {
                    "$ref": "#/components/schemas/Model31"
                }
            },
            "RetryStrategy": {
                "type": "object",
                "description": "The strategy to determine how failed checks are retried.",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/Model30"
                    },
                    "baseBackoffSeconds": {
                        "type": "number",
                        "description": "The number of seconds to wait before the first retry attempt.",
                        "default": 60
                    },
                    "sameRegion": {
                        "type": "boolean",
                        "description": "Whether retries should be run in the same region as the initial check run.",
                        "default": true
                    },
                    "maxRetries": {
                        "type": "number",
                        "description": "The maximum number of attempts to retry the check. Not supported for SINGLE_RETRY",
                        "minimum": 1,
                        "maximum": 10
                    },
                    "maxDurationSeconds": {
                        "type": "number",
                        "description": "The total amount of time to continue retrying the check. Not supported for SINGLE_RETRY",
                        "minimum": 0,
                        "maximum": 600
                    },
                    "onlyOn": {
                        "$ref": "#/components/schemas/onlyOn"
                    }
                },
                "required": [
                    "type"
                ]
            },
            "CheckGroup": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the check group.",
                        "example": "Check group"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the checks in the  group are running or not."
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check in this group fails and/or recovers."
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckGroupTagList"
                    },
                    "locations": {
                        "$ref": "#/components/schemas/CheckGroupLocationList"
                    },
                    "concurrency": {
                        "type": "number",
                        "description": "Determines how many checks are invoked concurrently when triggering a check group from CI/CD or through the API.",
                        "default": 3,
                        "minimum": 1,
                        "x-constraint": {
                            "sign": "positive"
                        }
                    },
                    "apiCheckDefaults": {
                        "$ref": "#/components/schemas/CheckGroupAPICheckDefaults"
                    },
                    "browserCheckDefaults": {
                        "type": "string"
                    },
                    "environmentVariables": {
                        "$ref": "#/components/schemas/EnvironmentVariableList"
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead."
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check group."
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/CheckGroupAlertSettings"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/AlertChannelSubscriptionCreateList"
                    },
                    "setupSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the setup phase of an API check in this group.",
                        "example": "null"
                    },
                    "tearDownSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the teardown phase of an API check in this group.",
                        "example": "null"
                    },
                    "localSetupScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.",
                        "example": "null"
                    },
                    "localTearDownScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.",
                        "example": "null"
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/runtimeId"
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/privateLocations"
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/RetryStrategy"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the checks in the group will run in parallel in all selected locations.",
                        "default": false
                    }
                },
                "required": [
                    "name",
                    "activated",
                    "concurrency",
                    "apiCheckDefaults"
                ]
            },
            "CheckGroupList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CheckGroup"
                }
            },
            "Model32": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model33": {
                "type": "array",
                "description": "An array of one or more data center locations where to run the checks.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model32"
                }
            },
            "CheckGroupCreateAPICheckDefaults": {
                "type": "object",
                "example": {
                    "url": "https://api.example.com/v1",
                    "headers": [
                        {
                            "key": "Cache-Control",
                            "value": "no-store"
                        }
                    ],
                    "queryParameters": [
                        {
                            "key": "Page",
                            "value": "1"
                        }
                    ],
                    "assertions": [
                        {
                            "source": "STATUS_CODE",
                            "comparison": "NOT_EMPTY",
                            "target": "200"
                        }
                    ],
                    "basicAuth": {
                        "username": "admin",
                        "password": "abc12345"
                    }
                },
                "default": {},
                "properties": {
                    "url": {
                        "type": "string",
                        "description": "The base url for this group which you can reference with the {{GROUP_BASE_URL}} variable in all group checks.",
                        "example": "https://api.example.com/v1",
                        "default": ""
                    },
                    "headers": {
                        "$ref": "#/components/schemas/HeaderList"
                    },
                    "queryParameters": {
                        "$ref": "#/components/schemas/QueryParameterList"
                    },
                    "assertions": {
                        "$ref": "#/components/schemas/AssertionList"
                    },
                    "basicAuth": {
                        "$ref": "#/components/schemas/BasicAuth"
                    }
                }
            },
            "Model34": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute checks in this group.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "EnvironmentVariableUpdate": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The key of the environment variable (this value cannot be changed).",
                        "example": "API_KEY"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the environment variable.",
                        "example": "bAxD7biGCZL6K60Q"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Used only in the UI to hide the value like a password.",
                        "default": false
                    },
                    "secret": {
                        "type": "boolean",
                        "description": "Set an environment variable as secret. Once set, its value cannot be unlocked.",
                        "default": false
                    }
                },
                "required": [
                    "value"
                ]
            },
            "environmentVariables": {
                "type": "array",
                "maxItems": 50,
                "items": {
                    "$ref": "#/components/schemas/EnvironmentVariableUpdate"
                }
            },
            "AlertSettings": {
                "type": "object",
                "description": "Alert settings.",
                "default": {
                    "escalationType": "RUN_BASED",
                    "runBasedEscalation": {
                        "failedRunThreshold": 1
                    },
                    "reminders": {
                        "amount": 0,
                        "interval": 5
                    },
                    "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                    }
                },
                "properties": {
                    "escalationType": {
                        "$ref": "#/components/schemas/escalationType"
                    },
                    "reminders": {
                        "$ref": "#/components/schemas/AlertSettingsReminders"
                    },
                    "sslCertificates": {
                        "$ref": "#/components/schemas/AlertSettingsSSLCertificates"
                    },
                    "runBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsRunBasedEscalation"
                    },
                    "timeBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsTimeBasedEscalation"
                    },
                    "parallelRunFailureThreshold": {
                        "$ref": "#/components/schemas/parallelRunFailureThreshold"
                    }
                }
            },
            "Model35": {
                "type": "array",
                "description": "List of alert channel subscriptions.",
                "example": [],
                "items": {
                    "$ref": "#/components/schemas/Model29"
                }
            },
            "Model36": {
                "type": "array",
                "description": "An array of one or more private locations where to run the checks.",
                "example": [
                    "data-center-eu"
                ],
                "items": {
                    "type": "string"
                }
            },
            "CheckGroupCreate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the check group.",
                        "example": "Check group"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the checks in the group are running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check in this group fails and/or recovers.",
                        "default": false
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckGroupTagList"
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model33"
                    },
                    "concurrency": {
                        "type": "number",
                        "description": "Determines how many checks are invoked concurrently when triggering a check group from CI/CD or through the API.",
                        "default": 3,
                        "minimum": 1,
                        "x-constraint": {
                            "sign": "positive"
                        }
                    },
                    "apiCheckDefaults": {
                        "$ref": "#/components/schemas/CheckGroupCreateAPICheckDefaults"
                    },
                    "browserCheckDefaults": {
                        "type": "string"
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model34"
                    },
                    "environmentVariables": {
                        "$ref": "#/components/schemas/environmentVariables"
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check group.",
                        "default": true
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/AlertSettings"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/Model35"
                    },
                    "setupSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the setup phase of an API check in this group.",
                        "example": "null",
                        "default": null
                    },
                    "tearDownSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the teardown phase of an API check in this group.",
                        "example": "null",
                        "default": null
                    },
                    "localSetupScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.",
                        "example": "null",
                        "default": null
                    },
                    "localTearDownScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.",
                        "example": "null",
                        "default": null
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/Model36"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the checks in the group will run in parallel in all selected locations.",
                        "default": false
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/RetryStrategy"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CheckGroupCheck": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/checkType"
                    }
                },
                "required": [
                    "checkType"
                ]
            },
            "Model37": {
                "type": "string",
                "enum": [
                    "Conflict"
                ]
            },
            "ConflictError": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "enum": [
                            409
                        ]
                    },
                    "error": {
                        "$ref": "#/components/schemas/Model37"
                    },
                    "message": {
                        "type": "string",
                        "example": "Conflict"
                    }
                },
                "required": [
                    "statusCode",
                    "error"
                ]
            },
            "Model38": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model39": {
                "type": "array",
                "description": "An array of one or more data center locations where to run the checks.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model38"
                }
            },
            "Model40": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute checks in this group.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model41": {
                "type": "object",
                "description": "Alert settings.",
                "default": {
                    "escalationType": "RUN_BASED",
                    "runBasedEscalation": {
                        "failedRunThreshold": 1
                    },
                    "reminders": {
                        "amount": 0,
                        "interval": 5
                    },
                    "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                    }
                },
                "properties": {
                    "escalationType": {
                        "$ref": "#/components/schemas/escalationType"
                    },
                    "reminders": {
                        "$ref": "#/components/schemas/AlertSettingsReminders"
                    },
                    "sslCertificates": {
                        "$ref": "#/components/schemas/AlertSettingsSSLCertificates"
                    },
                    "runBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsRunBasedEscalation"
                    },
                    "timeBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsTimeBasedEscalation"
                    },
                    "parallelRunFailureThreshold": {
                        "$ref": "#/components/schemas/parallelRunFailureThreshold"
                    }
                }
            },
            "Model42": {
                "type": "array",
                "description": "List of alert channel subscriptions.",
                "example": [],
                "items": {
                    "$ref": "#/components/schemas/Model29"
                }
            },
            "Model43": {
                "type": "array",
                "description": "An array of one or more private locations where to run the checks.",
                "example": [
                    "data-center-eu"
                ],
                "items": {
                    "type": "string"
                }
            },
            "CheckGroupUpdate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the check group.",
                        "example": "Check group"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the checks in the group are running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check in this group fails and/or recovers.",
                        "default": false
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckGroupTagList"
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model39"
                    },
                    "concurrency": {
                        "type": "number",
                        "description": "Determines how many checks are invoked concurrently when triggering a check group from CI/CD or through the API.",
                        "default": 3,
                        "minimum": 1,
                        "x-constraint": {
                            "sign": "positive"
                        }
                    },
                    "apiCheckDefaults": {
                        "$ref": "#/components/schemas/CheckGroupCreateAPICheckDefaults"
                    },
                    "browserCheckDefaults": {
                        "type": "string"
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model40"
                    },
                    "environmentVariables": {
                        "$ref": "#/components/schemas/environmentVariables"
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check group.",
                        "default": true
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/Model41"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/Model42"
                    },
                    "setupSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the setup phase of an API check in this group.",
                        "example": "null",
                        "default": null
                    },
                    "tearDownSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the teardown phase of an API check in this group.",
                        "example": "null",
                        "default": null
                    },
                    "localSetupScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.",
                        "example": "null",
                        "default": null
                    },
                    "localTearDownScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.",
                        "example": "null",
                        "default": null
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/Model43"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the checks in the group will run in parallel in all selected locations.",
                        "default": false
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/RetryStrategy"
                    }
                }
            },
            "Model44": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CheckGroupCheck"
                }
            },
            "assertions": {
                "type": "array",
                "description": "List of API check assertions.",
                "example": [
                    {
                        "source": "STATUS_CODE",
                        "target": 200
                    }
                ],
                "items": {
                    "type": "string"
                }
            },
            "headers": {
                "type": "object"
            },
            "params": {
                "type": "object"
            },
            "request": {
                "type": "object",
                "description": "The request for the API.",
                "properties": {
                    "method": {
                        "type": "string",
                        "example": "GET"
                    },
                    "url": {
                        "type": "string",
                        "example": "https://api.checklyhq.com"
                    },
                    "data": {
                        "type": "string",
                        "example": ""
                    },
                    "headers": {
                        "$ref": "#/components/schemas/headers"
                    },
                    "params": {
                        "$ref": "#/components/schemas/params"
                    }
                }
            },
            "timings": {
                "type": "object"
            },
            "timingPhases": {
                "type": "object"
            },
            "response": {
                "type": "object",
                "description": "The API response.",
                "properties": {
                    "status": {
                        "type": "number",
                        "example": 200
                    },
                    "statusText": {
                        "type": "string",
                        "example": "OK"
                    },
                    "body": {
                        "type": "string",
                        "example": "<title> Checkly Public API </title>"
                    },
                    "headers": {
                        "$ref": "#/components/schemas/headers"
                    },
                    "timings": {
                        "$ref": "#/components/schemas/timings"
                    },
                    "timingPhases": {
                        "$ref": "#/components/schemas/timingPhases"
                    }
                }
            },
            "jobLog": {
                "type": "object",
                "description": "Check run log results."
            },
            "jobAssets": {
                "type": "array",
                "description": "Assets generated from the check run.",
                "example": "null",
                "items": {
                    "type": "string"
                }
            },
            "CheckResultAPI": {
                "type": "object",
                "description": "The response data for an API check.",
                "properties": {
                    "assertions": {
                        "$ref": "#/components/schemas/assertions"
                    },
                    "request": {
                        "$ref": "#/components/schemas/request"
                    },
                    "response": {
                        "$ref": "#/components/schemas/response"
                    },
                    "requestError": {
                        "type": "string",
                        "description": "Describes if an error occurred on the request.",
                        "example": "null"
                    },
                    "jobLog": {
                        "$ref": "#/components/schemas/jobLog"
                    },
                    "jobAssets": {
                        "$ref": "#/components/schemas/jobAssets"
                    }
                }
            },
            "traceSummary": {
                "type": "object",
                "description": "The summary of errors in the check run."
            },
            "pages": {
                "type": "array",
                "description": "List of pages used on the check run.",
                "example": [
                    {
                        "url": "https://www.checklyhq.com/",
                        "webVitals": {
                            "CLS": {
                                "score": "GOOD",
                                "value": 0.000146484375
                            }
                        }
                    }
                ],
                "items": {
                    "type": "string"
                }
            },
            "playwrightTestVideos": {
                "type": "array",
                "description": "List of Playwright Test videos.",
                "example": [
                    "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/visit-page-and-take-screenshot-1675691043856.webm"
                ],
                "items": {
                    "type": "string"
                }
            },
            "errors": {
                "type": "array",
                "description": "List of errors on the check run.",
                "example": [],
                "items": {
                    "type": "string"
                }
            },
            "Model45": {
                "type": "array",
                "description": "Check run log results.",
                "example": {
                    "time": 1648573423995,
                    "msg": "Starting job",
                    "level": "DEBUG"
                },
                "items": {
                    "type": "string"
                }
            },
            "playwrightTestTraces": {
                "type": "array",
                "description": "List of Playwright Test traces.",
                "example": [
                    "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/visit-page-and-take-screenshot.zip"
                ],
                "items": {
                    "type": "string"
                }
            },
            "CheckResultBrowser": {
                "type": "object",
                "description": "The response data for a browser check.",
                "example": "null",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The type of framework the check is using.",
                        "example": "PLAYWRIGHT"
                    },
                    "traceSummary": {
                        "$ref": "#/components/schemas/traceSummary"
                    },
                    "pages": {
                        "$ref": "#/components/schemas/pages"
                    },
                    "playwrightTestVideos": {
                        "$ref": "#/components/schemas/playwrightTestVideos"
                    },
                    "errors": {
                        "$ref": "#/components/schemas/errors"
                    },
                    "endTime": {
                        "type": "number",
                        "description": "End time of the check run.",
                        "example": 1648573423995
                    },
                    "startTime": {
                        "type": "number",
                        "description": "Start time of the check run.",
                        "example": 1648573423994
                    },
                    "runtimeVersion": {
                        "type": "string",
                        "description": "Active runtime version.",
                        "example": "2023.09"
                    },
                    "jobLog": {
                        "$ref": "#/components/schemas/Model45"
                    },
                    "jobAssets": {
                        "$ref": "#/components/schemas/jobAssets"
                    },
                    "playwrightTestTraces": {
                        "$ref": "#/components/schemas/playwrightTestTraces"
                    },
                    "playwrightTestJsonReportFile": {
                        "type": "string",
                        "description": "Playwright Test JSON report.",
                        "example": "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/report.json"
                    }
                }
            },
            "Model46": {
                "type": "array",
                "description": "Check run log results.",
                "example": {
                    "time": 1648573423995,
                    "msg": "Starting job",
                    "level": "DEBUG"
                },
                "items": {
                    "type": "string"
                }
            },
            "MultiStepResultBrowser": {
                "type": "object",
                "description": "The response data for a multi-step check.",
                "example": "null",
                "properties": {
                    "errors": {
                        "$ref": "#/components/schemas/errors"
                    },
                    "endTime": {
                        "type": "number",
                        "description": "End time of the check run.",
                        "example": 1648573423995
                    },
                    "startTime": {
                        "type": "number",
                        "description": "Start time of the check run.",
                        "example": 1648573423994
                    },
                    "runtimeVersion": {
                        "type": "string",
                        "description": "Active runtime version.",
                        "example": "2023.09"
                    },
                    "jobLog": {
                        "$ref": "#/components/schemas/Model46"
                    },
                    "jobAssets": {
                        "$ref": "#/components/schemas/jobAssets"
                    },
                    "playwrightTestTraces": {
                        "$ref": "#/components/schemas/playwrightTestTraces"
                    },
                    "playwrightTestJsonReportFile": {
                        "type": "string",
                        "description": "Playwright Test JSON report.",
                        "example": "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/report.json"
                    }
                }
            },
            "resultType": {
                "type": "string",
                "description": "The type of result. FINAL means this is the final result of the check run. ATTEMPT means this is a result of a double check attempt.",
                "example": "FINAL",
                "default": "FINAL",
                "enum": [
                    "FINAL",
                    "ATTEMPT",
                    "ALL"
                ]
            },
            "CheckResult": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique ID of this result."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the check."
                    },
                    "checkId": {
                        "type": "string",
                        "description": "The ID of the check."
                    },
                    "hasFailures": {
                        "type": "boolean",
                        "description": "Describes if any failure has occurred during this check run. This is should be your mainmain focus for assessing API or browser check behaviour. Assertions that fail, timeouts or failing scripts all resolve tothis value being true."
                    },
                    "hasErrors": {
                        "type": "boolean",
                        "description": "Describes if an internal error has occured in Checkly's backend. This should be false in almost all cases."
                    },
                    "isDegraded": {
                        "type": "boolean",
                        "description": "A check is degraded if it is over the degradation limit set by the \"degradedResponseTime\" field on the check. Applies only to API checks."
                    },
                    "overMaxResponseTime": {
                        "type": "boolean",
                        "description": "Set to true if the response time is over the limit set by the \"maxResponseTime\" field on the check. Applies only to API checks."
                    },
                    "runLocation": {
                        "type": "string",
                        "description": "What data center location this check result originated from."
                    },
                    "startedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "stoppedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "responseTime": {
                        "type": "number",
                        "description": "Describes the time it took to execute relevant parts of this check. Any setup timeor system time needed to start executing this check in the Checkly backend is not part of this."
                    },
                    "apiCheckResult": {
                        "$ref": "#/components/schemas/CheckResultAPI"
                    },
                    "browserCheckResult": {
                        "$ref": "#/components/schemas/CheckResultBrowser"
                    },
                    "multiStepCheckResult": {
                        "$ref": "#/components/schemas/MultiStepResultBrowser"
                    },
                    "checkRunId": {
                        "type": "number",
                        "description": "The id of the specific check run that created this check result."
                    },
                    "attempts": {
                        "type": "number",
                        "description": "How often this check was retried. This will be larger than 0 when double checking is enabled."
                    },
                    "resultType": {
                        "$ref": "#/components/schemas/resultType"
                    },
                    "sequenceId": {
                        "type": "string",
                        "description": "The sequence ID of the check run. This is used to group check runs with multiple attempts together.",
                        "example": "2dbfa2a3-5477-45ea-ac33-ee55b8ea66ff",
                        "x-format": {
                            "guid": true
                        }
                    }
                },
                "required": [
                    "resultType"
                ]
            },
            "CheckResultList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CheckResult"
                }
            },
            "Model47": {
                "type": "array",
                "x-constraint": {
                    "single": true
                },
                "items": {
                    "type": "string"
                }
            },
            "matchTags": {
                "type": "array",
                "description": "Match checks with the given tags. Group tags also match.\n\nThe value is a two-dimensional array. The top level array defines `OR` conditions, and the second level `AND` conditions. Tags can also be prefixed with `!` to only match checks without those tags.\n\nExample: `[[a, b], [a, c, !d]]` means `(a && b) || (a && c && !d)`.",
                "example": [
                    [
                        "production",
                        "!skip-e2e"
                    ]
                ],
                "items": {
                    "$ref": "#/components/schemas/Model47"
                }
            },
            "checkId": {
                "type": "array",
                "description": "Match checks with the given identifiers.",
                "example": [
                    "a4cd4ad9-4815-4a9e-92d2-0a7c562ee69a"
                ],
                "x-constraint": {
                    "single": true
                },
                "items": {
                    "type": "string",
                    "x-format": {
                        "guid": true
                    }
                }
            },
            "TriggerCheckSessionTarget": {
                "type": "object",
                "properties": {
                    "matchTags": {
                        "$ref": "#/components/schemas/matchTags"
                    },
                    "checkId": {
                        "$ref": "#/components/schemas/checkId"
                    }
                }
            },
            "TriggerCheckSessionRequestPayload": {
                "type": "object",
                "properties": {
                    "target": {
                        "$ref": "#/components/schemas/TriggerCheckSessionTarget"
                    }
                }
            },
            "Model48": {
                "type": "string",
                "example": "API",
                "enum": [
                    "API",
                    "BROWSER",
                    "MULTI_STEP",
                    "TCP",
                    "PLAYWRIGHT",
                    "URL",
                    "DNS"
                ]
            },
            "Model49": {
                "type": "string",
                "description": "The status of the check session.",
                "example": "PASSED",
                "enum": [
                    "STARTED",
                    "PROGRESS",
                    "FAILED",
                    "PASSED",
                    "DEGRADED",
                    "PROGRESS_FAILED",
                    "PROGRESS_DEGRADED",
                    "TIMED_OUT"
                ]
            },
            "runLocations": {
                "type": "array",
                "description": "The run locations of the check session.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "type": "string"
                }
            },
            "CheckSession": {
                "type": "object",
                "properties": {
                    "checkSessionId": {
                        "type": "string",
                        "description": "The unique identifier of the check session.",
                        "example": "8166fa86-c9b4-4162-8541-d380c6c212d8",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "checkSessionLink": {
                        "type": "string",
                        "description": "A link to the check session.",
                        "example": "https://app.checklyhq.com/accounts/1397c172-1938-4973-a225-5862298e571a/checks/a4cd4ad9-4815-4a9e-92d2-0a7c562ee69a/check-sessions/8166fa86-c9b4-4162-8541-d380c6c212d8",
                        "x-format": {
                            "uri": true
                        }
                    },
                    "checkId": {
                        "type": "string",
                        "description": "The ID of the check.",
                        "example": "a4cd4ad9-4815-4a9e-92d2-0a7c562ee69a",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model48"
                    },
                    "name": {
                        "type": "string",
                        "example": "Example API Check"
                    },
                    "status": {
                        "$ref": "#/components/schemas/Model49"
                    },
                    "startedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the session started.",
                        "example": "2025-08-28T18:23:40.262Z"
                    },
                    "stoppedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the session stopped.",
                        "example": "2025-08-28T18:28:40.993Z"
                    },
                    "timeElapsed": {
                        "type": "number",
                        "description": "The time the check session took, in milliseconds.",
                        "example": 300731
                    },
                    "runLocations": {
                        "$ref": "#/components/schemas/runLocations"
                    }
                },
                "required": [
                    "checkSessionId",
                    "checkSessionLink",
                    "checkId",
                    "checkType",
                    "status",
                    "startedAt",
                    "timeElapsed",
                    "runLocations"
                ]
            },
            "sessions": {
                "type": "array",
                "description": "A list of check sessions, with one check session for each check.",
                "items": {
                    "$ref": "#/components/schemas/CheckSession"
                }
            },
            "TriggerCheckSessionResponse": {
                "type": "object",
                "description": "Returns a check session for each check matching target conditions.",
                "properties": {
                    "sessions": {
                        "$ref": "#/components/schemas/sessions"
                    }
                },
                "required": [
                    "sessions"
                ]
            },
            "NoMatchingChecksFoundErrorResponse": {
                "type": "object",
                "description": "Returned when there are no matching checks.",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "enum": [
                            404
                        ]
                    },
                    "error": {
                        "type": "string",
                        "example": "Not Found"
                    },
                    "message": {
                        "type": "string",
                        "example": "No matching checks were found."
                    }
                },
                "required": [
                    "statusCode"
                ]
            },
            "Model50": {
                "type": "string",
                "example": "API",
                "enum": [
                    "API",
                    "BROWSER",
                    "MULTI_STEP",
                    "TCP",
                    "PLAYWRIGHT",
                    "URL",
                    "DNS"
                ]
            },
            "Model51": {
                "type": "string",
                "description": "The status of the check session.",
                "example": "PASSED",
                "enum": [
                    "STARTED",
                    "PROGRESS",
                    "FAILED",
                    "PASSED",
                    "DEGRADED",
                    "PROGRESS_FAILED",
                    "PROGRESS_DEGRADED",
                    "TIMED_OUT"
                ]
            },
            "Model52": {
                "type": "string",
                "example": "API",
                "enum": [
                    "API",
                    "BROWSER",
                    "MULTI_STEP",
                    "TCP",
                    "PLAYWRIGHT",
                    "URL",
                    "DNS"
                ]
            },
            "Model53": {
                "type": "string",
                "description": "The type of the result.",
                "example": "FINAL",
                "enum": [
                    "FINAL",
                    "ATTEMPT",
                    "ALL"
                ]
            },
            "CheckSessionConciseCheckResult": {
                "type": "object",
                "properties": {
                    "checkResultId": {
                        "type": "string",
                        "description": "The ID of the check result.",
                        "example": "22be3b52-5ec2-4894-9086-b5b4a8b00a89",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "checkResultLink": {
                        "type": "string",
                        "description": "A link to the check result.",
                        "example": "https://app.checklyhq.com/accounts/1397c172-1938-4973-a225-5862298e571a/checks/a4cd4ad9-4815-4a9e-92d2-0a7c562ee69a/check-sessions/8166fa86-c9b4-4162-8541-d380c6c212d8/results/22be3b52-5ec2-4894-9086-b5b4a8b00a89",
                        "x-format": {
                            "uri": true
                        }
                    },
                    "checkId": {
                        "type": "string",
                        "description": "The ID of the check.",
                        "example": "a4cd4ad9-4815-4a9e-92d2-0a7c562ee69a",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model52"
                    },
                    "name": {
                        "type": "string",
                        "example": "Example API Check"
                    },
                    "runLocation": {
                        "type": "string",
                        "description": "The location where the check ran.",
                        "example": "us-east-1"
                    },
                    "resultType": {
                        "$ref": "#/components/schemas/Model53"
                    },
                    "hasErrors": {
                        "type": "boolean",
                        "description": "Whether the result has errors.",
                        "example": false
                    },
                    "hasFailures": {
                        "type": "boolean",
                        "description": "Whether the result has failures.",
                        "example": false
                    },
                    "isDegraded": {
                        "type": "boolean",
                        "description": "Whether the result is degraded.",
                        "example": false
                    },
                    "aborted": {
                        "type": "boolean",
                        "description": "Whether the check was aborted.",
                        "example": false
                    }
                },
                "required": [
                    "checkResultId",
                    "checkResultLink",
                    "checkId",
                    "checkType",
                    "runLocation",
                    "resultType",
                    "hasErrors",
                    "hasFailures",
                    "isDegraded",
                    "aborted"
                ]
            },
            "results": {
                "type": "array",
                "description": "The results of the check session. Only partial results are available until the check session has completed.",
                "items": {
                    "$ref": "#/components/schemas/CheckSessionConciseCheckResult"
                }
            },
            "FindOneCheckSessionResponse": {
                "type": "object",
                "description": "The current state of the check session.",
                "properties": {
                    "checkSessionId": {
                        "type": "string",
                        "description": "The unique identifier of the check session.",
                        "example": "8166fa86-c9b4-4162-8541-d380c6c212d8",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "checkSessionLink": {
                        "type": "string",
                        "description": "A link to the check session.",
                        "example": "https://app.checklyhq.com/accounts/1397c172-1938-4973-a225-5862298e571a/checks/a4cd4ad9-4815-4a9e-92d2-0a7c562ee69a/check-sessions/8166fa86-c9b4-4162-8541-d380c6c212d8",
                        "x-format": {
                            "uri": true
                        }
                    },
                    "checkId": {
                        "type": "string",
                        "description": "The ID of the check.",
                        "example": "a4cd4ad9-4815-4a9e-92d2-0a7c562ee69a",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model50"
                    },
                    "name": {
                        "type": "string",
                        "example": "Example API Check"
                    },
                    "status": {
                        "$ref": "#/components/schemas/Model51"
                    },
                    "startedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the session started.",
                        "example": "2025-08-28T18:23:40.262Z"
                    },
                    "stoppedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the session stopped.",
                        "example": "2025-08-28T18:28:40.993Z"
                    },
                    "timeElapsed": {
                        "type": "number",
                        "description": "The time the check session took, in milliseconds.",
                        "example": 300731
                    },
                    "runLocations": {
                        "$ref": "#/components/schemas/runLocations"
                    },
                    "results": {
                        "$ref": "#/components/schemas/results"
                    }
                },
                "required": [
                    "checkSessionId",
                    "checkSessionLink",
                    "checkId",
                    "checkType",
                    "status",
                    "startedAt",
                    "timeElapsed",
                    "runLocations"
                ]
            },
            "CheckSessionNotFoundErrorResponse": {
                "type": "object",
                "description": "No such check session exists.",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "enum": [
                            404
                        ]
                    },
                    "error": {
                        "type": "string",
                        "example": "Not Found"
                    },
                    "message": {
                        "type": "string",
                        "example": "No such check session."
                    }
                },
                "required": [
                    "statusCode"
                ]
            },
            "Model54": {
                "type": "string",
                "example": "API",
                "enum": [
                    "API",
                    "BROWSER",
                    "MULTI_STEP",
                    "TCP",
                    "PLAYWRIGHT",
                    "URL",
                    "DNS"
                ]
            },
            "Model55": {
                "type": "string",
                "description": "The final status of the check session.",
                "example": "PASSED",
                "enum": [
                    "FAILED",
                    "PASSED",
                    "DEGRADED",
                    "TIMED_OUT"
                ]
            },
            "Model56": {
                "type": "array",
                "description": "The results of the check session.",
                "items": {
                    "$ref": "#/components/schemas/CheckSessionConciseCheckResult"
                }
            },
            "AwaitCheckSessionCompletionResponse": {
                "type": "object",
                "description": "Returned when the check session has finished running.",
                "properties": {
                    "checkSessionId": {
                        "type": "string",
                        "description": "The unique identifier of the check session.",
                        "example": "8166fa86-c9b4-4162-8541-d380c6c212d8",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "checkSessionLink": {
                        "type": "string",
                        "description": "A link to the check session.",
                        "example": "https://app.checklyhq.com/accounts/1397c172-1938-4973-a225-5862298e571a/checks/a4cd4ad9-4815-4a9e-92d2-0a7c562ee69a/check-sessions/8166fa86-c9b4-4162-8541-d380c6c212d8",
                        "x-format": {
                            "uri": true
                        }
                    },
                    "checkId": {
                        "type": "string",
                        "description": "The ID of the check.",
                        "example": "a4cd4ad9-4815-4a9e-92d2-0a7c562ee69a",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model54"
                    },
                    "name": {
                        "type": "string",
                        "example": "Example API Check"
                    },
                    "status": {
                        "$ref": "#/components/schemas/Model55"
                    },
                    "startedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the session started.",
                        "example": "2025-08-28T18:23:40.262Z"
                    },
                    "stoppedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the session stopped.",
                        "example": "2025-08-28T18:28:40.993Z"
                    },
                    "timeElapsed": {
                        "type": "number",
                        "description": "The time the check session took, in milliseconds.",
                        "example": 300731
                    },
                    "runLocations": {
                        "$ref": "#/components/schemas/runLocations"
                    },
                    "results": {
                        "$ref": "#/components/schemas/Model56"
                    }
                },
                "required": [
                    "checkSessionId",
                    "checkSessionLink",
                    "checkId",
                    "checkType",
                    "status",
                    "startedAt",
                    "stoppedAt",
                    "timeElapsed",
                    "runLocations"
                ]
            },
            "AwaitCheckSessionCompletionTryAgainResponse": {
                "type": "object",
                "description": "The check session is still pending, but the server requests a quick break. You should call the endpoint again. Optionally, try to respect the `Retry-After` header.\n\nThis error code is one of the transient error codes supported by *curl*'s `--retry` option.",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "enum": [
                            408
                        ]
                    },
                    "error": {
                        "type": "string",
                        "example": "Request Time-out"
                    },
                    "message": {
                        "type": "string",
                        "example": "Check session is still in progress, but maximum per-request wait time was exceeded. Please retry."
                    }
                },
                "required": [
                    "statusCode"
                ]
            },
            "CheckStatus": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "API Check"
                    },
                    "checkId": {
                        "type": "string",
                        "description": "The ID of check this status belongs to.",
                        "example": "1008ca04-d3ca-41fa-b477-9e99b761dbb4"
                    },
                    "hasFailures": {
                        "type": "boolean",
                        "description": "Describes if this check is currently failing. If any of the assertions for an API checkfail this value is true. If a browser check fails for whatever reason, this is true.",
                        "example": false
                    },
                    "hasErrors": {
                        "type": "boolean",
                        "description": "Describes if due to some error outside of normal operation this check is failing. This should be extremely rare and only when there is an error in the Checkly backend.",
                        "example": false
                    },
                    "isDegraded": {
                        "type": "boolean",
                        "description": "A check is degraded if it is over the degradation limit set by the \"degradedResponseTime\" field on the check. Applies only to API checks.",
                        "example": true
                    },
                    "longestRun": {
                        "type": "number",
                        "description": "The longest ever recorded response time for this check.",
                        "example": 10
                    },
                    "shortestRun": {
                        "type": "number",
                        "description": "The shortest ever recorded response time for this check.",
                        "example": 5
                    },
                    "lastRunLocation": {
                        "type": "string",
                        "description": "What location this check was last run at.",
                        "example": "us-east-1"
                    },
                    "lastCheckRunId": {
                        "type": "string",
                        "description": "The unique incrementing ID for each check run.",
                        "example": "f10d711f-cd16-4303-91ce-741c92586b4a"
                    },
                    "sslDaysRemaining": {
                        "type": "number",
                        "description": "How many days remain till the current SSL certificate expires.",
                        "example": 3
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CheckStatusList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CheckStatus"
                }
            },
            "Check": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/checkType"
                    }
                },
                "required": [
                    "checkType"
                ]
            },
            "CheckList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Check"
                }
            },
            "Model57": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "CheckLocationList": {
                "type": "array",
                "description": "An array of one or more data center locations where to run this check.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model57"
                }
            },
            "CheckTagList": {
                "type": "array",
                "description": "Tags for organizing and filtering checks.",
                "example": [
                    "production"
                ],
                "items": {
                    "type": "string"
                }
            },
            "CheckAlertSettings": {
                "type": "object",
                "description": "Alert settings.",
                "default": {
                    "escalationType": "RUN_BASED",
                    "runBasedEscalation": {
                        "failedRunThreshold": 1
                    },
                    "reminders": {
                        "amount": 0,
                        "interval": 5
                    },
                    "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                    }
                },
                "properties": {
                    "escalationType": {
                        "$ref": "#/components/schemas/escalationType"
                    },
                    "reminders": {
                        "$ref": "#/components/schemas/AlertSettingsReminders"
                    },
                    "sslCertificates": {
                        "$ref": "#/components/schemas/AlertSettingsSSLCertificates"
                    },
                    "runBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsRunBasedEscalation"
                    },
                    "timeBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsTimeBasedEscalation"
                    },
                    "parallelRunFailureThreshold": {
                        "$ref": "#/components/schemas/parallelRunFailureThreshold"
                    }
                }
            },
            "Model58": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model59": {
                "type": "array",
                "description": "List of alert channel subscriptions.",
                "example": [],
                "items": {
                    "$ref": "#/components/schemas/Model29"
                }
            },
            "severity": {
                "type": "string",
                "description": "The severity level of the incident.",
                "enum": [
                    "CRITICAL",
                    "MAJOR",
                    "MEDIUM",
                    "MINOR"
                ]
            },
            "TriggerIncident": {
                "type": "object",
                "description": "Determines whether the check or monitor should create and resolve an incident based on its alert configuration. Useful for status page automation.",
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": "The status page service that the incident will be associated with.",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "severity": {
                        "$ref": "#/components/schemas/severity"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the incident."
                    },
                    "description": {
                        "type": "string",
                        "description": "A detailed description of the incident."
                    },
                    "notifySubscribers": {
                        "type": "boolean",
                        "description": "Whether to notify subscribers when the incident is triggered."
                    }
                },
                "required": [
                    "serviceId",
                    "severity",
                    "name",
                    "description",
                    "notifySubscribers"
                ]
            },
            "CheckRequest": {
                "type": "object"
            },
            "heartbeat": {
                "type": "object"
            },
            "EnvironmentVariable": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The key of the environment variable (this value cannot be changed).",
                        "example": "API_KEY"
                    },
                    "value": {
                        "type": "string"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Used only in the UI to hide the value like a password.",
                        "default": false
                    },
                    "secret": {
                        "type": "boolean",
                        "description": "Set an environment variable as secret. Once set, its value cannot be unlocked.",
                        "default": false
                    }
                },
                "required": [
                    "key",
                    "value"
                ]
            },
            "CheckEnvironmentVariableList": {
                "type": "array",
                "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for Browser checks. Use global environment variables whenever possible.",
                "maxItems": 50,
                "items": {
                    "$ref": "#/components/schemas/EnvironmentVariable"
                }
            },
            "Model60": {
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string",
                        "maxLength": 1000
                    },
                    "content": {
                        "type": "string"
                    }
                },
                "required": [
                    "path",
                    "content"
                ]
            },
            "dependencies": {
                "type": "array",
                "description": "An array of BCR dependency files.",
                "items": {
                    "$ref": "#/components/schemas/Model60"
                }
            },
            "CheckCreate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                        "default": false
                    },
                    "locations": {
                        "$ref": "#/components/schemas/CheckLocationList"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/CheckAlertSettings"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The id of the check group this check is part of.",
                        "example": "null",
                        "default": null
                    },
                    "groupOrder": {
                        "type": "number",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                        "example": "null",
                        "default": null,
                        "minimum": 0
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model58"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/Model59"
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/RetryStrategy"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/checkType"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check should run in minutes.",
                        "default": 10
                    },
                    "frequencyOffset": {
                        "type": "integer",
                        "description": "Used for setting seconds for check frequencies under 1 minutes (only for API checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
                        "minimum": 1
                    },
                    "request": {
                        "$ref": "#/components/schemas/CheckRequest"
                    },
                    "heartbeat": {
                        "$ref": "#/components/schemas/heartbeat"
                    },
                    "script": {
                        "type": "string"
                    },
                    "scriptPath": {
                        "type": "string",
                        "description": "Path of the script in the runtime."
                    },
                    "sslCheckDomain": {
                        "type": "string"
                    },
                    "environmentVariables": {
                        "$ref": "#/components/schemas/CheckEnvironmentVariableList"
                    },
                    "setupSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the setup phase of an API check.",
                        "default": null
                    },
                    "tearDownSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
                        "default": null
                    },
                    "localSetupScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the setup phase.",
                        "default": null
                    },
                    "localTearDownScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the teardown phase.",
                        "default": null
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/privateLocations"
                    },
                    "dependencies": {
                        "$ref": "#/components/schemas/dependencies"
                    }
                },
                "required": [
                    "name",
                    "checkType",
                    "heartbeat",
                    "script"
                ]
            },
            "Model61": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model62": {
                "type": "array",
                "description": "An array of one or more data center locations where to run this check.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model61"
                }
            },
            "Model63": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model64": {
                "type": "array",
                "description": "List of alert channel subscriptions.",
                "example": [],
                "items": {
                    "$ref": "#/components/schemas/Model29"
                }
            },
            "method": {
                "type": "string",
                "default": "GET",
                "enum": [
                    "GET",
                    "POST",
                    "PUT",
                    "HEAD",
                    "DELETE",
                    "PATCH"
                ]
            },
            "ipFamily": {
                "type": "string",
                "default": "IPv4",
                "enum": [
                    "IPv4",
                    "IPv6"
                ]
            },
            "bodyType": {
                "type": "string",
                "default": "NONE",
                "enum": [
                    "JSON",
                    "FORM",
                    "RAW",
                    "GRAPHQL",
                    "NONE"
                ]
            },
            "Model65": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/KeyValue"
                }
            },
            "Model66": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/KeyValue"
                }
            },
            "Request": {
                "type": "object",
                "description": "Determines the request that the check is going to run.",
                "properties": {
                    "method": {
                        "$ref": "#/components/schemas/method"
                    },
                    "url": {
                        "type": "string",
                        "default": "https://api.checklyhq.com",
                        "maxLength": 2048
                    },
                    "followRedirects": {
                        "type": "boolean"
                    },
                    "skipSSL": {
                        "type": "boolean",
                        "default": false
                    },
                    "ipFamily": {
                        "$ref": "#/components/schemas/ipFamily"
                    },
                    "body": {
                        "type": "string",
                        "default": ""
                    },
                    "bodyType": {
                        "$ref": "#/components/schemas/bodyType"
                    },
                    "headers": {
                        "$ref": "#/components/schemas/Model65"
                    },
                    "queryParameters": {
                        "$ref": "#/components/schemas/Model66"
                    },
                    "assertions": {
                        "$ref": "#/components/schemas/AssertionList"
                    },
                    "basicAuth": {
                        "$ref": "#/components/schemas/BasicAuth"
                    }
                },
                "required": [
                    "method",
                    "url"
                ]
            },
            "CheckAPICreate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                        "default": false
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model62"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/AlertSettings"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The id of the check group this check is part of.",
                        "example": "null",
                        "default": null
                    },
                    "groupOrder": {
                        "type": "number",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                        "example": "null",
                        "default": null,
                        "minimum": 0
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model63"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/Model64"
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/RetryStrategy"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "request": {
                        "$ref": "#/components/schemas/Request"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check should run in minutes.",
                        "default": 10,
                        "enum": [
                            0,
                            1,
                            2,
                            5,
                            10,
                            15,
                            30,
                            60,
                            120,
                            180,
                            360,
                            720,
                            1440
                        ]
                    },
                    "frequencyOffset": {
                        "type": "integer",
                        "description": "Used for setting seconds for check frequencies under 1 minutes (only for API & TCP checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
                        "minimum": 1
                    },
                    "degradedResponseTime": {
                        "type": "number",
                        "description": "The response time in milliseconds where a check should be considered degraded.",
                        "default": 5000,
                        "minimum": 0,
                        "maximum": 30000
                    },
                    "maxResponseTime": {
                        "type": "number",
                        "description": "The response time in milliseconds where a check should be considered failing.",
                        "default": 20000,
                        "minimum": 0,
                        "maximum": 30000
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/privateLocations"
                    },
                    "tearDownSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
                        "example": "null",
                        "default": null
                    },
                    "setupSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the setup phase of an API check.",
                        "example": "null",
                        "default": null
                    },
                    "localSetupScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the setup phase.",
                        "example": "",
                        "default": null
                    },
                    "localTearDownScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the teardown phase.",
                        "example": "",
                        "default": null
                    }
                },
                "required": [
                    "name",
                    "request"
                ]
            },
            "Model67": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model68": {
                "type": "array",
                "description": "An array of one or more data center locations where to run this check.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model67"
                }
            },
            "Model69": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "CheckAlertChannelSubscription": {
                "type": "object",
                "properties": {
                    "alertChannelId": {
                        "type": "number"
                    },
                    "activated": {
                        "type": "boolean",
                        "default": true
                    }
                },
                "required": [
                    "alertChannelId",
                    "activated"
                ]
            },
            "CheckAlertChannelSubscriptionList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CheckAlertChannelSubscription"
                }
            },
            "CheckAlertEmail": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "default": ""
                    }
                },
                "required": [
                    "address"
                ]
            },
            "CheckAlertEmailList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CheckAlertEmail"
                }
            },
            "Model70": {
                "type": "string",
                "default": "POST",
                "enum": [
                    "GET",
                    "POST",
                    "PUT",
                    "HEAD",
                    "DELETE",
                    "PATCH"
                ]
            },
            "Model71": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/KeyValue"
                }
            },
            "Model72": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/KeyValue"
                }
            },
            "CheckAlertWebhook": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "default": ""
                    },
                    "url": {
                        "type": "string",
                        "default": ""
                    },
                    "method": {
                        "$ref": "#/components/schemas/Model70"
                    },
                    "headers": {
                        "$ref": "#/components/schemas/Model71"
                    },
                    "queryParameters": {
                        "$ref": "#/components/schemas/Model72"
                    }
                },
                "required": [
                    "url"
                ]
            },
            "CheckAlertWebhookList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CheckAlertWebhook"
                }
            },
            "CheckAlertSlack": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "default": ""
                    }
                },
                "required": [
                    "url"
                ]
            },
            "CheckAlertSlackList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CheckAlertSlack"
                }
            },
            "CheckAlertSMS": {
                "type": "object",
                "properties": {
                    "number": {
                        "type": "string",
                        "example": "+549110000000",
                        "default": ""
                    },
                    "name": {
                        "type": "string",
                        "example": "SMS Alert"
                    }
                },
                "required": [
                    "number",
                    "name"
                ]
            },
            "CheckAlertSMSList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CheckAlertSMS"
                }
            },
            "CheckAlertChannels": {
                "type": "object",
                "properties": {
                    "email": {
                        "$ref": "#/components/schemas/CheckAlertEmailList"
                    },
                    "webhook": {
                        "$ref": "#/components/schemas/CheckAlertWebhookList"
                    },
                    "slack": {
                        "$ref": "#/components/schemas/CheckAlertSlackList"
                    },
                    "sms": {
                        "$ref": "#/components/schemas/CheckAlertSMSList"
                    }
                }
            },
            "Model73": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/KeyValue"
                }
            },
            "Model74": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/KeyValue"
                }
            },
            "Model75": {
                "type": "object",
                "description": "Determines the request that the check is going to run.",
                "properties": {
                    "method": {
                        "$ref": "#/components/schemas/method"
                    },
                    "url": {
                        "type": "string",
                        "default": "https://api.checklyhq.com",
                        "maxLength": 2048
                    },
                    "followRedirects": {
                        "type": "boolean"
                    },
                    "skipSSL": {
                        "type": "boolean",
                        "default": false
                    },
                    "ipFamily": {
                        "$ref": "#/components/schemas/ipFamily"
                    },
                    "body": {
                        "type": "string",
                        "default": ""
                    },
                    "bodyType": {
                        "$ref": "#/components/schemas/bodyType"
                    },
                    "headers": {
                        "$ref": "#/components/schemas/Model73"
                    },
                    "queryParameters": {
                        "$ref": "#/components/schemas/Model74"
                    },
                    "assertions": {
                        "$ref": "#/components/schemas/AssertionList"
                    },
                    "basicAuth": {
                        "$ref": "#/components/schemas/BasicAuth"
                    }
                },
                "required": [
                    "method",
                    "url"
                ]
            },
            "Model76": {
                "type": "string",
                "enum": [
                    "API"
                ]
            },
            "CheckAPI": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "2739d22d-086f-481d-a484-8b93ac84de61"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                        "default": false
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model68"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/CheckAlertSettings"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The id of the check group this check is part of.",
                        "example": "null",
                        "default": null
                    },
                    "groupOrder": {
                        "type": "number",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                        "example": "null",
                        "default": null,
                        "minimum": 0
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model69"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/CheckAlertChannelSubscriptionList"
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/RetryStrategy"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check should run in minutes.",
                        "default": 10,
                        "enum": [
                            0,
                            1,
                            2,
                            5,
                            10,
                            15,
                            30,
                            60,
                            120,
                            180,
                            360,
                            720,
                            1440
                        ]
                    },
                    "frequencyOffset": {
                        "type": "integer",
                        "description": "Used for setting seconds for check frequencies under 1 minutes (only for API & TCP checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
                        "minimum": 1
                    },
                    "degradedResponseTime": {
                        "type": "number"
                    },
                    "maxResponseTime": {
                        "type": "number"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "alertChannels": {
                        "$ref": "#/components/schemas/CheckAlertChannels"
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/privateLocations"
                    },
                    "request": {
                        "$ref": "#/components/schemas/Model75"
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model76"
                    },
                    "tearDownSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
                        "default": null
                    },
                    "setupSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the setup phase of an API check.",
                        "default": null
                    },
                    "localSetupScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the setup phase.",
                        "example": "",
                        "default": null
                    },
                    "localTearDownScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the teardown phase.",
                        "example": "",
                        "default": null
                    }
                },
                "required": [
                    "name"
                ]
            },
            "Model77": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model78": {
                "type": "array",
                "description": "An array of one or more data center locations where to run this check.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model77"
                }
            },
            "Model79": {
                "type": "object",
                "description": "Alert settings.",
                "default": {
                    "escalationType": "RUN_BASED",
                    "runBasedEscalation": {
                        "failedRunThreshold": 1
                    },
                    "reminders": {
                        "amount": 0,
                        "interval": 5
                    },
                    "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                    }
                },
                "properties": {
                    "escalationType": {
                        "$ref": "#/components/schemas/escalationType"
                    },
                    "reminders": {
                        "$ref": "#/components/schemas/AlertSettingsReminders"
                    },
                    "sslCertificates": {
                        "$ref": "#/components/schemas/AlertSettingsSSLCertificates"
                    },
                    "runBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsRunBasedEscalation"
                    },
                    "timeBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsTimeBasedEscalation"
                    },
                    "parallelRunFailureThreshold": {
                        "$ref": "#/components/schemas/parallelRunFailureThreshold"
                    }
                }
            },
            "Model80": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model81": {
                "type": "array",
                "description": "List of alert channel subscriptions.",
                "example": [],
                "items": {
                    "$ref": "#/components/schemas/Model29"
                }
            },
            "Model82": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                    "FIXED",
                    "LINEAR",
                    "EXPONENTIAL",
                    "SINGLE_RETRY"
                ]
            },
            "Model83": {
                "type": "string",
                "description": "The HTTP request could not be completed due to a network error: no response status code was received",
                "enum": [
                    "NETWORK_ERROR"
                ]
            },
            "Model84": {
                "type": "array",
                "x-constraint": {
                    "length": 1,
                    "unique": true,
                    "single": true
                },
                "items": {
                    "$ref": "#/components/schemas/Model83"
                }
            },
            "Model85": {
                "type": "object",
                "description": "The strategy to determine how failed checks are retried.",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/Model82"
                    },
                    "baseBackoffSeconds": {
                        "type": "number",
                        "description": "The number of seconds to wait before the first retry attempt.",
                        "default": 60
                    },
                    "sameRegion": {
                        "type": "boolean",
                        "description": "Whether retries should be run in the same region as the initial check run.",
                        "default": true
                    },
                    "maxRetries": {
                        "type": "number",
                        "description": "The maximum number of attempts to retry the check. Not supported for SINGLE_RETRY",
                        "minimum": 1,
                        "maximum": 10
                    },
                    "maxDurationSeconds": {
                        "type": "number",
                        "description": "The total amount of time to continue retrying the check. Not supported for SINGLE_RETRY",
                        "minimum": 0,
                        "maximum": 600
                    },
                    "onlyOn": {
                        "$ref": "#/components/schemas/Model84"
                    }
                },
                "required": [
                    "type"
                ]
            },
            "Model86": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/KeyValue"
                }
            },
            "Model87": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/KeyValue"
                }
            },
            "Model88": {
                "type": "object",
                "description": "Determines the request that the check is going to run.",
                "properties": {
                    "method": {
                        "$ref": "#/components/schemas/method"
                    },
                    "url": {
                        "type": "string",
                        "default": "https://api.checklyhq.com",
                        "maxLength": 2048
                    },
                    "followRedirects": {
                        "type": "boolean"
                    },
                    "skipSSL": {
                        "type": "boolean",
                        "default": false
                    },
                    "ipFamily": {
                        "$ref": "#/components/schemas/ipFamily"
                    },
                    "body": {
                        "type": "string",
                        "default": ""
                    },
                    "bodyType": {
                        "$ref": "#/components/schemas/bodyType"
                    },
                    "headers": {
                        "$ref": "#/components/schemas/Model86"
                    },
                    "queryParameters": {
                        "$ref": "#/components/schemas/Model87"
                    },
                    "assertions": {
                        "$ref": "#/components/schemas/AssertionList"
                    },
                    "basicAuth": {
                        "$ref": "#/components/schemas/BasicAuth"
                    }
                },
                "required": [
                    "method",
                    "url"
                ]
            },
            "CheckAPIUpdate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                        "default": false
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model78"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/Model79"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The id of the check group this check is part of.",
                        "example": "null",
                        "default": null
                    },
                    "groupOrder": {
                        "type": "number",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                        "example": "null",
                        "default": null,
                        "minimum": 0
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model80"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/Model81"
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/Model85"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "request": {
                        "$ref": "#/components/schemas/Model88"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check should run in minutes.",
                        "default": 10,
                        "enum": [
                            0,
                            1,
                            2,
                            5,
                            10,
                            15,
                            30,
                            60,
                            120,
                            180,
                            360,
                            720,
                            1440
                        ]
                    },
                    "frequencyOffset": {
                        "type": "integer",
                        "description": "Used for setting seconds for check frequencies under 1 minutes (only for API & TCP checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
                        "minimum": 1
                    },
                    "degradedResponseTime": {
                        "type": "number",
                        "description": "The response time in milliseconds where a check should be considered degraded.",
                        "default": 5000,
                        "minimum": 0,
                        "maximum": 30000
                    },
                    "maxResponseTime": {
                        "type": "number",
                        "description": "The response time in milliseconds where a check should be considered failing.",
                        "default": 20000,
                        "minimum": 0,
                        "maximum": 30000
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/privateLocations"
                    },
                    "tearDownSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
                        "example": "null",
                        "default": null
                    },
                    "setupSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the setup phase of an API check.",
                        "example": "null",
                        "default": null
                    },
                    "localSetupScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the setup phase.",
                        "example": "",
                        "default": null
                    },
                    "localTearDownScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the teardown phase.",
                        "example": "",
                        "default": null
                    }
                }
            },
            "Model89": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model90": {
                "type": "array",
                "description": "An array of one or more data center locations where to run this check.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model89"
                }
            },
            "Model91": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model92": {
                "type": "array",
                "description": "List of alert channel subscriptions.",
                "example": [],
                "items": {
                    "$ref": "#/components/schemas/Model29"
                }
            },
            "Model93": {
                "type": "array",
                "description": "Key/value pairs for setting environment variables during check execution. Use global environment variables whenever possible.",
                "example": [],
                "maxItems": 50,
                "items": {
                    "$ref": "#/components/schemas/EnvironmentVariable"
                }
            },
            "CheckBrowserCreate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                        "default": false
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model90"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/AlertSettings"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The id of the check group this check is part of.",
                        "example": "null",
                        "default": null
                    },
                    "groupOrder": {
                        "type": "number",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                        "example": "null",
                        "default": null,
                        "minimum": 0
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model91"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/Model92"
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/RetryStrategy"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "environmentVariables": {
                        "$ref": "#/components/schemas/Model93"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check should run in minutes.",
                        "default": 10,
                        "enum": [
                            1,
                            2,
                            5,
                            10,
                            15,
                            30,
                            60,
                            120,
                            180,
                            360,
                            720,
                            1440
                        ]
                    },
                    "script": {
                        "type": "string",
                        "description": "A valid piece of Node.js javascript code describing a browser interaction with the Playwright frameworks.",
                        "example": "const { chromium } = require(\"playwright\");\n(async () => {\n\n  // launch the browser and open a new page\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n\n  // navigate to our target web page\n  await page.goto(\"https://danube-webshop.herokuapp.com/\");\n\n  // click on the login button and go through the login procedure\n  await page.click(\"#login\");\n  await page.type(\"#n-email\", \"user@email.com\");\n  await page.type(\"#n-password2\", \"supersecure1\");\n  await page.click(\"#goto-signin-btn\");\n\n  // wait until the login confirmation message is shown\n  await page.waitForSelector(\"#login-message\", { visible: true });\n\n  // close the browser and terminate the session\n  await browser.close();\n})();"
                    },
                    "scriptPath": {
                        "type": "string",
                        "description": "Path of the script in the runtime."
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/privateLocations"
                    },
                    "dependencies": {
                        "$ref": "#/components/schemas/dependencies"
                    },
                    "sslCheckDomain": {
                        "type": "string",
                        "description": "A valid fully qualified domain name (FQDN) to check its SSL certificate.",
                        "example": "www.acme.com"
                    }
                },
                "required": [
                    "name",
                    "script"
                ]
            },
            "Model94": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model95": {
                "type": "array",
                "description": "An array of one or more data center locations where to run this check.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model94"
                }
            },
            "Model96": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model97": {
                "type": "string",
                "enum": [
                    "BROWSER"
                ]
            },
            "Model98": {
                "type": "array",
                "description": "Key/value pairs for setting environment variables during check execution. Use global environment variables whenever possible.",
                "maxItems": 50,
                "items": {
                    "$ref": "#/components/schemas/EnvironmentVariable"
                }
            },
            "CheckBrowser": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "e435c01a-0d6c-4cc4-baae-a5c12961aa69"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                        "default": false
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model95"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/CheckAlertSettings"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The id of the check group this check is part of.",
                        "example": "null",
                        "default": null
                    },
                    "groupOrder": {
                        "type": "number",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                        "example": "null",
                        "default": null,
                        "minimum": 0
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model96"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/CheckAlertChannelSubscriptionList"
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/RetryStrategy"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model97"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check should run in minutes.",
                        "default": 10,
                        "enum": [
                            1,
                            2,
                            5,
                            10,
                            15,
                            30,
                            60,
                            120,
                            180,
                            360,
                            720,
                            1440
                        ]
                    },
                    "script": {
                        "type": "string",
                        "description": "A valid piece of Node.js javascript code describing a browser interaction with the Playwright frameworks."
                    },
                    "sslCheckDomain": {
                        "type": "string",
                        "description": "A valid fully qualified domain name (FQDN) to check its SSL certificate.",
                        "example": "www.acme.com"
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/privateLocations"
                    },
                    "alertChannels": {
                        "$ref": "#/components/schemas/CheckAlertChannels"
                    },
                    "environmentVariables": {
                        "$ref": "#/components/schemas/Model98"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "name",
                    "script"
                ]
            },
            "Model99": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model100": {
                "type": "array",
                "description": "An array of one or more data center locations where to run this check.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model99"
                }
            },
            "Model101": {
                "type": "object",
                "description": "Alert settings.",
                "default": {
                    "escalationType": "RUN_BASED",
                    "runBasedEscalation": {
                        "failedRunThreshold": 1
                    },
                    "reminders": {
                        "amount": 0,
                        "interval": 5
                    },
                    "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                    }
                },
                "properties": {
                    "escalationType": {
                        "$ref": "#/components/schemas/escalationType"
                    },
                    "reminders": {
                        "$ref": "#/components/schemas/AlertSettingsReminders"
                    },
                    "sslCertificates": {
                        "$ref": "#/components/schemas/AlertSettingsSSLCertificates"
                    },
                    "runBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsRunBasedEscalation"
                    },
                    "timeBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsTimeBasedEscalation"
                    },
                    "parallelRunFailureThreshold": {
                        "$ref": "#/components/schemas/parallelRunFailureThreshold"
                    }
                }
            },
            "Model102": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model103": {
                "type": "array",
                "description": "List of alert channel subscriptions.",
                "example": [],
                "items": {
                    "$ref": "#/components/schemas/Model29"
                }
            },
            "Model104": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                    "FIXED",
                    "LINEAR",
                    "EXPONENTIAL",
                    "SINGLE_RETRY"
                ]
            },
            "Model105": {
                "type": "string",
                "description": "The HTTP request could not be completed due to a network error: no response status code was received",
                "enum": [
                    "NETWORK_ERROR"
                ]
            },
            "Model106": {
                "type": "array",
                "x-constraint": {
                    "length": 1,
                    "unique": true,
                    "single": true
                },
                "items": {
                    "$ref": "#/components/schemas/Model105"
                }
            },
            "Model107": {
                "type": "object",
                "description": "The strategy to determine how failed checks are retried.",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/Model104"
                    },
                    "baseBackoffSeconds": {
                        "type": "number",
                        "description": "The number of seconds to wait before the first retry attempt.",
                        "default": 60
                    },
                    "sameRegion": {
                        "type": "boolean",
                        "description": "Whether retries should be run in the same region as the initial check run.",
                        "default": true
                    },
                    "maxRetries": {
                        "type": "number",
                        "description": "The maximum number of attempts to retry the check. Not supported for SINGLE_RETRY",
                        "minimum": 1,
                        "maximum": 10
                    },
                    "maxDurationSeconds": {
                        "type": "number",
                        "description": "The total amount of time to continue retrying the check. Not supported for SINGLE_RETRY",
                        "minimum": 0,
                        "maximum": 600
                    },
                    "onlyOn": {
                        "$ref": "#/components/schemas/Model106"
                    }
                },
                "required": [
                    "type"
                ]
            },
            "Model108": {
                "type": "array",
                "description": "Key/value pairs for setting environment variables during check execution. Use global environment variables whenever possible.",
                "example": [],
                "maxItems": 50,
                "items": {
                    "$ref": "#/components/schemas/EnvironmentVariable"
                }
            },
            "CheckBrowserUpdate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                        "default": false
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model100"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/Model101"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The id of the check group this check is part of.",
                        "example": "null",
                        "default": null
                    },
                    "groupOrder": {
                        "type": "number",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                        "example": "null",
                        "default": null,
                        "minimum": 0
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model102"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/Model103"
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/Model107"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "environmentVariables": {
                        "$ref": "#/components/schemas/Model108"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check should run in minutes.",
                        "default": 10,
                        "enum": [
                            1,
                            2,
                            5,
                            10,
                            15,
                            30,
                            60,
                            120,
                            180,
                            360,
                            720,
                            1440
                        ]
                    },
                    "script": {
                        "type": "string",
                        "description": "A valid piece of Node.js javascript code describing a browser interaction with the Playwright frameworks.",
                        "example": "const { chromium } = require(\"playwright\");\n(async () => {\n\n  // launch the browser and open a new page\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n\n  // navigate to our target web page\n  await page.goto(\"https://danube-webshop.herokuapp.com/\");\n\n  // click on the login button and go through the login procedure\n  await page.click(\"#login\");\n  await page.type(\"#n-email\", \"user@email.com\");\n  await page.type(\"#n-password2\", \"supersecure1\");\n  await page.click(\"#goto-signin-btn\");\n\n  // wait until the login confirmation message is shown\n  await page.waitForSelector(\"#login-message\", { visible: true });\n\n  // close the browser and terminate the session\n  await browser.close();\n})();"
                    },
                    "scriptPath": {
                        "type": "string",
                        "description": "Path of the script in the runtime."
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/privateLocations"
                    },
                    "dependencies": {
                        "$ref": "#/components/schemas/dependencies"
                    },
                    "sslCheckDomain": {
                        "type": "string",
                        "description": "A valid fully qualified domain name (FQDN) to check its SSL certificate.",
                        "example": "www.acme.com"
                    }
                }
            },
            "Model109": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model110": {
                "type": "array",
                "description": "An array of one or more data center locations where to run this check.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model109"
                }
            },
            "Model111": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model112": {
                "type": "array",
                "description": "List of alert channel subscriptions.",
                "example": [],
                "items": {
                    "$ref": "#/components/schemas/Model29"
                }
            },
            "periodUnit": {
                "type": "string",
                "enum": [
                    "seconds",
                    "minutes",
                    "hours",
                    "days"
                ]
            },
            "graceUnit": {
                "type": "string",
                "enum": [
                    "seconds",
                    "minutes",
                    "hours",
                    "days"
                ]
            },
            "Model113": {
                "type": "object",
                "properties": {
                    "period": {
                        "type": "number",
                        "description": "Interval expected between pings."
                    },
                    "periodUnit": {
                        "$ref": "#/components/schemas/periodUnit"
                    },
                    "grace": {
                        "type": "number",
                        "description": "Grace added to the period."
                    },
                    "graceUnit": {
                        "$ref": "#/components/schemas/graceUnit"
                    },
                    "pingToken": {
                        "type": "string",
                        "description": "UUID token used to build a unique ping URL.",
                        "x-format": {
                            "guid": true
                        }
                    }
                },
                "required": [
                    "period",
                    "periodUnit",
                    "grace",
                    "graceUnit"
                ]
            },
            "CheckHeartbeatCreate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                        "default": false
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model110"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/AlertSettings"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The id of the check group this check is part of.",
                        "example": "null",
                        "default": null
                    },
                    "groupOrder": {
                        "type": "number",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                        "example": "null",
                        "default": null,
                        "minimum": 0
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model111"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/Model112"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check should run in minutes.",
                        "default": 10
                    },
                    "frequencyOffset": {
                        "type": "integer",
                        "minimum": 1
                    },
                    "request": {
                        "$ref": "#/components/schemas/CheckRequest"
                    },
                    "heartbeat": {
                        "$ref": "#/components/schemas/Model113"
                    },
                    "script": {
                        "type": "string"
                    },
                    "scriptPath": {
                        "type": "string",
                        "description": "Path of the script in the runtime."
                    },
                    "sslCheckDomain": {
                        "type": "string"
                    },
                    "environmentVariables": {
                        "$ref": "#/components/schemas/CheckEnvironmentVariableList"
                    },
                    "setupSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the setup phase of an API check.",
                        "default": null
                    },
                    "tearDownSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
                        "default": null
                    },
                    "localSetupScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the setup phase.",
                        "default": null
                    },
                    "localTearDownScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the teardown phase.",
                        "default": null
                    },
                    "degradedResponseTime": {
                        "type": "number",
                        "description": "The response time in milliseconds where a check should be considered degraded.",
                        "default": 10000,
                        "minimum": 0,
                        "maximum": 300000
                    },
                    "maxResponseTime": {
                        "type": "number",
                        "description": "The response time in milliseconds where a check should be considered failing.",
                        "default": 20000,
                        "minimum": 0,
                        "maximum": 300000
                    }
                },
                "required": [
                    "name",
                    "heartbeat",
                    "script"
                ]
            },
            "Model114": {
                "type": "string",
                "enum": [
                    "HEARTBEAT"
                ]
            },
            "Model115": {
                "type": "object",
                "properties": {
                    "period": {
                        "type": "number",
                        "description": "Interval expected between pings."
                    },
                    "periodUnit": {
                        "$ref": "#/components/schemas/periodUnit"
                    },
                    "grace": {
                        "type": "number",
                        "description": "Grace added to the period."
                    },
                    "graceUnit": {
                        "$ref": "#/components/schemas/graceUnit"
                    },
                    "pingToken": {
                        "type": "string",
                        "description": "UUID token used to build a unique ping URL.",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "pingUrl": {
                        "type": "string",
                        "example": "https://ping.checklyhq.com/22868839-8450-4010-9241-1ea83a2e425f"
                    }
                },
                "required": [
                    "period",
                    "periodUnit",
                    "grace",
                    "graceUnit"
                ]
            },
            "CheckHeartbeat": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "d432cf89-010b-4b12-8150-958c8eb1d5ca"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/CheckAlertSettings"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/CheckAlertChannelSubscriptionList"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model114"
                    },
                    "heartbeat": {
                        "$ref": "#/components/schemas/Model115"
                    },
                    "alertChannels": {
                        "$ref": "#/components/schemas/CheckAlertChannels"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "Model116": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model117": {
                "type": "array",
                "description": "An array of one or more data center locations where to run this check.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model116"
                }
            },
            "Model118": {
                "type": "object",
                "description": "Alert settings.",
                "default": {
                    "escalationType": "RUN_BASED",
                    "runBasedEscalation": {
                        "failedRunThreshold": 1
                    },
                    "reminders": {
                        "amount": 0,
                        "interval": 5
                    },
                    "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                    }
                },
                "properties": {
                    "escalationType": {
                        "$ref": "#/components/schemas/escalationType"
                    },
                    "reminders": {
                        "$ref": "#/components/schemas/AlertSettingsReminders"
                    },
                    "sslCertificates": {
                        "$ref": "#/components/schemas/AlertSettingsSSLCertificates"
                    },
                    "runBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsRunBasedEscalation"
                    },
                    "timeBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsTimeBasedEscalation"
                    },
                    "parallelRunFailureThreshold": {
                        "$ref": "#/components/schemas/parallelRunFailureThreshold"
                    }
                }
            },
            "Model119": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model120": {
                "type": "array",
                "description": "List of alert channel subscriptions.",
                "example": [],
                "items": {
                    "$ref": "#/components/schemas/Model29"
                }
            },
            "Model121": {
                "type": "object",
                "properties": {
                    "period": {
                        "type": "number",
                        "description": "Interval expected between pings."
                    },
                    "periodUnit": {
                        "$ref": "#/components/schemas/periodUnit"
                    },
                    "grace": {
                        "type": "number",
                        "description": "Grace added to the period."
                    },
                    "graceUnit": {
                        "$ref": "#/components/schemas/graceUnit"
                    },
                    "pingToken": {
                        "type": "string",
                        "description": "UUID token used to build a unique ping URL.",
                        "x-format": {
                            "guid": true
                        }
                    }
                },
                "required": [
                    "period",
                    "periodUnit",
                    "grace",
                    "graceUnit"
                ]
            },
            "CheckHeartbeatUpdate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                        "default": false
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model117"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/Model118"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The id of the check group this check is part of.",
                        "example": "null",
                        "default": null
                    },
                    "groupOrder": {
                        "type": "number",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                        "example": "null",
                        "default": null,
                        "minimum": 0
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model119"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/Model120"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check should run in minutes.",
                        "default": 10
                    },
                    "frequencyOffset": {
                        "type": "integer",
                        "minimum": 1
                    },
                    "request": {
                        "$ref": "#/components/schemas/CheckRequest"
                    },
                    "heartbeat": {
                        "$ref": "#/components/schemas/Model121"
                    },
                    "script": {
                        "type": "string"
                    },
                    "scriptPath": {
                        "type": "string",
                        "description": "Path of the script in the runtime."
                    },
                    "sslCheckDomain": {
                        "type": "string"
                    },
                    "environmentVariables": {
                        "$ref": "#/components/schemas/CheckEnvironmentVariableList"
                    },
                    "setupSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the setup phase of an API check.",
                        "default": null
                    },
                    "tearDownSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
                        "default": null
                    },
                    "localSetupScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the setup phase.",
                        "default": null
                    },
                    "localTearDownScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the teardown phase.",
                        "default": null
                    },
                    "degradedResponseTime": {
                        "type": "number",
                        "description": "The response time in milliseconds where a check should be considered degraded.",
                        "default": 10000,
                        "minimum": 0,
                        "maximum": 300000
                    },
                    "maxResponseTime": {
                        "type": "number",
                        "description": "The response time in milliseconds where a check should be considered failing.",
                        "default": 20000,
                        "minimum": 0,
                        "maximum": 300000
                    }
                },
                "required": [
                    "script"
                ]
            },
            "successRatio": {
                "type": "object",
                "properties": {
                    "previousPeriod": {
                        "type": "number"
                    },
                    "currentPeriod": {
                        "type": "number"
                    }
                }
            },
            "Model122": {
                "type": "object",
                "properties": {
                    "successRatio": {
                        "$ref": "#/components/schemas/successRatio"
                    },
                    "totalEntitiesCurrentPeriod": {
                        "type": "number"
                    }
                }
            },
            "state": {
                "type": "string",
                "description": "Describe the event state, if the ping was received or not.",
                "example": "FAILING",
                "enum": [
                    "FAILING",
                    "EARLY",
                    "RECEIVED",
                    "GRACE",
                    "LATE"
                ]
            },
            "Model123": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "state": {
                        "$ref": "#/components/schemas/state"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date",
                        "description": "UTC timestamp on which we received the event.",
                        "example": "2023-07-24T10:01:01.098Z"
                    },
                    "source": {
                        "type": "string",
                        "description": "Source which triggered the event.",
                        "example": "HTTPS GET from Curl"
                    },
                    "userAgent": {
                        "type": "string",
                        "description": "User agent from the ping.",
                        "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "events": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Model123"
                }
            },
            "stats": {
                "type": "object",
                "properties": {
                    "last24Hours": {
                        "$ref": "#/components/schemas/Model122"
                    },
                    "last7Days": {
                        "$ref": "#/components/schemas/Model122"
                    }
                }
            },
            "Model124": {
                "type": "object",
                "properties": {
                    "events": {
                        "$ref": "#/components/schemas/events"
                    },
                    "stats": {
                        "$ref": "#/components/schemas/stats"
                    }
                }
            },
            "Model125": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Model124"
                }
            },
            "Model126": {
                "type": "object",
                "properties": {
                    "event": {
                        "$ref": "#/components/schemas/Model123"
                    },
                    "stats": {
                        "$ref": "#/components/schemas/stats"
                    }
                }
            },
            "Model127": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model128": {
                "type": "array",
                "description": "An array of one or more data center locations where to run this check.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model127"
                }
            },
            "Model129": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model130": {
                "type": "array",
                "description": "List of alert channel subscriptions.",
                "example": [],
                "items": {
                    "$ref": "#/components/schemas/Model29"
                }
            },
            "Model131": {
                "type": "string",
                "default": "MULTI_STEP",
                "enum": [
                    "MULTI_STEP"
                ]
            },
            "Model132": {
                "type": "array",
                "description": "Key/value pairs for setting environment variables during check execution. Use global environment variables whenever possible.",
                "example": [],
                "maxItems": 50,
                "items": {
                    "$ref": "#/components/schemas/EnvironmentVariable"
                }
            },
            "Model133": {
                "type": "array",
                "description": "An array of one or more private locations where to run the check.",
                "example": [],
                "items": {
                    "type": "string"
                }
            },
            "CheckMultiStepCreate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                        "default": false
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model128"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/AlertSettings"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The id of the check group this check is part of.",
                        "example": "null",
                        "default": null
                    },
                    "groupOrder": {
                        "type": "number",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                        "example": "null",
                        "default": null,
                        "minimum": 0
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model129"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/Model130"
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/RetryStrategy"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model131"
                    },
                    "environmentVariables": {
                        "$ref": "#/components/schemas/Model132"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check should run in minutes.",
                        "default": 10,
                        "enum": [
                            1,
                            2,
                            5,
                            10,
                            15,
                            30,
                            60,
                            120,
                            180,
                            360,
                            720,
                            1440
                        ]
                    },
                    "script": {
                        "type": "string",
                        "description": "A valid piece of Node.js javascript code describing a multi-step API interaction with the Playwright frameworks.",
                        "example": "const { chromium } = require(\"playwright\");\n(async () => {\n\n  // launch the browser and open a new page\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n\n  // navigate to our target web page\n  await page.goto(\"https://danube-webshop.herokuapp.com/\");\n\n  // click on the login button and go through the login procedure\n  await page.click(\"#login\");\n  await page.type(\"#n-email\", \"user@email.com\");\n  await page.type(\"#n-password2\", \"supersecure1\");\n  await page.click(\"#goto-signin-btn\");\n\n  // wait until the login confirmation message is shown\n  await page.waitForSelector(\"#login-message\", { visible: true });\n\n  // close the browser and terminate the session\n  await browser.close();\n})();"
                    },
                    "scriptPath": {
                        "type": "string",
                        "description": "Path of the script in the runtime."
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/Model133"
                    },
                    "dependencies": {
                        "$ref": "#/components/schemas/dependencies"
                    }
                },
                "required": [
                    "name",
                    "script"
                ]
            },
            "Model134": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model135": {
                "type": "array",
                "description": "An array of one or more data center locations where to run this check.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model134"
                }
            },
            "Model136": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model137": {
                "type": "string",
                "enum": [
                    "MULTI_STEP"
                ]
            },
            "Model138": {
                "type": "array",
                "description": "Key/value pairs for setting environment variables during check execution. Use global environment variables whenever possible.",
                "maxItems": 50,
                "items": {
                    "$ref": "#/components/schemas/EnvironmentVariable"
                }
            },
            "CheckMultiStep": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "b9972e6a-5579-4080-b1d8-0e43f4847b82"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                        "default": false
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model135"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/CheckAlertSettings"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The id of the check group this check is part of.",
                        "example": "null",
                        "default": null
                    },
                    "groupOrder": {
                        "type": "number",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                        "example": "null",
                        "default": null,
                        "minimum": 0
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model136"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/CheckAlertChannelSubscriptionList"
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/RetryStrategy"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model137"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check should run in minutes.",
                        "default": 10,
                        "enum": [
                            1,
                            2,
                            5,
                            10,
                            15,
                            30,
                            60,
                            120,
                            180,
                            360,
                            720,
                            1440
                        ]
                    },
                    "script": {
                        "type": "string",
                        "description": "A valid piece of Node.js javascript code describing a multi-step API interaction with the Playwright frameworks."
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/privateLocations"
                    },
                    "alertChannels": {
                        "$ref": "#/components/schemas/CheckAlertChannels"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "environmentVariables": {
                        "$ref": "#/components/schemas/Model138"
                    }
                },
                "required": [
                    "name",
                    "script"
                ]
            },
            "Model139": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model140": {
                "type": "array",
                "description": "An array of one or more data center locations where to run this check.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model139"
                }
            },
            "Model141": {
                "type": "object",
                "description": "Alert settings.",
                "default": {
                    "escalationType": "RUN_BASED",
                    "runBasedEscalation": {
                        "failedRunThreshold": 1
                    },
                    "reminders": {
                        "amount": 0,
                        "interval": 5
                    },
                    "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                    }
                },
                "properties": {
                    "escalationType": {
                        "$ref": "#/components/schemas/escalationType"
                    },
                    "reminders": {
                        "$ref": "#/components/schemas/AlertSettingsReminders"
                    },
                    "sslCertificates": {
                        "$ref": "#/components/schemas/AlertSettingsSSLCertificates"
                    },
                    "runBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsRunBasedEscalation"
                    },
                    "timeBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsTimeBasedEscalation"
                    },
                    "parallelRunFailureThreshold": {
                        "$ref": "#/components/schemas/parallelRunFailureThreshold"
                    }
                }
            },
            "Model142": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model143": {
                "type": "array",
                "description": "List of alert channel subscriptions.",
                "example": [],
                "items": {
                    "$ref": "#/components/schemas/Model29"
                }
            },
            "Model144": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                    "FIXED",
                    "LINEAR",
                    "EXPONENTIAL",
                    "SINGLE_RETRY"
                ]
            },
            "Model145": {
                "type": "string",
                "description": "The HTTP request could not be completed due to a network error: no response status code was received",
                "enum": [
                    "NETWORK_ERROR"
                ]
            },
            "Model146": {
                "type": "array",
                "x-constraint": {
                    "length": 1,
                    "unique": true,
                    "single": true
                },
                "items": {
                    "$ref": "#/components/schemas/Model145"
                }
            },
            "Model147": {
                "type": "object",
                "description": "The strategy to determine how failed checks are retried.",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/Model144"
                    },
                    "baseBackoffSeconds": {
                        "type": "number",
                        "description": "The number of seconds to wait before the first retry attempt.",
                        "default": 60
                    },
                    "sameRegion": {
                        "type": "boolean",
                        "description": "Whether retries should be run in the same region as the initial check run.",
                        "default": true
                    },
                    "maxRetries": {
                        "type": "number",
                        "description": "The maximum number of attempts to retry the check. Not supported for SINGLE_RETRY",
                        "minimum": 1,
                        "maximum": 10
                    },
                    "maxDurationSeconds": {
                        "type": "number",
                        "description": "The total amount of time to continue retrying the check. Not supported for SINGLE_RETRY",
                        "minimum": 0,
                        "maximum": 600
                    },
                    "onlyOn": {
                        "$ref": "#/components/schemas/Model146"
                    }
                },
                "required": [
                    "type"
                ]
            },
            "Model148": {
                "type": "string",
                "default": "MULTI_STEP",
                "enum": [
                    "MULTI_STEP"
                ]
            },
            "Model149": {
                "type": "array",
                "description": "Key/value pairs for setting environment variables during check execution. Use global environment variables whenever possible.",
                "example": [],
                "maxItems": 50,
                "items": {
                    "$ref": "#/components/schemas/EnvironmentVariable"
                }
            },
            "Model150": {
                "type": "array",
                "description": "An array of one or more private locations where to run the check.",
                "example": [],
                "items": {
                    "type": "string"
                }
            },
            "CheckMultiStepUpdate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                        "default": false
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model140"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/Model141"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The id of the check group this check is part of.",
                        "example": "null",
                        "default": null
                    },
                    "groupOrder": {
                        "type": "number",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                        "example": "null",
                        "default": null,
                        "minimum": 0
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model142"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/Model143"
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/Model147"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model148"
                    },
                    "environmentVariables": {
                        "$ref": "#/components/schemas/Model149"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check should run in minutes.",
                        "default": 10,
                        "enum": [
                            1,
                            2,
                            5,
                            10,
                            15,
                            30,
                            60,
                            120,
                            180,
                            360,
                            720,
                            1440
                        ]
                    },
                    "script": {
                        "type": "string",
                        "description": "A valid piece of Node.js javascript code describing a multi-step API interaction with the Playwright frameworks.",
                        "example": "const { chromium } = require(\"playwright\");\n(async () => {\n\n  // launch the browser and open a new page\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n\n  // navigate to our target web page\n  await page.goto(\"https://danube-webshop.herokuapp.com/\");\n\n  // click on the login button and go through the login procedure\n  await page.click(\"#login\");\n  await page.type(\"#n-email\", \"user@email.com\");\n  await page.type(\"#n-password2\", \"supersecure1\");\n  await page.click(\"#goto-signin-btn\");\n\n  // wait until the login confirmation message is shown\n  await page.waitForSelector(\"#login-message\", { visible: true });\n\n  // close the browser and terminate the session\n  await browser.close();\n})();"
                    },
                    "scriptPath": {
                        "type": "string",
                        "description": "Path of the script in the runtime."
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/Model150"
                    },
                    "dependencies": {
                        "$ref": "#/components/schemas/dependencies"
                    }
                }
            },
            "Model151": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model152": {
                "type": "array",
                "description": "An array of one or more data center locations where to run this check.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model151"
                }
            },
            "Model153": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model154": {
                "type": "array",
                "description": "List of alert channel subscriptions.",
                "example": [],
                "items": {
                    "$ref": "#/components/schemas/Model29"
                }
            },
            "Model155": {
                "type": "string",
                "enum": [
                    "RESPONSE_DATA",
                    "RESPONSE_TIME"
                ]
            },
            "TcpCheckAssertion": {
                "type": "object",
                "properties": {
                    "source": {
                        "$ref": "#/components/schemas/Model155"
                    },
                    "comparison": {
                        "type": "string"
                    },
                    "property": {
                        "type": "string",
                        "default": ""
                    },
                    "target": {
                        "type": "string",
                        "default": ""
                    },
                    "regex": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "Model156": {
                "type": "array",
                "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                "example": [
                    {
                        "source": "TEXT_BODY",
                        "comparison": "NOT_EMPTY",
                        "target": "200"
                    }
                ],
                "items": {
                    "$ref": "#/components/schemas/TcpCheckAssertion"
                }
            },
            "Model157": {
                "type": "object",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "maxLength": 2048
                    },
                    "port": {
                        "type": "number"
                    },
                    "data": {
                        "type": "string",
                        "default": null
                    },
                    "assertions": {
                        "$ref": "#/components/schemas/Model156"
                    },
                    "ipFamily": {
                        "$ref": "#/components/schemas/ipFamily"
                    }
                },
                "required": [
                    "port"
                ]
            },
            "CheckTCPCreate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                        "default": false
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model152"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/AlertSettings"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The id of the check group this check is part of.",
                        "example": "null",
                        "default": null
                    },
                    "groupOrder": {
                        "type": "number",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                        "example": "null",
                        "default": null,
                        "minimum": 0
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model153"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/Model154"
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/RetryStrategy"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "request": {
                        "$ref": "#/components/schemas/Model157"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check should run in minutes.",
                        "default": 10,
                        "enum": [
                            0,
                            1,
                            2,
                            5,
                            10,
                            15,
                            30,
                            60,
                            120,
                            180,
                            360,
                            720,
                            1440
                        ]
                    },
                    "frequencyOffset": {
                        "type": "integer",
                        "description": "Used for setting seconds for check frequencies under 1 minutes (only for API & TCP checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
                        "minimum": 1
                    },
                    "degradedResponseTime": {
                        "type": "number",
                        "description": "The response time in milliseconds where a check should be considered degraded.",
                        "default": 3000,
                        "minimum": 0,
                        "maximum": 5000
                    },
                    "maxResponseTime": {
                        "type": "number",
                        "description": "The response time in milliseconds where a check should be considered failing.",
                        "default": 5000,
                        "minimum": 0,
                        "maximum": 5000
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/privateLocations"
                    }
                },
                "required": [
                    "name",
                    "request"
                ]
            },
            "Model158": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model159": {
                "type": "array",
                "description": "An array of one or more data center locations where to run this check.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model158"
                }
            },
            "Model160": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model161": {
                "type": "array",
                "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                "example": [
                    {
                        "source": "TEXT_BODY",
                        "comparison": "NOT_EMPTY",
                        "target": "200"
                    }
                ],
                "items": {
                    "$ref": "#/components/schemas/TcpCheckAssertion"
                }
            },
            "Model162": {
                "type": "object",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "maxLength": 2048
                    },
                    "port": {
                        "type": "number"
                    },
                    "data": {
                        "type": "string",
                        "default": null
                    },
                    "assertions": {
                        "$ref": "#/components/schemas/Model161"
                    },
                    "ipFamily": {
                        "$ref": "#/components/schemas/ipFamily"
                    }
                },
                "required": [
                    "port"
                ]
            },
            "Model163": {
                "type": "string",
                "enum": [
                    "TCP"
                ]
            },
            "CheckTCP": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "9d6df684-0bc3-4a38-a094-4e97627dd93e"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                        "default": false
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model159"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/CheckAlertSettings"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The id of the check group this check is part of.",
                        "example": "null",
                        "default": null
                    },
                    "groupOrder": {
                        "type": "number",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                        "example": "null",
                        "default": null,
                        "minimum": 0
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model160"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/CheckAlertChannelSubscriptionList"
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/RetryStrategy"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check should run in minutes.",
                        "default": 10,
                        "enum": [
                            0,
                            1,
                            2,
                            5,
                            10,
                            15,
                            30,
                            60,
                            120,
                            180,
                            360,
                            720,
                            1440
                        ]
                    },
                    "frequencyOffset": {
                        "type": "integer",
                        "description": "Used for setting seconds for check frequencies under 1 minutes (only for API & TCP checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
                        "minimum": 1
                    },
                    "degradedResponseTime": {
                        "type": "number"
                    },
                    "maxResponseTime": {
                        "type": "number"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "alertChannels": {
                        "$ref": "#/components/schemas/CheckAlertChannels"
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/privateLocations"
                    },
                    "request": {
                        "$ref": "#/components/schemas/Model162"
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model163"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "Model164": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model165": {
                "type": "array",
                "description": "An array of one or more data center locations where to run this check.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model164"
                }
            },
            "Model166": {
                "type": "object",
                "description": "Alert settings.",
                "default": {
                    "escalationType": "RUN_BASED",
                    "runBasedEscalation": {
                        "failedRunThreshold": 1
                    },
                    "reminders": {
                        "amount": 0,
                        "interval": 5
                    },
                    "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                    }
                },
                "properties": {
                    "escalationType": {
                        "$ref": "#/components/schemas/escalationType"
                    },
                    "reminders": {
                        "$ref": "#/components/schemas/AlertSettingsReminders"
                    },
                    "sslCertificates": {
                        "$ref": "#/components/schemas/AlertSettingsSSLCertificates"
                    },
                    "runBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsRunBasedEscalation"
                    },
                    "timeBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsTimeBasedEscalation"
                    },
                    "parallelRunFailureThreshold": {
                        "$ref": "#/components/schemas/parallelRunFailureThreshold"
                    }
                }
            },
            "Model167": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model168": {
                "type": "array",
                "description": "List of alert channel subscriptions.",
                "example": [],
                "items": {
                    "$ref": "#/components/schemas/Model29"
                }
            },
            "Model169": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                    "FIXED",
                    "LINEAR",
                    "EXPONENTIAL",
                    "SINGLE_RETRY"
                ]
            },
            "Model170": {
                "type": "string",
                "description": "The HTTP request could not be completed due to a network error: no response status code was received",
                "enum": [
                    "NETWORK_ERROR"
                ]
            },
            "Model171": {
                "type": "array",
                "x-constraint": {
                    "length": 1,
                    "unique": true,
                    "single": true
                },
                "items": {
                    "$ref": "#/components/schemas/Model170"
                }
            },
            "Model172": {
                "type": "object",
                "description": "The strategy to determine how failed checks are retried.",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/Model169"
                    },
                    "baseBackoffSeconds": {
                        "type": "number",
                        "description": "The number of seconds to wait before the first retry attempt.",
                        "default": 60
                    },
                    "sameRegion": {
                        "type": "boolean",
                        "description": "Whether retries should be run in the same region as the initial check run.",
                        "default": true
                    },
                    "maxRetries": {
                        "type": "number",
                        "description": "The maximum number of attempts to retry the check. Not supported for SINGLE_RETRY",
                        "minimum": 1,
                        "maximum": 10
                    },
                    "maxDurationSeconds": {
                        "type": "number",
                        "description": "The total amount of time to continue retrying the check. Not supported for SINGLE_RETRY",
                        "minimum": 0,
                        "maximum": 600
                    },
                    "onlyOn": {
                        "$ref": "#/components/schemas/Model171"
                    }
                },
                "required": [
                    "type"
                ]
            },
            "Model173": {
                "type": "array",
                "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                "example": [
                    {
                        "source": "TEXT_BODY",
                        "comparison": "NOT_EMPTY",
                        "target": "200"
                    }
                ],
                "items": {
                    "$ref": "#/components/schemas/TcpCheckAssertion"
                }
            },
            "Model174": {
                "type": "object",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "maxLength": 2048
                    },
                    "port": {
                        "type": "number"
                    },
                    "data": {
                        "type": "string",
                        "default": null
                    },
                    "assertions": {
                        "$ref": "#/components/schemas/Model173"
                    },
                    "ipFamily": {
                        "$ref": "#/components/schemas/ipFamily"
                    }
                },
                "required": [
                    "port"
                ]
            },
            "CheckTCPUpdate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                        "default": false
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model165"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/Model166"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The id of the check group this check is part of.",
                        "example": "null",
                        "default": null
                    },
                    "groupOrder": {
                        "type": "number",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                        "example": "null",
                        "default": null,
                        "minimum": 0
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model167"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/Model168"
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/Model172"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "request": {
                        "$ref": "#/components/schemas/Model174"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check should run in minutes.",
                        "default": 10,
                        "enum": [
                            0,
                            1,
                            2,
                            5,
                            10,
                            15,
                            30,
                            60,
                            120,
                            180,
                            360,
                            720,
                            1440
                        ]
                    },
                    "frequencyOffset": {
                        "type": "integer",
                        "description": "Used for setting seconds for check frequencies under 1 minutes (only for API & TCP checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
                        "minimum": 1
                    },
                    "degradedResponseTime": {
                        "type": "number",
                        "description": "The response time in milliseconds where a check should be considered degraded.",
                        "default": 3000,
                        "minimum": 0,
                        "maximum": 5000
                    },
                    "maxResponseTime": {
                        "type": "number",
                        "description": "The response time in milliseconds where a check should be considered failing.",
                        "default": 5000,
                        "minimum": 0,
                        "maximum": 5000
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/privateLocations"
                    }
                }
            },
            "Model175": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model176": {
                "type": "array",
                "description": "An array of one or more data center locations where to run this check.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model175"
                }
            },
            "Model177": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model178": {
                "type": "array",
                "description": "List of alert channel subscriptions.",
                "example": [],
                "items": {
                    "$ref": "#/components/schemas/Model29"
                }
            },
            "Model179": {
                "type": "string",
                "default": "GET",
                "enum": [
                    "GET"
                ]
            },
            "UlrMonitorAssertionSource": {
                "type": "string",
                "enum": [
                    "STATUS_CODE"
                ]
            },
            "UrlMonitorAssertionComparison": {
                "type": "string",
                "enum": [
                    "EQUALS",
                    "NOT_EQUALS",
                    "LESS_THAN",
                    "GREATER_THAN"
                ]
            },
            "Model180": {
                "type": "object",
                "properties": {
                    "property": {
                        "type": "string",
                        "default": ""
                    },
                    "target": {
                        "type": "string",
                        "default": ""
                    },
                    "regex": {
                        "type": "string",
                        "default": ""
                    },
                    "source": {
                        "$ref": "#/components/schemas/UlrMonitorAssertionSource"
                    },
                    "comparison": {
                        "$ref": "#/components/schemas/UrlMonitorAssertionComparison"
                    }
                }
            },
            "UrlMonitorAssertionList": {
                "type": "array",
                "description": "Check the main Checkly documentation on assertions, for URL checks only status code is supported.",
                "example": [
                    {
                        "source": "STATUS_CODE",
                        "comparison": "EQUALS",
                        "target": "200"
                    }
                ],
                "items": {
                    "$ref": "#/components/schemas/Model180"
                }
            },
            "UrlMonitorRequest": {
                "type": "object",
                "description": "Determines the request that the check is going to run.",
                "properties": {
                    "method": {
                        "$ref": "#/components/schemas/Model179"
                    },
                    "url": {
                        "type": "string",
                        "default": "https://api.checklyhq.com",
                        "maxLength": 2048
                    },
                    "followRedirects": {
                        "type": "boolean"
                    },
                    "skipSSL": {
                        "type": "boolean",
                        "default": false
                    },
                    "ipFamily": {
                        "$ref": "#/components/schemas/ipFamily"
                    },
                    "assertions": {
                        "$ref": "#/components/schemas/UrlMonitorAssertionList"
                    }
                },
                "required": [
                    "url"
                ]
            },
            "CheckURLCreate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                        "default": false
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model176"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/AlertSettings"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The id of the check group this check is part of.",
                        "example": "null",
                        "default": null
                    },
                    "groupOrder": {
                        "type": "number",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                        "example": "null",
                        "default": null,
                        "minimum": 0
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model177"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/Model178"
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/RetryStrategy"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "request": {
                        "$ref": "#/components/schemas/UrlMonitorRequest"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check should run in minutes.",
                        "default": 10,
                        "enum": [
                            0,
                            1,
                            2,
                            5,
                            10,
                            15,
                            30,
                            60,
                            120,
                            180,
                            360,
                            720,
                            1440
                        ]
                    },
                    "frequencyOffset": {
                        "type": "integer",
                        "description": "Used for setting seconds for check frequencies under 1 minutes (only for API & TCP checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
                        "minimum": 1
                    },
                    "degradedResponseTime": {
                        "type": "number",
                        "description": "The response time in milliseconds where a check should be considered degraded.",
                        "default": 3000,
                        "minimum": 0,
                        "maximum": 30000
                    },
                    "maxResponseTime": {
                        "type": "number",
                        "description": "The response time in milliseconds where a check should be considered failing.",
                        "default": 5000,
                        "minimum": 0,
                        "maximum": 30000
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/privateLocations"
                    }
                },
                "required": [
                    "name",
                    "request"
                ]
            },
            "Model181": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model182": {
                "type": "array",
                "description": "An array of one or more data center locations where to run this check.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model181"
                }
            },
            "Model183": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model184": {
                "type": "string",
                "default": "GET",
                "enum": [
                    "GET"
                ]
            },
            "Model185": {
                "type": "object",
                "description": "Determines the request that the check is going to run.",
                "properties": {
                    "method": {
                        "$ref": "#/components/schemas/Model184"
                    },
                    "url": {
                        "type": "string",
                        "default": "https://api.checklyhq.com",
                        "maxLength": 2048
                    },
                    "followRedirects": {
                        "type": "boolean"
                    },
                    "skipSSL": {
                        "type": "boolean",
                        "default": false
                    },
                    "ipFamily": {
                        "$ref": "#/components/schemas/ipFamily"
                    },
                    "assertions": {
                        "$ref": "#/components/schemas/UrlMonitorAssertionList"
                    }
                },
                "required": [
                    "url"
                ]
            },
            "Model186": {
                "type": "string",
                "enum": [
                    "URL"
                ]
            },
            "CheckURL": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "9d6df684-0bc3-4a38-a094-4e97627dd93e"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                        "default": false
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model182"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/CheckAlertSettings"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The id of the check group this check is part of.",
                        "example": "null",
                        "default": null
                    },
                    "groupOrder": {
                        "type": "number",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                        "example": "null",
                        "default": null,
                        "minimum": 0
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model183"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/CheckAlertChannelSubscriptionList"
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/RetryStrategy"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check should run in minutes.",
                        "default": 10,
                        "enum": [
                            0,
                            1,
                            2,
                            5,
                            10,
                            15,
                            30,
                            60,
                            120,
                            180,
                            360,
                            720,
                            1440
                        ]
                    },
                    "frequencyOffset": {
                        "type": "integer",
                        "description": "Used for setting seconds for check frequencies under 1 minutes (only for API & TCP checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
                        "minimum": 1
                    },
                    "degradedResponseTime": {
                        "type": "number"
                    },
                    "maxResponseTime": {
                        "type": "number"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "alertChannels": {
                        "$ref": "#/components/schemas/CheckAlertChannels"
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/privateLocations"
                    },
                    "request": {
                        "$ref": "#/components/schemas/Model185"
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/Model186"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "Model187": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model188": {
                "type": "array",
                "description": "An array of one or more data center locations where to run this check.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model187"
                }
            },
            "Model189": {
                "type": "object",
                "description": "Alert settings.",
                "default": {
                    "escalationType": "RUN_BASED",
                    "runBasedEscalation": {
                        "failedRunThreshold": 1
                    },
                    "reminders": {
                        "amount": 0,
                        "interval": 5
                    },
                    "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                    }
                },
                "properties": {
                    "escalationType": {
                        "$ref": "#/components/schemas/escalationType"
                    },
                    "reminders": {
                        "$ref": "#/components/schemas/AlertSettingsReminders"
                    },
                    "sslCertificates": {
                        "$ref": "#/components/schemas/AlertSettingsSSLCertificates"
                    },
                    "runBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsRunBasedEscalation"
                    },
                    "timeBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsTimeBasedEscalation"
                    },
                    "parallelRunFailureThreshold": {
                        "$ref": "#/components/schemas/parallelRunFailureThreshold"
                    }
                }
            },
            "Model190": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model191": {
                "type": "array",
                "description": "List of alert channel subscriptions.",
                "example": [],
                "items": {
                    "$ref": "#/components/schemas/Model29"
                }
            },
            "Model192": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                    "FIXED",
                    "LINEAR",
                    "EXPONENTIAL",
                    "SINGLE_RETRY"
                ]
            },
            "Model193": {
                "type": "string",
                "description": "The HTTP request could not be completed due to a network error: no response status code was received",
                "enum": [
                    "NETWORK_ERROR"
                ]
            },
            "Model194": {
                "type": "array",
                "x-constraint": {
                    "length": 1,
                    "unique": true,
                    "single": true
                },
                "items": {
                    "$ref": "#/components/schemas/Model193"
                }
            },
            "Model195": {
                "type": "object",
                "description": "The strategy to determine how failed checks are retried.",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/Model192"
                    },
                    "baseBackoffSeconds": {
                        "type": "number",
                        "description": "The number of seconds to wait before the first retry attempt.",
                        "default": 60
                    },
                    "sameRegion": {
                        "type": "boolean",
                        "description": "Whether retries should be run in the same region as the initial check run.",
                        "default": true
                    },
                    "maxRetries": {
                        "type": "number",
                        "description": "The maximum number of attempts to retry the check. Not supported for SINGLE_RETRY",
                        "minimum": 1,
                        "maximum": 10
                    },
                    "maxDurationSeconds": {
                        "type": "number",
                        "description": "The total amount of time to continue retrying the check. Not supported for SINGLE_RETRY",
                        "minimum": 0,
                        "maximum": 600
                    },
                    "onlyOn": {
                        "$ref": "#/components/schemas/Model194"
                    }
                },
                "required": [
                    "type"
                ]
            },
            "Model196": {
                "type": "string",
                "default": "GET",
                "enum": [
                    "GET"
                ]
            },
            "Model197": {
                "type": "object",
                "description": "Determines the request that the check is going to run.",
                "properties": {
                    "method": {
                        "$ref": "#/components/schemas/Model196"
                    },
                    "url": {
                        "type": "string",
                        "default": "https://api.checklyhq.com",
                        "maxLength": 2048
                    },
                    "followRedirects": {
                        "type": "boolean"
                    },
                    "skipSSL": {
                        "type": "boolean",
                        "default": false
                    },
                    "ipFamily": {
                        "$ref": "#/components/schemas/ipFamily"
                    },
                    "assertions": {
                        "$ref": "#/components/schemas/UrlMonitorAssertionList"
                    }
                },
                "required": [
                    "url"
                ]
            },
            "CheckURLUpdate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                        "default": false
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model188"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/Model189"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The id of the check group this check is part of.",
                        "example": "null",
                        "default": null
                    },
                    "groupOrder": {
                        "type": "number",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                        "example": "null",
                        "default": null,
                        "minimum": 0
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model190"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/Model191"
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/Model195"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "request": {
                        "$ref": "#/components/schemas/Model197"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check should run in minutes.",
                        "default": 10,
                        "enum": [
                            0,
                            1,
                            2,
                            5,
                            10,
                            15,
                            30,
                            60,
                            120,
                            180,
                            360,
                            720,
                            1440
                        ]
                    },
                    "frequencyOffset": {
                        "type": "integer",
                        "description": "Used for setting seconds for check frequencies under 1 minutes (only for API & TCP checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
                        "minimum": 1
                    },
                    "degradedResponseTime": {
                        "type": "number",
                        "description": "The response time in milliseconds where a check should be considered degraded.",
                        "default": 3000,
                        "minimum": 0,
                        "maximum": 30000
                    },
                    "maxResponseTime": {
                        "type": "number",
                        "description": "The response time in milliseconds where a check should be considered failing.",
                        "default": 5000,
                        "minimum": 0,
                        "maximum": 30000
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/privateLocations"
                    }
                }
            },
            "Model198": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model199": {
                "type": "array",
                "description": "An array of one or more data center locations where to run this check.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model198"
                }
            },
            "Model200": {
                "type": "object",
                "description": "Alert settings.",
                "default": {
                    "escalationType": "RUN_BASED",
                    "runBasedEscalation": {
                        "failedRunThreshold": 1
                    },
                    "reminders": {
                        "amount": 0,
                        "interval": 5
                    },
                    "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                    }
                },
                "properties": {
                    "escalationType": {
                        "$ref": "#/components/schemas/escalationType"
                    },
                    "reminders": {
                        "$ref": "#/components/schemas/AlertSettingsReminders"
                    },
                    "sslCertificates": {
                        "$ref": "#/components/schemas/AlertSettingsSSLCertificates"
                    },
                    "runBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsRunBasedEscalation"
                    },
                    "timeBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsTimeBasedEscalation"
                    },
                    "parallelRunFailureThreshold": {
                        "$ref": "#/components/schemas/parallelRunFailureThreshold"
                    }
                }
            },
            "Model201": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model202": {
                "type": "array",
                "description": "List of alert channel subscriptions.",
                "example": [],
                "items": {
                    "$ref": "#/components/schemas/Model29"
                }
            },
            "Model203": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                    "FIXED",
                    "LINEAR",
                    "EXPONENTIAL",
                    "SINGLE_RETRY"
                ]
            },
            "Model204": {
                "type": "string",
                "description": "The HTTP request could not be completed due to a network error: no response status code was received",
                "enum": [
                    "NETWORK_ERROR"
                ]
            },
            "Model205": {
                "type": "array",
                "x-constraint": {
                    "length": 1,
                    "unique": true,
                    "single": true
                },
                "items": {
                    "$ref": "#/components/schemas/Model204"
                }
            },
            "Model206": {
                "type": "object",
                "description": "The strategy to determine how failed checks are retried.",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/Model203"
                    },
                    "baseBackoffSeconds": {
                        "type": "number",
                        "description": "The number of seconds to wait before the first retry attempt.",
                        "default": 60
                    },
                    "sameRegion": {
                        "type": "boolean",
                        "description": "Whether retries should be run in the same region as the initial check run.",
                        "default": true
                    },
                    "maxRetries": {
                        "type": "number",
                        "description": "The maximum number of attempts to retry the check. Not supported for SINGLE_RETRY",
                        "minimum": 1,
                        "maximum": 10
                    },
                    "maxDurationSeconds": {
                        "type": "number",
                        "description": "The total amount of time to continue retrying the check. Not supported for SINGLE_RETRY",
                        "minimum": 0,
                        "maximum": 600
                    },
                    "onlyOn": {
                        "$ref": "#/components/schemas/Model205"
                    }
                },
                "required": [
                    "type"
                ]
            },
            "CheckUpdate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "Check"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                        "default": false
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                        "default": true
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                        "default": false
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model199"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckTagList"
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/Model200"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                        "default": true
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The id of the check group this check is part of.",
                        "example": "null",
                        "default": null
                    },
                    "groupOrder": {
                        "type": "number",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                        "example": "null",
                        "default": null,
                        "minimum": 0
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model201"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/Model202"
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/Model206"
                    },
                    "triggerIncident": {
                        "$ref": "#/components/schemas/TriggerIncident"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the check will run in parallel in all selected locations.",
                        "default": false
                    },
                    "checkType": {
                        "$ref": "#/components/schemas/checkType"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check should run in minutes.",
                        "default": 10
                    },
                    "frequencyOffset": {
                        "type": "integer",
                        "description": "Used for setting seconds for check frequencies under 1 minutes (only for API checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
                        "minimum": 1
                    },
                    "request": {
                        "$ref": "#/components/schemas/CheckRequest"
                    },
                    "heartbeat": {
                        "$ref": "#/components/schemas/heartbeat"
                    },
                    "script": {
                        "type": "string"
                    },
                    "scriptPath": {
                        "type": "string",
                        "description": "Path of the script in the runtime."
                    },
                    "sslCheckDomain": {
                        "type": "string"
                    },
                    "environmentVariables": {
                        "$ref": "#/components/schemas/CheckEnvironmentVariableList"
                    },
                    "setupSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the setup phase of an API check.",
                        "default": null
                    },
                    "tearDownSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
                        "default": null
                    },
                    "localSetupScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the setup phase.",
                        "default": null
                    },
                    "localTearDownScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the teardown phase.",
                        "default": null
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/privateLocations"
                    },
                    "dependencies": {
                        "$ref": "#/components/schemas/dependencies"
                    }
                },
                "required": [
                    "heartbeat",
                    "script"
                ]
            },
            "ClientCertificateRetrieve": {
                "type": "object",
                "properties": {
                    "host": {
                        "type": "string",
                        "description": "The host domain for the certificate without https://. You can use wildcards to match domains, e.g. \"*.acme.com\"",
                        "example": "www.acme.com"
                    },
                    "cert": {
                        "type": "string",
                        "description": "The client certificate in PEM format as a string. This string should retain any line breaks, e.g. it should start similar to this \"-----BEGIN CERTIFICATE-----\\nMIIEnTCCAoWgAwIBAgIJAL+WugL..."
                    },
                    "ca": {
                        "type": "string",
                        "description": "An optional CA certificate in PEM format as a string."
                    },
                    "id": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "host",
                    "cert",
                    "id"
                ]
            },
            "ClientCertificateList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ClientCertificateRetrieve"
                }
            },
            "ClientCertificateCreate": {
                "type": "object",
                "properties": {
                    "host": {
                        "type": "string",
                        "description": "The host domain for the certificate without https://. You can use wildcards to match domains, e.g. \"*.acme.com\"",
                        "example": "www.acme.com"
                    },
                    "cert": {
                        "type": "string",
                        "description": "The client certificate in PEM format as a string. This string should retain any line breaks, e.g. it should start similar to this \"-----BEGIN CERTIFICATE-----\\nMIIEnTCCAoWgAwIBAgIJAL+WugL..."
                    },
                    "ca": {
                        "type": "string",
                        "description": "An optional CA certificate in PEM format as a string."
                    },
                    "key": {
                        "type": "string",
                        "description": "The private key in PEM format as a string."
                    },
                    "passphrase": {
                        "type": "string",
                        "description": "An optional passphrase for the private key. Your passphrase is stored encrypted at rest."
                    }
                },
                "required": [
                    "host",
                    "cert"
                ]
            },
            "width": {
                "type": "string",
                "description": "Determines whether to use the full screen or focus in the center.",
                "default": "FULL",
                "enum": [
                    "FULL",
                    "960PX"
                ]
            },
            "DashboardTagList": {
                "type": "array",
                "description": "A list of one or more tags that filter which checks to display on the dashboard.",
                "example": [
                    "production"
                ],
                "items": {
                    "type": "string"
                }
            },
            "DashboardKey": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "rawKey": {
                        "type": "string",
                        "example": "da_a89026d28a0c45cf9e11b4c3637f3912"
                    },
                    "maskedKey": {
                        "type": "string",
                        "description": "The masked key value.",
                        "example": "...6a1e"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date"
                    }
                },
                "required": [
                    "id",
                    "rawKey",
                    "maskedKey",
                    "created_at"
                ]
            },
            "keys": {
                "type": "array",
                "description": "Show key for private dashboard.",
                "items": {
                    "$ref": "#/components/schemas/DashboardKey"
                }
            },
            "Dashboard": {
                "type": "object",
                "properties": {
                    "customDomain": {
                        "type": "string",
                        "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage.",
                        "example": "https://status.mycompany.com/"
                    },
                    "customUrl": {
                        "type": "string",
                        "description": "A subdomain name under \"checklyhq.com\". Needs to be unique across all users.",
                        "example": "status"
                    },
                    "logo": {
                        "type": "string",
                        "description": "A URL pointing to an image file.",
                        "example": "https://static.mycompany.com/static/images/logo.svg"
                    },
                    "favicon": {
                        "type": "string",
                        "description": "A URL pointing to an image file used as dashboard favicon.",
                        "example": "https://static.mycompany.com/static/images/icon.svg"
                    },
                    "link": {
                        "type": "string",
                        "description": "A URL link to redirect when dashboard logo is clicked on.",
                        "example": "https://www.mycompany.com/"
                    },
                    "description": {
                        "type": "string",
                        "description": "A piece of text displayed below the header or title of your dashboard.",
                        "example": "My dashboard description"
                    },
                    "width": {
                        "$ref": "#/components/schemas/width"
                    },
                    "refreshRate": {
                        "type": "number",
                        "description": "How often to refresh the dashboard in seconds.",
                        "default": 60,
                        "enum": [
                            60,
                            300,
                            600
                        ]
                    },
                    "paginate": {
                        "type": "boolean",
                        "description": "Determines of pagination is on or off.",
                        "default": true
                    },
                    "paginationRate": {
                        "type": "number",
                        "description": "How often to trigger pagination in seconds.",
                        "default": 60,
                        "enum": [
                            30,
                            60,
                            300
                        ]
                    },
                    "checksPerPage": {
                        "type": "number",
                        "description": "Number of checks displayed per page.",
                        "default": 15,
                        "minimum": 1,
                        "maximum": 20
                    },
                    "useTagsAndOperator": {
                        "type": "boolean",
                        "description": "When to use AND operator for tags lookup.",
                        "default": false
                    },
                    "hideTags": {
                        "type": "boolean",
                        "description": "Show or hide the tags on the dashboard.",
                        "default": false
                    },
                    "enableIncidents": {
                        "type": "boolean",
                        "description": "Enable or disable incidents on the dashboard.",
                        "default": false
                    },
                    "expandChecks": {
                        "type": "boolean",
                        "description": "Expand or collapse checks on the dashboard.",
                        "default": false
                    },
                    "tags": {
                        "$ref": "#/components/schemas/DashboardTagList"
                    },
                    "showHeader": {
                        "type": "boolean",
                        "description": "Show or hide header and description on the dashboard.",
                        "default": true
                    },
                    "showCheckRunLinks": {
                        "type": "boolean",
                        "description": "Show or hide check run links on the dashboard.",
                        "default": false
                    },
                    "customCSS": {
                        "type": "string",
                        "description": "Custom CSS to be applied to the dashboard.",
                        "default": ""
                    },
                    "isPrivate": {
                        "type": "boolean",
                        "description": "Determines if the dashboard is public or private.",
                        "default": false
                    },
                    "showP95": {
                        "type": "boolean",
                        "description": "Show or hide the P95 stats on the dashboard.",
                        "default": true
                    },
                    "showP99": {
                        "type": "boolean",
                        "description": "Show or hide the P99 stats on the dashboard.",
                        "default": true
                    },
                    "keys": {
                        "$ref": "#/components/schemas/keys"
                    },
                    "id": {
                        "type": "number"
                    },
                    "dashboardId": {
                        "type": "string",
                        "example": "1"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "header": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "dashboardId",
                    "created_at"
                ]
            },
            "DashboardsList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Dashboard"
                }
            },
            "DashboardCreate": {
                "type": "object",
                "properties": {
                    "customUrl": {
                        "type": "string",
                        "description": "A subdomain name under \"checklyhq.com\". Needs to be unique across all users.",
                        "example": "status"
                    },
                    "customDomain": {
                        "type": "string",
                        "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage.",
                        "example": "https://status.mycompany.com/"
                    },
                    "logo": {
                        "type": "string",
                        "description": "A URL pointing to an image file.",
                        "example": "https://static.mycompany.com/static/images/logo.svg"
                    },
                    "favicon": {
                        "type": "string",
                        "description": "A URL pointing to an image file used as dashboard favicon.",
                        "example": "https://static.mycompany.com/static/images/icon.svg"
                    },
                    "link": {
                        "type": "string",
                        "description": "A URL link to redirect when dashboard logo is clicked on.",
                        "example": "https://www.mycompany.com/"
                    },
                    "header": {
                        "type": "string",
                        "description": "A piece of text displayed at the top of your dashboard.",
                        "example": "My company status"
                    },
                    "description": {
                        "type": "string",
                        "description": "A piece of text displayed below the header or title of your dashboard.",
                        "example": "My dashboard description"
                    },
                    "width": {
                        "$ref": "#/components/schemas/width"
                    },
                    "refreshRate": {
                        "type": "number",
                        "description": "How often to refresh the dashboard in seconds.",
                        "default": 60,
                        "enum": [
                            60,
                            300,
                            600
                        ]
                    },
                    "paginate": {
                        "type": "boolean",
                        "description": "Determines of pagination is on or off.",
                        "default": true
                    },
                    "paginationRate": {
                        "type": "number",
                        "description": "How often to trigger pagination in seconds.",
                        "default": 60,
                        "enum": [
                            30,
                            60,
                            300
                        ]
                    },
                    "checksPerPage": {
                        "type": "number",
                        "description": "Number of checks displayed per page.",
                        "default": 15,
                        "minimum": 1,
                        "maximum": 20
                    },
                    "useTagsAndOperator": {
                        "type": "boolean",
                        "description": "When to use AND operator for tags lookup.",
                        "default": false
                    },
                    "hideTags": {
                        "type": "boolean",
                        "description": "Show or hide the tags on the dashboard.",
                        "default": false
                    },
                    "enableIncidents": {
                        "type": "boolean",
                        "description": "Enable or disable incidents on the dashboard.",
                        "default": false
                    },
                    "expandChecks": {
                        "type": "boolean",
                        "description": "Expand or collapse checks on the dashboard.",
                        "default": false
                    },
                    "tags": {
                        "$ref": "#/components/schemas/DashboardTagList"
                    },
                    "showHeader": {
                        "type": "boolean",
                        "description": "Show or hide header and description on the dashboard.",
                        "default": true
                    },
                    "showCheckRunLinks": {
                        "type": "boolean",
                        "description": "Show or hide check run links on the dashboard.",
                        "default": false
                    },
                    "customCSS": {
                        "type": "string",
                        "description": "Custom CSS to be applied to the dashboard.",
                        "default": ""
                    },
                    "isPrivate": {
                        "type": "boolean",
                        "description": "Determines if the dashboard is public or private.",
                        "default": false
                    },
                    "showP95": {
                        "type": "boolean",
                        "description": "Show or hide the P95 stats on the dashboard.",
                        "default": true
                    },
                    "showP99": {
                        "type": "boolean",
                        "description": "Show or hide the P99 stats on the dashboard.",
                        "default": true
                    },
                    "keys": {
                        "$ref": "#/components/schemas/keys"
                    }
                },
                "required": [
                    "header"
                ]
            },
            "Model207": {
                "type": "object",
                "properties": {
                    "customDomain": {
                        "type": "string",
                        "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage.",
                        "example": "https://status.mycompany.com/"
                    },
                    "customUrl": {
                        "type": "string",
                        "description": "A subdomain name under \"checklyhq.com\". Needs to be unique across all users.",
                        "example": "status"
                    },
                    "logo": {
                        "type": "string",
                        "description": "A URL pointing to an image file.",
                        "example": "https://static.mycompany.com/static/images/logo.svg"
                    },
                    "favicon": {
                        "type": "string",
                        "description": "A URL pointing to an image file used as dashboard favicon.",
                        "example": "https://static.mycompany.com/static/images/icon.svg"
                    },
                    "link": {
                        "type": "string",
                        "description": "A URL link to redirect when dashboard logo is clicked on.",
                        "example": "https://www.mycompany.com/"
                    },
                    "description": {
                        "type": "string",
                        "description": "A piece of text displayed below the header or title of your dashboard.",
                        "example": "My dashboard description"
                    },
                    "width": {
                        "$ref": "#/components/schemas/width"
                    },
                    "refreshRate": {
                        "type": "number",
                        "description": "How often to refresh the dashboard in seconds.",
                        "default": 60,
                        "enum": [
                            60,
                            300,
                            600
                        ]
                    },
                    "paginate": {
                        "type": "boolean",
                        "description": "Determines of pagination is on or off.",
                        "default": true
                    },
                    "paginationRate": {
                        "type": "number",
                        "description": "How often to trigger pagination in seconds.",
                        "default": 60,
                        "enum": [
                            30,
                            60,
                            300
                        ]
                    },
                    "checksPerPage": {
                        "type": "number",
                        "description": "Number of checks displayed per page.",
                        "default": 15,
                        "minimum": 1,
                        "maximum": 20
                    },
                    "useTagsAndOperator": {
                        "type": "boolean",
                        "description": "When to use AND operator for tags lookup.",
                        "default": false
                    },
                    "hideTags": {
                        "type": "boolean",
                        "description": "Show or hide the tags on the dashboard.",
                        "default": false
                    },
                    "enableIncidents": {
                        "type": "boolean",
                        "description": "Enable or disable incidents on the dashboard.",
                        "default": false
                    },
                    "expandChecks": {
                        "type": "boolean",
                        "description": "Expand or collapse checks on the dashboard.",
                        "default": false
                    },
                    "tags": {
                        "$ref": "#/components/schemas/DashboardTagList"
                    },
                    "showHeader": {
                        "type": "boolean",
                        "description": "Show or hide header and description on the dashboard.",
                        "default": true
                    },
                    "showCheckRunLinks": {
                        "type": "boolean",
                        "description": "Show or hide check run links on the dashboard.",
                        "default": false
                    },
                    "customCSS": {
                        "type": "string",
                        "description": "Custom CSS to be applied to the dashboard.",
                        "default": ""
                    },
                    "isPrivate": {
                        "type": "boolean",
                        "description": "Determines if the dashboard is public or private.",
                        "default": false
                    },
                    "showP95": {
                        "type": "boolean",
                        "description": "Show or hide the P95 stats on the dashboard.",
                        "default": true
                    },
                    "showP99": {
                        "type": "boolean",
                        "description": "Show or hide the P99 stats on the dashboard.",
                        "default": true
                    },
                    "keys": {
                        "$ref": "#/components/schemas/keys"
                    },
                    "header": {
                        "type": "string",
                        "description": "A piece of text displayed at the top of your dashboard.",
                        "example": "My company status"
                    }
                }
            },
            "Model208": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "checkId": {
                        "type": "string"
                    },
                    "errorHash": {
                        "type": "string",
                        "description": "The hash of the cleaned error message for quicker deduplication."
                    },
                    "rawErrorMessage": {
                        "type": "string",
                        "description": "The raw error message as recorded in a check result."
                    },
                    "cleanedErrorMessage": {
                        "type": "string",
                        "description": "The cleaned and sanitized error message used for hashing and grouping."
                    },
                    "firstSeen": {
                        "type": "string",
                        "format": "date"
                    },
                    "lastSeen": {
                        "type": "string",
                        "format": "date"
                    },
                    "archivedUntilNextEvent": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "id",
                    "checkId",
                    "errorHash",
                    "rawErrorMessage",
                    "cleanedErrorMessage",
                    "firstSeen",
                    "lastSeen",
                    "archivedUntilNextEvent"
                ]
            },
            "ErrorGroupsList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Model208"
                }
            },
            "ErrorGroup": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "checkId": {
                        "type": "string"
                    },
                    "errorHash": {
                        "type": "string",
                        "description": "The hash of the cleaned error message for quicker deduplication."
                    },
                    "rawErrorMessage": {
                        "type": "string",
                        "description": "The raw error message as recorded in a check result."
                    },
                    "cleanedErrorMessage": {
                        "type": "string",
                        "description": "The cleaned and sanitized error message used for hashing and grouping."
                    },
                    "firstSeen": {
                        "type": "string",
                        "format": "date"
                    },
                    "lastSeen": {
                        "type": "string",
                        "format": "date"
                    },
                    "archivedUntilNextEvent": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "id",
                    "checkId",
                    "errorHash",
                    "rawErrorMessage",
                    "cleanedErrorMessage",
                    "firstSeen",
                    "lastSeen",
                    "archivedUntilNextEvent"
                ]
            },
            "ErrorGroupPatch": {
                "type": "object",
                "properties": {
                    "archiveForEver": {
                        "type": "boolean"
                    },
                    "archivedUntilNextEvent": {
                        "type": "boolean"
                    }
                }
            },
            "impact": {
                "type": "string",
                "description": "Used to indicate the impact or severity.",
                "example": "MINOR",
                "default": "MINOR",
                "enum": [
                    "MAINTENANCE",
                    "MAJOR",
                    "MINOR"
                ]
            },
            "Model209": {
                "type": "string",
                "description": "The incident update status. Must be one of INVESTIGATING,IDENTIFIED,MONITORING,RESOLVED,MAINTENANCE",
                "example": "INVESTIGATING",
                "enum": [
                    "INVESTIGATING",
                    "IDENTIFIED",
                    "MONITORING",
                    "RESOLVED",
                    "MAINTENANCE"
                ]
            },
            "Model210": {
                "type": "object",
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/Model209"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description about the status update.",
                        "example": "We found the issue and we are working on it."
                    }
                },
                "required": [
                    "status",
                    "description"
                ]
            },
            "incidentUpdates": {
                "type": "array",
                "description": "The first incident update with the status and description. It must be only one element.",
                "example": [
                    {
                        "status": "INVESTIGATING",
                        "description": "The service is down and affects all the regions."
                    }
                ],
                "x-constraint": {
                    "length": 1
                },
                "items": {
                    "$ref": "#/components/schemas/Model210"
                }
            },
            "Model211": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "A name used to describe the incident.",
                        "example": "Service outage"
                    },
                    "impact": {
                        "$ref": "#/components/schemas/impact"
                    },
                    "startedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Used to indicate when incident starts to be active.",
                        "example": "2022-11-25 12:34:56"
                    },
                    "stoppedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Used to indicate when incident turns to inactive.",
                        "example": "2022-11-25 13:34:56"
                    },
                    "dashboardId": {
                        "type": "number",
                        "description": "The dashboard ID where the incident will be shown.",
                        "example": 1234
                    },
                    "incidentUpdates": {
                        "$ref": "#/components/schemas/incidentUpdates"
                    }
                },
                "required": [
                    "name",
                    "impact",
                    "dashboardId",
                    "incidentUpdates"
                ]
            },
            "Model212": {
                "type": "string",
                "description": "The incident update status. Must be one of INVESTIGATING,IDENTIFIED,MONITORING,RESOLVED,MAINTENANCE",
                "example": "INVESTIGATING",
                "enum": [
                    "INVESTIGATING",
                    "IDENTIFIED",
                    "MONITORING",
                    "RESOLVED",
                    "MAINTENANCE"
                ]
            },
            "Model213": {
                "type": "object",
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/Model212"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description about the status update.",
                        "example": "We found the issue and we are working on it."
                    },
                    "id": {
                        "type": "string",
                        "description": "The incident update universal and unique identificator.",
                        "example": "e50ad839-1b90-4955-b716-1c6edbda57cb",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date",
                        "description": "The timestamp when the incident update was created.",
                        "example": "2022-09-08T19:41:28.658Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date",
                        "description": "The timestamp when last the update.",
                        "example": "2022-09-08T20:41:28.658Z"
                    }
                },
                "required": [
                    "status",
                    "description",
                    "id",
                    "created_at",
                    "updated_at"
                ]
            },
            "Model214": {
                "type": "array",
                "description": "The first incident update with the status and description. It must be only one element.",
                "example": [
                    {
                        "id": "01f477f8-4293-4e1c-82bd-99797720434c",
                        "status": "RESOLVED",
                        "description": "The service is up and all is recovered.",
                        "incidentId": "3abcfdfe-ae2d-4632-8dd1-18dd871e18fc",
                        "created_at": "2022-09-08T20:56:48.425Z",
                        "updated_at": null
                    },
                    {
                        "id": "1f0640f8-1910-4137-b91d-ed152faa92e6",
                        "status": "INVESTIGATING",
                        "description": "The service is down and affects all the regions.",
                        "incidentId": "3abcfdfe-ae2d-4632-8dd1-18dd871e18fc",
                        "created_at": "2022-09-08T18:56:48.425Z",
                        "updated_at": null
                    }
                ],
                "minItems": 1,
                "items": {
                    "$ref": "#/components/schemas/Model213"
                }
            },
            "Model215": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "A name used to describe the incident.",
                        "example": "Service outage"
                    },
                    "impact": {
                        "$ref": "#/components/schemas/impact"
                    },
                    "startedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Used to indicate when incident starts to be active.",
                        "example": "2022-11-25 12:34:56"
                    },
                    "stoppedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Used to indicate when incident turns to inactive.",
                        "example": "2022-11-25 13:34:56"
                    },
                    "dashboardId": {
                        "type": "number",
                        "description": "The dashboard ID where the incident will be shown.",
                        "example": 1234
                    },
                    "id": {
                        "type": "string",
                        "description": "The incident universal and unique identificator.",
                        "example": "e50ad839-1b90-4955-b716-1c6edbda57cb",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date",
                        "description": "The timestamp when the incident was created.",
                        "example": "2022-09-08T19:41:28.658Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date",
                        "description": "The timestamp when last the incident update.",
                        "example": "2022-09-08T20:41:28.658Z"
                    },
                    "incidentUpdates": {
                        "$ref": "#/components/schemas/Model214"
                    }
                },
                "required": [
                    "name",
                    "impact",
                    "dashboardId",
                    "id",
                    "created_at",
                    "updated_at",
                    "incidentUpdates"
                ]
            },
            "Model216": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "A name used to describe the incident.",
                        "example": "Service outage"
                    },
                    "impact": {
                        "$ref": "#/components/schemas/impact"
                    },
                    "startedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Used to indicate when incident starts to be active.",
                        "example": "2022-11-25 12:34:56"
                    },
                    "stoppedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Used to indicate when incident turns to inactive.",
                        "example": "2022-11-25 13:34:56"
                    }
                },
                "required": [
                    "name",
                    "impact"
                ]
            },
            "Model217": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "A name used to describe the incident.",
                        "example": "Service outage"
                    },
                    "impact": {
                        "$ref": "#/components/schemas/impact"
                    },
                    "startedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Used to indicate when incident starts to be active.",
                        "example": "2022-11-25 12:34:56"
                    },
                    "stoppedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Used to indicate when incident turns to inactive.",
                        "example": "2022-11-25 13:34:56"
                    },
                    "dashboardId": {
                        "type": "number",
                        "description": "The dashboard ID where the incident will be shown.",
                        "example": 1234
                    },
                    "id": {
                        "type": "string",
                        "description": "The incident universal and unique identificator.",
                        "example": "e50ad839-1b90-4955-b716-1c6edbda57cb",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date",
                        "description": "The timestamp when the incident was created.",
                        "example": "2022-09-08T19:41:28.658Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date",
                        "description": "The timestamp when last the incident update.",
                        "example": "2022-09-08T20:41:28.658Z"
                    },
                    "incidentUpdates": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "impact",
                    "dashboardId",
                    "id",
                    "created_at",
                    "updated_at"
                ]
            },
            "IncidentResults": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Model213"
                }
            },
            "Model218": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description about the status update.",
                        "example": "We found the issue and we are working on it."
                    }
                },
                "required": [
                    "description"
                ]
            },
            "Location": {
                "type": "object",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "The unique identifier of this location.",
                        "example": "us-east-1"
                    },
                    "name": {
                        "type": "string",
                        "description": "Friendly name of this location.",
                        "example": "N. Virginia"
                    }
                },
                "required": [
                    "region",
                    "name"
                ]
            },
            "LocationList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Location"
                }
            },
            "MaintenanceWindowTagList": {
                "type": "array",
                "description": "The names of the checks and groups maintenance window should apply to.",
                "example": [
                    "production"
                ],
                "items": {
                    "type": "string"
                }
            },
            "MaintenanceWindow": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "description": "The id of the maintenance window.",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "The maintenance window name.",
                        "example": "Maintenance Window"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/MaintenanceWindowTagList"
                    },
                    "startsAt": {
                        "type": "string",
                        "format": "date",
                        "description": "The start date of the maintenance window.",
                        "example": "2022-08-24"
                    },
                    "endsAt": {
                        "type": "string",
                        "format": "date",
                        "description": "The end date of the maintenance window.",
                        "example": "2022-08-25"
                    },
                    "repeatInterval": {
                        "type": "number",
                        "description": "The repeat interval of the maintenance window from the first occurance.",
                        "example": "null",
                        "default": null,
                        "minimum": 1
                    },
                    "repeatUnit": {
                        "type": "string",
                        "description": "The repeat strategy for the maintenance window.",
                        "example": "DAY"
                    },
                    "repeatEndsAt": {
                        "type": "string",
                        "format": "date",
                        "description": "The end date where the maintenance window should stop repeating.",
                        "example": "null"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date",
                        "description": "The creation date of the maintenance window."
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date",
                        "description": "The last date that the maintenance window was updated."
                    }
                },
                "required": [
                    "id",
                    "name",
                    "startsAt",
                    "endsAt",
                    "repeatUnit",
                    "created_at",
                    "updated_at"
                ]
            },
            "MaintenanceWindowList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/MaintenanceWindow"
                }
            },
            "MaintenanceWindowCreate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The maintenance window name.",
                        "example": "Maintenance Window"
                    },
                    "tags": {
                        "$ref": "#/components/schemas/MaintenanceWindowTagList"
                    },
                    "startsAt": {
                        "type": "string",
                        "format": "date",
                        "description": "The start date of the maintenance window.",
                        "example": "2022-08-24"
                    },
                    "endsAt": {
                        "type": "string",
                        "format": "date",
                        "description": "The end date of the maintenance window.",
                        "example": "2022-08-25"
                    },
                    "repeatInterval": {
                        "type": "number",
                        "description": "The repeat interval of the maintenance window from the first occurance.",
                        "example": "null",
                        "default": null,
                        "minimum": 1
                    },
                    "repeatUnit": {
                        "type": "string",
                        "description": "The repeat strategy for the maintenance window.",
                        "example": "DAY"
                    },
                    "repeatEndsAt": {
                        "type": "string",
                        "format": "date",
                        "description": "The end date where the maintenance window should stop repeating.",
                        "example": "null"
                    }
                },
                "required": [
                    "name",
                    "startsAt",
                    "endsAt",
                    "repeatUnit"
                ]
            },
            "CheckAssignment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "4295d566-18bd-47ef-b22b-129a64ffd589",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "checkId": {
                        "type": "string",
                        "description": "The ID of the check.",
                        "example": "25039e6d-8631-4ee8-950a-bf7c893c3c1c",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "privateLocationId": {
                        "type": "string",
                        "description": "The ID of the assigned private location.",
                        "example": "cc3f943d-7a99-49f4-94aa-bddbaaad6eb0",
                        "x-format": {
                            "guid": true
                        }
                    }
                },
                "required": [
                    "id",
                    "checkId",
                    "privateLocationId"
                ]
            },
            "checkAssignments": {
                "type": "array",
                "description": "The check this private location has assigned.",
                "items": {
                    "$ref": "#/components/schemas/CheckAssignment"
                }
            },
            "GroupAssignment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "450d2f06-2300-46ed-8982-b63cd53fc494",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "groupId": {
                        "type": "number",
                        "description": "The ID of the group.",
                        "example": 10
                    },
                    "privateLocationId": {
                        "type": "string",
                        "description": "The ID of the assigned private location.",
                        "example": "895c13cc-7de2-46df-9985-cb01b995a3cf",
                        "x-format": {
                            "guid": true
                        }
                    }
                },
                "required": [
                    "id",
                    "groupId",
                    "privateLocationId"
                ]
            },
            "groupAssignments": {
                "type": "array",
                "description": "The group this private location has assigned.",
                "items": {
                    "$ref": "#/components/schemas/GroupAssignment"
                }
            },
            "privateLocationKeys": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "fed3ada8-7d9b-4634-a0fe-471afe0518b6",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "rawKey": {
                        "type": "string",
                        "example": "pl_a89026d28a0c45cf9e11b4c3637f3912"
                    },
                    "maskedKey": {
                        "type": "string",
                        "description": "The masked key value.",
                        "example": "...6a1e"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date"
                    }
                },
                "required": [
                    "id",
                    "rawKey",
                    "maskedKey",
                    "created_at"
                ]
            },
            "Model219": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/privateLocationKeys"
                }
            },
            "privateLocationsSchema": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "0baf2a80-7266-44af-b56c-2af7086782ee",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name assigned to the private location.",
                        "example": "New Private Location"
                    },
                    "slugName": {
                        "type": "string",
                        "description": "Valid slug name.",
                        "example": "new-private-location"
                    },
                    "icon": {
                        "type": "string",
                        "description": "The private location icon.",
                        "example": "location"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "checkAssignments": {
                        "$ref": "#/components/schemas/checkAssignments"
                    },
                    "groupAssignments": {
                        "$ref": "#/components/schemas/groupAssignments"
                    },
                    "keys": {
                        "$ref": "#/components/schemas/Model219"
                    },
                    "proxyUrl": {
                        "type": "string",
                        "description": "A proxy for outgoing API check HTTP calls from your private location.",
                        "example": "https://user:password@164.92.149.127:3128"
                    },
                    "lastSeen": {
                        "type": "string",
                        "format": "date"
                    },
                    "agentCount": {
                        "type": "number"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "slugName",
                    "created_at"
                ]
            },
            "privateLocationsListSchema": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/privateLocationsSchema"
                }
            },
            "privateLocationCreate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name assigned to the private location.",
                        "example": "New Private Location"
                    },
                    "slugName": {
                        "type": "string",
                        "description": "Valid slug name.",
                        "example": "new-private-location",
                        "pattern": "^((?!((us(-gov)?|ap|ca|cn|eu|sa|af|me)-(central|(north|south)?(east|west)?)-\\d+))[a-zA-Z0-9-]{1,30})$"
                    },
                    "icon": {
                        "type": "string",
                        "example": "location",
                        "default": "location"
                    },
                    "proxyUrl": {
                        "type": "string",
                        "description": "A proxy for outgoing API check HTTP calls from your private location.",
                        "example": "https://user:password@164.92.149.127:3128"
                    }
                },
                "required": [
                    "name",
                    "slugName"
                ]
            },
            "Model220": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/privateLocationKeys"
                }
            },
            "commonPrivateLocationSchemaResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "0baf2a80-7266-44af-b56c-2af7086782ee",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name assigned to the private location.",
                        "example": "New Private Location"
                    },
                    "slugName": {
                        "type": "string",
                        "description": "Valid slug name.",
                        "example": "new-private-location"
                    },
                    "icon": {
                        "type": "string",
                        "description": "The private location icon.",
                        "example": "location"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "checkAssignments": {
                        "$ref": "#/components/schemas/checkAssignments"
                    },
                    "groupAssignments": {
                        "$ref": "#/components/schemas/groupAssignments"
                    },
                    "keys": {
                        "$ref": "#/components/schemas/Model220"
                    },
                    "proxyUrl": {
                        "type": "string",
                        "description": "A proxy for outgoing API check HTTP calls from your private location.",
                        "example": "https://user:password@164.92.149.127:3128"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "slugName",
                    "created_at"
                ]
            },
            "privateLocationUpdate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name assigned to the private location.",
                        "example": "New Private Location"
                    },
                    "icon": {
                        "type": "string",
                        "example": "location"
                    },
                    "proxyUrl": {
                        "type": "string",
                        "description": "A proxy for outgoing API check HTTP calls from your private location.",
                        "example": "https://user:password@164.92.149.127:3128"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "timestamps": {
                "type": "array",
                "items": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "queueSize": {
                "type": "array",
                "items": {
                    "type": "number"
                }
            },
            "oldestScheduledCheckRun": {
                "type": "array",
                "items": {
                    "type": "number"
                }
            },
            "privateLocationsMetricsHistoryResponseSchema": {
                "type": "object",
                "properties": {
                    "timestamps": {
                        "$ref": "#/components/schemas/timestamps"
                    },
                    "queueSize": {
                        "$ref": "#/components/schemas/queueSize"
                    },
                    "oldestScheduledCheckRun": {
                        "$ref": "#/components/schemas/oldestScheduledCheckRun"
                    }
                }
            },
            "ReportingTagList": {
                "type": "array",
                "description": "Check tags.",
                "example": [
                    "production"
                ],
                "items": {
                    "type": "string"
                }
            },
            "ReportingAggregate": {
                "type": "object",
                "properties": {
                    "successRatio": {
                        "type": "number",
                        "description": "Success ratio of the check over selected date range. Percentage is in decimal form.",
                        "example": 50,
                        "minimum": 0
                    },
                    "avg": {
                        "type": "number",
                        "description": "Average response time of the check over selected date range in milliseconds.",
                        "example": 100,
                        "minimum": 0
                    },
                    "p95": {
                        "type": "number",
                        "description": "P95 response time of the check over selected date range in milliseconds.",
                        "example": 200,
                        "minimum": 0
                    },
                    "p99": {
                        "type": "number",
                        "description": "P99 response time of the check over selected date range in milliseconds.",
                        "example": 100,
                        "minimum": 0
                    }
                },
                "required": [
                    "successRatio",
                    "avg",
                    "p95",
                    "p99"
                ]
            },
            "Reporting": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Check name.",
                        "example": "API Check"
                    },
                    "checkId": {
                        "type": "string",
                        "description": "Check ID.",
                        "example": "d2881e09-411b-4c8d-84b8-fe05fbca80b6"
                    },
                    "checkType": {
                        "type": "string",
                        "description": "Check type.",
                        "example": "API"
                    },
                    "deactivated": {
                        "type": "boolean",
                        "description": "Check deactivated.",
                        "default": false
                    },
                    "tags": {
                        "$ref": "#/components/schemas/ReportingTagList"
                    },
                    "aggregate": {
                        "$ref": "#/components/schemas/ReportingAggregate"
                    }
                },
                "required": [
                    "name",
                    "checkId",
                    "checkType",
                    "deactivated",
                    "tags"
                ]
            },
            "ReportingList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Reporting"
                }
            },
            "stage": {
                "type": "string",
                "description": "Current life stage of a runtime.",
                "example": "STABLE",
                "enum": [
                    "ALPHA",
                    "BETA",
                    "CURRENT",
                    "DEPRECATED",
                    "REMOVED",
                    "STABLE"
                ]
            },
            "DependenciesList": {
                "type": "object",
                "description": "An object with all dependency package names and versions as in a standard package.json.",
                "example": {
                    "@playwright/test": "1.51.1",
                    "@axe-core/playwright": "4.10.1",
                    "@azure/identity": "4.9.1",
                    "@azure/keyvault-secrets": "4.9.0",
                    "@checkly/playwright-helpers": "1.0.3",
                    "@faker-js/faker": "9.7.0",
                    "@google-cloud/local-auth": "3.0.1",
                    "@opentelemetry/api": "1.9.0",
                    "@opentelemetry/exporter-metrics-otlp-grpc": "0.53.0",
                    "@opentelemetry/sdk-metrics": "1.26.0",
                    "@opentelemetry/sdk-trace-base": "1.26.0",
                    "@t3-oss/env-nextjs": "0.11.1",
                    "@xmldom/xmldom": "0.9.2",
                    "aws4": "1.13.2",
                    "axios": "0.28.0",
                    "btoa": "1.2.1",
                    "crypto-js": "4.2.0",
                    "date-fns": "3.3.1",
                    "date-fns-tz": "3.1.3",
                    "dotenv": "16.4.5",
                    "ethers": "6.13.2",
                    "expect": "29.7.0",
                    "form-data": "4.0.4",
                    "gmail-api-parse-message-ts": "2.2.33",
                    "google-auth-library": "9.14.1",
                    "googleapis": "144.0.0",
                    "graphql": "16.9.0",
                    "graphql-tag": "2.12.6",
                    "jose": "5.9.2",
                    "jsdom": "25.0.0",
                    "jsonwebtoken": "9.0.2",
                    "lodash": "4.17.21",
                    "long": "5.2.3",
                    "moment": "2.30.1",
                    "nice-grpc": "2.1.12",
                    "nice-grpc-client-middleware-deadline": "2.0.15",
                    "nice-grpc-client-middleware-devtools": "1.0.7",
                    "nice-grpc-client-middleware-retry": "3.1.11",
                    "nice-grpc-common": "2.0.2",
                    "nice-grpc-error-details": "0.2.9",
                    "nice-grpc-opentelemetry": "0.1.18",
                    "nice-grpc-prometheus": "0.2.7",
                    "nice-grpc-server-health": "2.0.14",
                    "nice-grpc-server-middleware-terminator": "2.0.14",
                    "nice-grpc-server-reflection": "2.0.14",
                    "nice-grpc-web": "3.3.7",
                    "node-pop3": "0.9.1",
                    "otpauth": "9.4.0",
                    "playwright": "1.51.1",
                    "pdf2json": "3.1.4",
                    "prisma": "6.6.0",
                    "protobufjs": "7.5.0",
                    "tedious": "18.6.1",
                    "twilio": "5.3.0",
                    "uuid": "11.1.0",
                    "ws": "8.18.1",
                    "xml-crypto": "6.1.1",
                    "xml-encryption": "3.1.0",
                    "zod": "3.24.3",
                    "@clerk/testing": "1.5.1",
                    "mailosaur": "8.6.1",
                    "gaxios": "6.7.1",
                    "@kubernetes/client-node": "1.1.2",
                    "mysql": "2.18.1"
                }
            },
            "Runtime": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The unique name of this runtime.",
                        "example": "2025.04"
                    },
                    "multiStepSupport": {
                        "type": "boolean",
                        "description": "Does this runtime supports multi step checks"
                    },
                    "nodeJsVersion": {
                        "type": "string",
                        "description": "The full Node.js version available in this runtime.",
                        "example": "v18.20.3"
                    },
                    "stage": {
                        "$ref": "#/components/schemas/stage"
                    },
                    "runtimeEndOfLife": {
                        "type": "string",
                        "description": "Date which a runtime will be removed from our platform.",
                        "example": "12/31/2022"
                    },
                    "description": {
                        "type": "string",
                        "description": "A short, human readable description of the main updates in this runtime.",
                        "example": "Main updates are Playwright 1.51.1"
                    },
                    "dependencies": {
                        "$ref": "#/components/schemas/DependenciesList"
                    }
                },
                "required": [
                    "name",
                    "multiStepSupport",
                    "nodeJsVersion",
                    "dependencies"
                ]
            },
            "RuntimeList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Runtime"
                }
            },
            "Snippet": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "The snippet name.",
                        "example": "Snippet"
                    },
                    "script": {
                        "type": "string",
                        "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.",
                        "example": "request.url = request.url + '/extra'"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "SnippetList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Snippet"
                }
            },
            "SnippetCreate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The snippet name.",
                        "example": "Snippet"
                    },
                    "script": {
                        "type": "string",
                        "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.",
                        "example": "request.url = request.url + '/extra'"
                    }
                },
                "required": [
                    "name",
                    "script"
                ]
            },
            "light": {
                "type": "object",
                "properties": {
                    "bodyBackgroundColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "headerBackgroundColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "headerFontColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "titleFontColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "bodyFontColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "bodyFontColorMuted": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "navigationFontColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "linkFontColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "cardBackgroundColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "borderColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "primaryButtonBackgroundColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "primaryButtonFontColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    }
                },
                "required": [
                    "bodyBackgroundColor",
                    "headerBackgroundColor",
                    "headerFontColor",
                    "titleFontColor",
                    "bodyFontColor",
                    "bodyFontColorMuted",
                    "navigationFontColor",
                    "linkFontColor",
                    "cardBackgroundColor",
                    "borderColor",
                    "primaryButtonBackgroundColor",
                    "primaryButtonFontColor"
                ]
            },
            "dark": {
                "type": "object",
                "properties": {
                    "bodyBackgroundColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "headerBackgroundColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "headerFontColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "titleFontColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "bodyFontColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "bodyFontColorMuted": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "navigationFontColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "linkFontColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "cardBackgroundColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "borderColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "primaryButtonBackgroundColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    },
                    "primaryButtonFontColor": {
                        "type": "string",
                        "pattern": "^#([0-9A-F]{3}|[0-9A-F]{6})$"
                    }
                },
                "required": [
                    "bodyBackgroundColor",
                    "headerBackgroundColor",
                    "headerFontColor",
                    "titleFontColor",
                    "bodyFontColor",
                    "bodyFontColorMuted",
                    "navigationFontColor",
                    "linkFontColor",
                    "cardBackgroundColor",
                    "borderColor",
                    "primaryButtonBackgroundColor",
                    "primaryButtonFontColor"
                ]
            },
            "themeColors": {
                "type": "object",
                "properties": {
                    "light": {
                        "$ref": "#/components/schemas/light"
                    },
                    "dark": {
                        "$ref": "#/components/schemas/dark"
                    }
                },
                "required": [
                    "light",
                    "dark"
                ]
            },
            "defaultTheme": {
                "type": "string",
                "default": "AUTO",
                "enum": [
                    "LIGHT",
                    "DARK",
                    "AUTO"
                ]
            },
            "Model221": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "checks": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Model221"
                }
            },
            "Model222": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "accountId": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "checks": {
                        "$ref": "#/components/schemas/checks"
                    }
                },
                "required": [
                    "name",
                    "id",
                    "accountId",
                    "created_at"
                ]
            },
            "services": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Model222"
                }
            },
            "Model223": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "services": {
                        "$ref": "#/components/schemas/services"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "created_at"
                ]
            },
            "cards": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Model223"
                }
            },
            "Model224": {
                "type": "string",
                "enum": [
                    "CRITICAL",
                    "MAJOR",
                    "MEDIUM",
                    "MINOR"
                ],
                "maxLength": 1
            },
            "Model225": {
                "type": "string",
                "enum": [
                    "INVESTIGATING",
                    "IDENTIFIED",
                    "MONITORING",
                    "RESOLVED"
                ]
            },
            "Model226": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/Model225"
                    },
                    "publicIncidentUpdateDate": {
                        "type": "string",
                        "format": "date-time",
                        "default": "2025-10-14T10:55:36.513Z"
                    },
                    "notifySubscribers": {
                        "type": "boolean",
                        "default": false
                    },
                    "id": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    }
                },
                "required": [
                    "description",
                    "id",
                    "created_at"
                ]
            },
            "Model227": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Model226"
                }
            },
            "lastUpdateStatus": {
                "type": "string",
                "enum": [
                    "INVESTIGATING",
                    "IDENTIFIED",
                    "MONITORING",
                    "RESOLVED"
                ]
            },
            "Model228": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "severity": {
                        "$ref": "#/components/schemas/Model224"
                    },
                    "id": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "services": {
                        "$ref": "#/components/schemas/services"
                    },
                    "incidentUpdates": {
                        "$ref": "#/components/schemas/Model227"
                    },
                    "lastUpdateStatus": {
                        "$ref": "#/components/schemas/lastUpdateStatus"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date"
                    }
                },
                "required": [
                    "name",
                    "severity",
                    "id",
                    "services",
                    "lastUpdateStatus",
                    "created_at"
                ]
            },
            "incidents": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Model228"
                }
            },
            "Model229": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "x-convert": {
                            "case": "lower"
                        }
                    },
                    "customDomain": {
                        "type": "string",
                        "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage.",
                        "x-convert": {
                            "case": "lower"
                        }
                    },
                    "themeColors": {
                        "$ref": "#/components/schemas/themeColors"
                    },
                    "logo": {
                        "type": "string"
                    },
                    "redirectTo": {
                        "type": "string",
                        "x-format": {
                            "uri": true
                        }
                    },
                    "favicon": {
                        "type": "string"
                    },
                    "defaultTheme": {
                        "$ref": "#/components/schemas/defaultTheme"
                    },
                    "cards": {
                        "$ref": "#/components/schemas/cards"
                    },
                    "id": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "accountId": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "incidents": {
                        "$ref": "#/components/schemas/incidents"
                    }
                },
                "required": [
                    "name",
                    "url",
                    "id",
                    "accountId",
                    "created_at"
                ]
            },
            "entries": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Model229"
                }
            },
            "Model230": {
                "type": "object",
                "properties": {
                    "length": {
                        "type": "integer"
                    },
                    "entries": {
                        "$ref": "#/components/schemas/entries"
                    },
                    "nextId": {
                        "type": "string"
                    }
                },
                "required": [
                    "length",
                    "entries"
                ]
            },
            "Model231": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    }
                }
            },
            "Model232": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Model231"
                }
            },
            "Model233": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "statusPageId": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "services": {
                        "$ref": "#/components/schemas/Model232"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "Model234": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Model233"
                }
            },
            "Model235": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "x-convert": {
                            "case": "lower"
                        }
                    },
                    "customDomain": {
                        "type": "string",
                        "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage.",
                        "x-convert": {
                            "case": "lower"
                        }
                    },
                    "logo": {
                        "type": "string"
                    },
                    "redirectTo": {
                        "type": "string",
                        "x-format": {
                            "uri": true
                        }
                    },
                    "favicon": {
                        "type": "string"
                    },
                    "defaultTheme": {
                        "$ref": "#/components/schemas/defaultTheme"
                    },
                    "cards": {
                        "$ref": "#/components/schemas/Model234"
                    }
                },
                "required": [
                    "name",
                    "url",
                    "cards"
                ]
            },
            "Model236": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "x-convert": {
                            "case": "lower"
                        }
                    },
                    "customDomain": {
                        "type": "string",
                        "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage.",
                        "x-convert": {
                            "case": "lower"
                        }
                    },
                    "logo": {
                        "type": "string"
                    },
                    "redirectTo": {
                        "type": "string",
                        "x-format": {
                            "uri": true
                        }
                    },
                    "favicon": {
                        "type": "string"
                    },
                    "defaultTheme": {
                        "$ref": "#/components/schemas/defaultTheme"
                    },
                    "cards": {
                        "$ref": "#/components/schemas/cards"
                    },
                    "id": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    }
                },
                "required": [
                    "name",
                    "url",
                    "id"
                ]
            },
            "Model237": {
                "type": "string",
                "enum": [
                    "CRITICAL",
                    "MAJOR",
                    "MEDIUM",
                    "MINOR"
                ],
                "maxLength": 1
            },
            "Model238": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Model226"
                }
            },
            "Model239": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "severity": {
                        "$ref": "#/components/schemas/Model237"
                    },
                    "id": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "services": {
                        "$ref": "#/components/schemas/services"
                    },
                    "incidentUpdates": {
                        "$ref": "#/components/schemas/Model238"
                    },
                    "lastUpdateStatus": {
                        "$ref": "#/components/schemas/lastUpdateStatus"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date"
                    }
                },
                "required": [
                    "name",
                    "severity",
                    "id",
                    "services",
                    "incidentUpdates",
                    "lastUpdateStatus",
                    "created_at"
                ]
            },
            "Model240": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Model239"
                }
            },
            "Model241": {
                "type": "object",
                "properties": {
                    "length": {
                        "type": "integer"
                    },
                    "entries": {
                        "$ref": "#/components/schemas/Model240"
                    },
                    "nextId": {
                        "type": "string"
                    }
                },
                "required": [
                    "length",
                    "entries"
                ]
            },
            "Model242": {
                "type": "string",
                "enum": [
                    "CRITICAL",
                    "MAJOR",
                    "MEDIUM",
                    "MINOR"
                ],
                "maxLength": 1
            },
            "Model243": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "accountId": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "checks": {
                        "$ref": "#/components/schemas/checks"
                    }
                },
                "required": [
                    "name",
                    "id",
                    "accountId"
                ]
            },
            "Model244": {
                "type": "array",
                "minItems": 1,
                "items": {
                    "$ref": "#/components/schemas/Model243"
                }
            },
            "Model245": {
                "type": "string",
                "enum": [
                    "INVESTIGATING",
                    "IDENTIFIED",
                    "MONITORING",
                    "RESOLVED"
                ]
            },
            "Model246": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/Model245"
                    },
                    "publicIncidentUpdateDate": {
                        "type": "string",
                        "format": "date-time",
                        "default": "2025-10-14T10:55:36.573Z"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "notifySubscribers": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "required": [
                    "description"
                ]
            },
            "Model247": {
                "type": "array",
                "x-constraint": {
                    "length": 1
                },
                "items": {
                    "$ref": "#/components/schemas/Model246"
                }
            },
            "Model248": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "lastUpdateStatus": {
                        "$ref": "#/components/schemas/lastUpdateStatus"
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "severity": {
                        "$ref": "#/components/schemas/Model242"
                    },
                    "services": {
                        "$ref": "#/components/schemas/Model244"
                    },
                    "incidentUpdates": {
                        "$ref": "#/components/schemas/Model247"
                    }
                },
                "required": [
                    "name",
                    "severity",
                    "services",
                    "incidentUpdates"
                ]
            },
            "Model249": {
                "type": "string",
                "enum": [
                    "CRITICAL",
                    "MAJOR",
                    "MEDIUM",
                    "MINOR"
                ],
                "maxLength": 1
            },
            "Model250": {
                "type": "array",
                "minItems": 1,
                "items": {
                    "$ref": "#/components/schemas/Model243"
                }
            },
            "Model251": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "x-format": {
                            "guid": true
                        }
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "lastUpdateStatus": {
                        "$ref": "#/components/schemas/lastUpdateStatus"
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "severity": {
                        "$ref": "#/components/schemas/Model249"
                    },
                    "services": {
                        "$ref": "#/components/schemas/Model250"
                    }
                },
                "required": [
                    "name",
                    "severity",
                    "services"
                ]
            },
            "Model252": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Model246"
                }
            },
            "Model253": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Model222"
                }
            },
            "Model254": {
                "type": "object",
                "properties": {
                    "length": {
                        "type": "integer"
                    },
                    "entries": {
                        "$ref": "#/components/schemas/Model253"
                    },
                    "nextId": {
                        "type": "string"
                    }
                },
                "required": [
                    "length",
                    "entries"
                ]
            },
            "Model255": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "Model256": {
                "type": "string",
                "description": "The type of subscription.",
                "enum": [
                    "EMAIL"
                ]
            },
            "Model257": {
                "type": "string",
                "description": "The status of the subscription.",
                "enum": [
                    "PENDING",
                    "VERIFIED"
                ]
            },
            "Subscription": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the subscription."
                    },
                    "type": {
                        "$ref": "#/components/schemas/Model256"
                    },
                    "address": {
                        "type": "string",
                        "description": "The email address to subscribe to the status page.",
                        "x-format": {
                            "email": true
                        }
                    },
                    "status": {
                        "$ref": "#/components/schemas/Model257"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date",
                        "description": "The date the subscription was created."
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date",
                        "description": "The date the subscription was last updated."
                    }
                },
                "required": [
                    "id",
                    "type",
                    "address",
                    "status",
                    "created_at",
                    "updated_at"
                ]
            },
            "SubscriptionsList": {
                "type": "array",
                "description": "The list of subscriptions for the status page.",
                "items": {
                    "$ref": "#/components/schemas/Subscription"
                }
            },
            "CheckGroupTrigger": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1
                    },
                    "token": {
                        "type": "string",
                        "example": "h7QMmh8c0hYw"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "called_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "groupId": {
                        "type": "number",
                        "example": 1
                    }
                },
                "required": [
                    "id",
                    "token",
                    "created_at",
                    "groupId"
                ]
            },
            "CheckTrigger": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1
                    },
                    "token": {
                        "type": "string",
                        "example": "h7QMmh8c0hYw"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "called_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date"
                    },
                    "checkId": {
                        "type": "string",
                        "example": "a13a7875-ec45-4780-b39f-675ec288cfe1"
                    }
                },
                "required": [
                    "id",
                    "token",
                    "created_at",
                    "checkId"
                ]
            },
            "Model258": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/EnvironmentVariableGet"
                }
            },
            "Model259": {
                "type": "string",
                "enum": [
                    "us-east-1",
                    "us-east-2",
                    "us-west-1",
                    "us-west-2",
                    "ca-central-1",
                    "sa-east-1",
                    "eu-west-1",
                    "eu-central-1",
                    "eu-west-2",
                    "eu-west-3",
                    "eu-north-1",
                    "eu-south-1",
                    "me-south-1",
                    "ap-southeast-1",
                    "ap-northeast-1",
                    "ap-east-1",
                    "ap-southeast-2",
                    "ap-southeast-3",
                    "ap-northeast-2",
                    "ap-northeast-3",
                    "ap-south-1",
                    "af-south-1"
                ]
            },
            "Model260": {
                "type": "array",
                "description": "An array of one or more data center locations where to run the checks.",
                "example": [
                    "us-east-1",
                    "eu-central-1"
                ],
                "items": {
                    "$ref": "#/components/schemas/Model259"
                }
            },
            "Model261": {
                "type": "string",
                "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute checks in this group.",
                "default": null,
                "enum": [
                    "2025.04",
                    "2024.09",
                    "2024.02",
                    "2023.09",
                    "2023.02",
                    "2022.10"
                ]
            },
            "Model262": {
                "type": "array",
                "description": "List of alert channel subscriptions.",
                "example": [],
                "items": {
                    "$ref": "#/components/schemas/Model29"
                }
            },
            "Model263": {
                "type": "array",
                "description": "An array of one or more private locations where to run the checks.",
                "example": [
                    "data-center-eu"
                ],
                "items": {
                    "type": "string"
                }
            },
            "Model264": {
                "type": "object",
                "description": "Alert settings.",
                "default": null,
                "properties": {
                    "escalationType": {
                        "$ref": "#/components/schemas/escalationType"
                    },
                    "reminders": {
                        "$ref": "#/components/schemas/AlertSettingsReminders"
                    },
                    "sslCertificates": {
                        "$ref": "#/components/schemas/AlertSettingsSSLCertificates"
                    },
                    "runBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsRunBasedEscalation"
                    },
                    "timeBasedEscalation": {
                        "$ref": "#/components/schemas/AlertSettingsTimeBasedEscalation"
                    },
                    "parallelRunFailureThreshold": {
                        "$ref": "#/components/schemas/parallelRunFailureThreshold"
                    }
                }
            },
            "CheckGroupCreateOrUpdateV2": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the check group.",
                        "example": "Check group"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the checks in the group are running or not.",
                        "default": true
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check in this group fails and/or recovers.",
                        "default": false
                    },
                    "tags": {
                        "$ref": "#/components/schemas/CheckGroupTagList"
                    },
                    "locations": {
                        "$ref": "#/components/schemas/Model260"
                    },
                    "concurrency": {
                        "type": "number",
                        "description": "Determines how many checks are invoked concurrently when triggering a check group from CI/CD or through the API.",
                        "default": 3,
                        "minimum": 1,
                        "x-constraint": {
                            "sign": "positive"
                        }
                    },
                    "apiCheckDefaults": {
                        "$ref": "#/components/schemas/CheckGroupCreateAPICheckDefaults"
                    },
                    "browserCheckDefaults": {
                        "type": "string"
                    },
                    "runtimeId": {
                        "$ref": "#/components/schemas/Model261"
                    },
                    "environmentVariables": {
                        "$ref": "#/components/schemas/environmentVariables"
                    },
                    "alertChannelSubscriptions": {
                        "$ref": "#/components/schemas/Model262"
                    },
                    "setupSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the setup phase of an API check in this group.",
                        "example": "null",
                        "default": null
                    },
                    "tearDownSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the teardown phase of an API check in this group.",
                        "example": "null",
                        "default": null
                    },
                    "localSetupScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.",
                        "example": "null",
                        "default": null
                    },
                    "localTearDownScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.",
                        "example": "null",
                        "default": null
                    },
                    "privateLocations": {
                        "$ref": "#/components/schemas/Model263"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "When true, the checks in the group will run in parallel in all selected locations.",
                        "default": null
                    },
                    "alertSettings": {
                        "$ref": "#/components/schemas/Model264"
                    },
                    "retryStrategy": {
                        "$ref": "#/components/schemas/RetryStrategy"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the checks in the group will use the alert settings that are configured on the account",
                        "default": null
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "required": [
                    "name"
                ]
            },
            "Model265": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CheckResult"
                }
            },
            "CheckResultListV2": {
                "type": "object",
                "properties": {
                    "length": {
                        "type": "number"
                    },
                    "entries": {
                        "$ref": "#/components/schemas/Model265"
                    },
                    "nextId": {
                        "type": "string"
                    }
                },
                "required": [
                    "length"
                ]
            }
        }
    }
}